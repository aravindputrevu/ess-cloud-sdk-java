/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApmCrudResponse;
import io.swagger.client.model.ApmInfo;
import io.swagger.client.model.ApmPlan;
import io.swagger.client.model.ApmPlansInfo;
import io.swagger.client.model.ApmsInfo;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.ClusterCommandResponse;
import io.swagger.client.model.ClusterMetadataSettings;
import io.swagger.client.model.ClusterUpgradeInfo;
import io.swagger.client.model.CreateApmRequest;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.ModelVersionIndexSynchronizationResults;
import io.swagger.client.model.SearchRequest;
import io.swagger.client.model.TransientApmPlanConfiguration;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClustersApmApi
 */
@Ignore
public class ClustersApmApiTest {

    private final ClustersApmApi api = new ClustersApmApi();

    /**
     * Cancel pending plan
     *
     * Cancels the pending plan of an APM cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelApmPendingPlanTest() throws ApiException {
        String clusterId = null;
        Boolean ignoreMissing = null;
        Boolean forceDelete = null;
        ApmCrudResponse response = api.cancelApmPendingPlan(clusterId, ignoreMissing, forceDelete);

        // TODO: test validations
    }
    /**
     * Create cluster
     *
     * Creates an APM cluster for a given Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApmTest() throws ApiException {
        CreateApmRequest body = null;
        Boolean validateOnly = null;
        ApmCrudResponse response = api.createApm(body, validateOnly);

        // TODO: test validations
    }
    /**
     * Delete cluster
     *
     * Deletes an APM cluster. Requires that you have already successfully issued &#x60;_shutdown&#x60; command against the cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApmTest() throws ApiException {
        String clusterId = null;
        EmptyResponse response = api.deleteApm(clusterId);

        // TODO: test validations
    }
    /**
     * Get cluster
     *
     * Retrieves cluster information for a APM cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApmClusterTest() throws ApiException {
        String clusterId = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showPlanLogs = null;
        Boolean showPlanDefaults = null;
        Boolean showSettings = null;
        ApmInfo response = api.getApmCluster(clusterId, showMetadata, showPlans, showPlanLogs, showPlanDefaults, showSettings);

        // TODO: test validations
    }
    /**
     * Get plan activity
     *
     * Retrieves the current and historical plan information for a APM cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApmClusterPlanActivityTest() throws ApiException {
        String clusterId = null;
        Boolean showPlanLogs = null;
        Boolean showPlanDefaults = null;
        ApmPlansInfo response = api.getApmClusterPlanActivity(clusterId, showPlanLogs, showPlanDefaults);

        // TODO: test validations
    }
    /**
     * Get clusters
     *
     * Retrieves cluster information for all APM clusters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApmClustersTest() throws ApiException {
        Integer from = null;
        Integer size = null;
        String q = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showHidden = null;
        Boolean showPlanDefaults = null;
        Boolean showSettings = null;
        ApmsInfo response = api.getApmClusters(from, size, q, showMetadata, showPlans, showHidden, showPlanDefaults, showSettings);

        // TODO: test validations
    }
    /**
     * Get cluster metadata
     *
     * Advanced use only. Retrieves the internal metadata, in free-form JSON, for the APM instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApmMetadataRawTest() throws ApiException {
        String clusterId = null;
        Object response = api.getApmMetadataRaw(clusterId);

        // TODO: test validations
    }
    /**
     * Get cluster metadata settings
     *
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApmMetadataSettingsTest() throws ApiException {
        String clusterId = null;
        ClusterMetadataSettings response = api.getApmMetadataSettings(clusterId);

        // TODO: test validations
    }
    /**
     * Get pending plan
     *
     * Retrieves the pending plan of an APM cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApmPendingPlanTest() throws ApiException {
        String clusterId = null;
        Boolean showPlanDefaults = null;
        ApmPlan response = api.getApmPendingPlan(clusterId, showPlanDefaults);

        // TODO: test validations
    }
    /**
     * Get plan
     *
     * Retrieves the active plan of an APM cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApmPlanTest() throws ApiException {
        String clusterId = null;
        Boolean showPlanDefaults = null;
        ApmPlan response = api.getApmPlan(clusterId, showPlanDefaults);

        // TODO: test validations
    }
    /**
     * Move instances
     *
     * Moves one or more instances belonging to a Apm cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveApmInstancesTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        TransientApmPlanConfiguration body = null;
        Boolean ignoreMissing = null;
        Boolean forceUpdate = null;
        Boolean validateOnly = null;
        ClusterCommandResponse response = api.moveApmInstances(clusterId, instanceIds, body, ignoreMissing, forceUpdate, validateOnly);

        // TODO: test validations
    }
    /**
     * Move instances (advanced)
     *
     * Moves instances belonging to a Apm cluster, with custom configuration posted in the body.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveApmInstancesAdvancedTest() throws ApiException {
        TransientApmPlanConfiguration body = null;
        String clusterId = null;
        Boolean forceUpdate = null;
        Boolean validateOnly = null;
        ClusterCommandResponse response = api.moveApmInstancesAdvanced(body, clusterId, forceUpdate, validateOnly);

        // TODO: test validations
    }
    /**
     * Reset token
     *
     * Resets the secret token for a given APM cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetApmSecretTokenTest() throws ApiException {
        String clusterId = null;
        ApmCrudResponse response = api.resetApmSecretToken(clusterId);

        // TODO: test validations
    }
    /**
     * Restart cluster
     *
     * Restarts a Apm cluster. If a cluster is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a Apm restart command and waits for it to complete. If a cluster is inactive: this command starts it up with the most recent successful plan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartApmTest() throws ApiException {
        String clusterId = null;
        Boolean cancelPending = null;
        ClusterCommandResponse response = api.restartApm(clusterId, cancelPending);

        // TODO: test validations
    }
    /**
     * Resynchronize cluster
     *
     * Immediately resynchronizes the search index and cache for the selected APM cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncApmClusterTest() throws ApiException {
        String clusterId = null;
        EmptyResponse response = api.resyncApmCluster(clusterId);

        // TODO: test validations
    }
    /**
     * Resynchronize clusters
     *
     * Asynchronously resynchronizes the search index for all APM clusters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncApmClustersTest() throws ApiException {
        Boolean skipMatchingVersion = null;
        ModelVersionIndexSynchronizationResults response = api.resyncApmClusters(skipMatchingVersion);

        // TODO: test validations
    }
    /**
     * Search clusters
     *
     * Retrieves cluster information for all Apm clusters that match a given query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchApmsTest() throws ApiException {
        SearchRequest body = null;
        ApmsInfo response = api.searchApms(body);

        // TODO: test validations
    }
    /**
     * Set cluster metadata
     *
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the APM instance. Only use the parameters to set the modified JSON that is returned from the get version of the metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setApmMetadataRawTest() throws ApiException {
        String body = null;
        String clusterId = null;
        Integer version = null;
        Object response = api.setApmMetadataRaw(body, clusterId, version);

        // TODO: test validations
    }
    /**
     * Set cluster name
     *
     * Assigns a name to the APM instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setApmNameTest() throws ApiException {
        String clusterId = null;
        String newName = null;
        EmptyResponse response = api.setApmName(clusterId, newName);

        // TODO: test validations
    }
    /**
     * Shut down cluster
     *
     * Shuts down a running cluster and removes all nodes belonging to the cluster. The cluster definition is retained. Warning: this will lose all cluster data that is not saved in a snapshot repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shutdownApmTest() throws ApiException {
        String clusterId = null;
        Boolean hide = null;
        ClusterCommandResponse response = api.shutdownApm(clusterId, hide);

        // TODO: test validations
    }
    /**
     * Start instances
     *
     * Starts the instances belonging to a Apm cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startApmInstancesTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.startApmInstances(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Start all instances
     *
     * Starts all the instances belonging to a Apm cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startApmInstancesAllTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.startApmInstancesAll(clusterId);

        // TODO: test validations
    }
    /**
     * Start maintenance mode all instances
     *
     * Starts maintenance mode of all instances belonging to a Apm cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startApmInstancesAllMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.startApmInstancesAllMaintenanceMode(clusterId);

        // TODO: test validations
    }
    /**
     * Start maintenance mode
     *
     * Starts maintenance mode of instances belonging to a Apm cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startApmMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.startApmMaintenanceMode(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Stop instances
     *
     * Stops the instances belonging to a Apm cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopApmInstancesTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.stopApmInstances(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Stop all instances
     *
     * Stops all the instances belonging to a Apm cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopApmInstancesAllTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.stopApmInstancesAll(clusterId);

        // TODO: test validations
    }
    /**
     * Stop maintenance mode all instances
     *
     * Stops maintenance mode of all instances belonging to a Apm cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopApmInstancesAllMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.stopApmInstancesAllMaintenanceMode(clusterId);

        // TODO: test validations
    }
    /**
     * Stop maintenance mode
     *
     * Stops maintenance mode of instances belonging to a Apm cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopApmMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.stopApmMaintenanceMode(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Update cluster metadata settings
     *
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied.Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApmMetadataSettingsTest() throws ApiException {
        ClusterMetadataSettings body = null;
        String clusterId = null;
        Integer version = null;
        ClusterMetadataSettings response = api.updateApmMetadataSettings(body, clusterId, version);

        // TODO: test validations
    }
    /**
     * Update plan
     *
     * Updates the configuration of an existing Apm cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApmPlanTest() throws ApiException {
        ApmPlan body = null;
        String clusterId = null;
        Boolean validateOnly = null;
        ApmCrudResponse response = api.updateApmPlan(body, clusterId, validateOnly);

        // TODO: test validations
    }
    /**
     * Upgrade cluster
     *
     * Upgrades a running cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeApmTest() throws ApiException {
        String clusterId = null;
        Boolean validateOnly = null;
        ClusterUpgradeInfo response = api.upgradeApm(clusterId, validateOnly);

        // TODO: test validations
    }
}
