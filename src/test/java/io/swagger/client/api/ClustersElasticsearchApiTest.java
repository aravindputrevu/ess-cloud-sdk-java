/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.ClusterCommandResponse;
import io.swagger.client.model.ClusterCrudResponse;
import io.swagger.client.model.ClusterCurationSettings;
import io.swagger.client.model.ClusterMetadataSettings;
import io.swagger.client.model.ClusterPlanMigrationResponse;
import io.swagger.client.model.ClusterSnapshotRequest;
import io.swagger.client.model.ClusterSnapshotResponse;
import io.swagger.client.model.ClusterSnapshotSettings;
import io.swagger.client.model.CreateElasticsearchClusterRequest;
import io.swagger.client.model.CrossClusterSearchClusters;
import io.swagger.client.model.CrossClusterSearchSettings;
import io.swagger.client.model.ElasticsearchClusterInfo;
import io.swagger.client.model.ElasticsearchClusterInstanceSettingsOverrides;
import io.swagger.client.model.ElasticsearchClusterPlan;
import io.swagger.client.model.ElasticsearchClusterPlansInfo;
import io.swagger.client.model.ElasticsearchClustersInfo;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.KeystoreContents;
import io.swagger.client.model.LegacySecuritySettings;
import io.swagger.client.model.ModelVersionIndexSynchronizationResults;
import io.swagger.client.model.SearchRequest;
import io.swagger.client.model.TransientElasticsearchPlanConfiguration;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClustersElasticsearchApi
 */
@Ignore
public class ClustersElasticsearchApiTest {

    private final ClustersElasticsearchApi api = new ClustersElasticsearchApi();

    /**
     * Cancel monitoring
     *
     * Deletes all monitoring destinations for the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelEsClusterMonitoringTest() throws ApiException {
        String clusterId = null;
        EmptyResponse response = api.cancelEsClusterMonitoring(clusterId);

        // TODO: test validations
    }
    /**
     * Cancel pending plan
     *
     * Cancels the pending plan of the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelEsClusterPendingPlanTest() throws ApiException {
        String clusterId = null;
        Boolean ignoreMissing = null;
        Boolean forceDelete = null;
        EmptyResponse response = api.cancelEsClusterPendingPlan(clusterId, ignoreMissing, forceDelete);

        // TODO: test validations
    }
    /**
     * Create cluster
     *
     * Creates an Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEsClusterTest() throws ApiException {
        CreateElasticsearchClusterRequest body = null;
        Boolean validateOnly = null;
        String requestId = null;
        ClusterCrudResponse response = api.createEsCluster(body, validateOnly, requestId);

        // TODO: test validations
    }
    /**
     * Delete cluster
     *
     * Deletes the Elasticsearch cluster. Before you delete the Elasticsearch cluster, you must first successfully issue a &#x60;_shutdown&#x60; command.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEsClusterTest() throws ApiException {
        String clusterId = null;
        EmptyResponse response = api.deleteEsCluster(clusterId);

        // TODO: test validations
    }
    /**
     * Proxies HTTP DELETE request to the cluster
     *
     * Proxies HTTP DELETE request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEsProxyRequestsTest() throws ApiException {
        String clusterId = null;
        String xManagementRequest = null;
        String elasticsearchPath = null;
        api.deleteEsProxyRequests(clusterId, xManagementRequest, elasticsearchPath);

        // TODO: test validations
    }
    /**
     * Generate diagnostics
     *
     * Retrieves a support diagnostic bundle from an active Elasticsearch cluster. To successfully retrieve a support diagnostic bundle, the cluster must be responsive.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateEsClusterDiagnosticsTest() throws ApiException {
        String clusterId = null;
        String response = api.generateEsClusterDiagnostics(clusterId);

        // TODO: test validations
    }
    /**
     * Generate logs
     *
     * Retrieves the log file for the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateEsClusterLogsTest() throws ApiException {
        String clusterId = null;
        String date = null;
        String response = api.generateEsClusterLogs(clusterId, date);

        // TODO: test validations
    }
    /**
     * Search clusters that can be used as cross-cluster search remotes
     *
     * Retrieves the information for all of the Elasticsearch clusters that can selected as remotes in a given version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsCcsEligibleRemotesTest() throws ApiException {
        String version = null;
        String q = null;
        String ownerId = null;
        Integer size = null;
        ElasticsearchClustersInfo response = api.getEsCcsEligibleRemotes(version, q, ownerId, size);

        // TODO: test validations
    }
    /**
     * Get cluster
     *
     * Retrieves the Elasticsearch cluster information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterTest() throws ApiException {
        String clusterId = null;
        Boolean showSecurity = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showPlanLogs = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        Integer showSystemAlerts = null;
        Boolean showSettings = null;
        Boolean enrichWithTemplate = null;
        ElasticsearchClusterInfo response = api.getEsCluster(clusterId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate);

        // TODO: test validations
    }
    /**
     * Get cross-cluster search clusters
     *
     * Returns the list of cross-cluster search clusters&#x27; IDs for the remote cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterCcsTest() throws ApiException {
        String clusterId = null;
        CrossClusterSearchClusters response = api.getEsClusterCcs(clusterId);

        // TODO: test validations
    }
    /**
     * Get remote clusters for cross-cluster search
     *
     * Returns cross-cluster search configuration for the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterCcsSettingsTest() throws ApiException {
        String clusterId = null;
        CrossClusterSearchSettings response = api.getEsClusterCcsSettings(clusterId);

        // TODO: test validations
    }
    /**
     * Get cluster curation settings
     *
     * Retrieves cluster curation settings for an Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterCurationSettingsTest() throws ApiException {
        String clusterId = null;
        ClusterCurationSettings response = api.getEsClusterCurationSettings(clusterId);

        // TODO: test validations
    }
    /**
     * Get settings from this cluster&#x27;s keystore
     *
     * Returns the available keys in the keystore.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterKeystoreTest() throws ApiException {
        String clusterId = null;
        KeystoreContents response = api.getEsClusterKeystore(clusterId);

        // TODO: test validations
    }
    /**
     * Get cluster metadata
     *
     * Advanced use only. Retrieves the internal cluster metadata, in free-form JSON, for the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterMetadataRawTest() throws ApiException {
        String clusterId = null;
        Object response = api.getEsClusterMetadataRaw(clusterId);

        // TODO: test validations
    }
    /**
     * Get cluster metadata settings
     *
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterMetadataSettingsTest() throws ApiException {
        String clusterId = null;
        ClusterMetadataSettings response = api.getEsClusterMetadataSettings(clusterId);

        // TODO: test validations
    }
    /**
     * Get pending plan
     *
     * Retrieves the pending plan of the cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterPendingPlanTest() throws ApiException {
        String clusterId = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        Boolean enrichWithTemplate = null;
        ElasticsearchClusterPlan response = api.getEsClusterPendingPlan(clusterId, showPlanDefaults, convertLegacyPlans, enrichWithTemplate);

        // TODO: test validations
    }
    /**
     * Get plan
     *
     * Retrieves the active plan of the Elasticsearch cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterPlanTest() throws ApiException {
        String clusterId = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        Boolean enrichWithTemplate = null;
        ElasticsearchClusterPlan response = api.getEsClusterPlan(clusterId, showPlanDefaults, convertLegacyPlans, enrichWithTemplate);

        // TODO: test validations
    }
    /**
     * Get plan activity
     *
     * Retrieves the active and historical plan information for the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterPlanActivityTest() throws ApiException {
        String clusterId = null;
        Boolean showPlanLogs = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        Boolean enrichWithTemplate = null;
        ElasticsearchClusterPlansInfo response = api.getEsClusterPlanActivity(clusterId, showPlanLogs, showPlanDefaults, convertLegacyPlans, enrichWithTemplate);

        // TODO: test validations
    }
    /**
     * Get cluster snapshot settings
     *
     * Gets cluster snapshot settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClusterSnapshotSettingsTest() throws ApiException {
        String clusterId = null;
        ClusterSnapshotSettings response = api.getEsClusterSnapshotSettings(clusterId);

        // TODO: test validations
    }
    /**
     * Get clusters
     *
     * Retrieves the information for all Elasticsearch clusters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsClustersTest() throws ApiException {
        Integer from = null;
        Integer size = null;
        String q = null;
        Boolean showSecurity = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        Boolean enrichWithTemplate = null;
        Integer showSystemAlerts = null;
        Boolean showHidden = null;
        Boolean showSettings = null;
        ElasticsearchClustersInfo response = api.getEsClusters(from, size, q, showSecurity, showMetadata, showPlans, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, showSystemAlerts, showHidden, showSettings);

        // TODO: test validations
    }
    /**
     * Proxies HTTP GET request to the cluster
     *
     * Proxies HTTP GET request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEsProxyRequestsTest() throws ApiException {
        String clusterId = null;
        String elasticsearchPath = null;
        String xManagementRequest = null;
        api.getEsProxyRequests(clusterId, elasticsearchPath, xManagementRequest);

        // TODO: test validations
    }
    /**
     * Migrate plan
     *
     * Migrates the configuration of the Elasticsearch cluster to a different template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void migrateEsClusterPlanTest() throws ApiException {
        String clusterId = null;
        String template = null;
        Boolean validateOnly = null;
        ClusterPlanMigrationResponse response = api.migrateEsClusterPlan(clusterId, template, validateOnly);

        // TODO: test validations
    }
    /**
     * Move instances
     *
     * Moves one or more instances in the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveEsClusterInstancesTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        TransientElasticsearchPlanConfiguration body = null;
        Boolean ignoreMissing = null;
        Boolean forceUpdate = null;
        Boolean instancesDown = null;
        Boolean moveOnly = null;
        Boolean validateOnly = null;
        ClusterCommandResponse response = api.moveEsClusterInstances(clusterId, instanceIds, body, ignoreMissing, forceUpdate, instancesDown, moveOnly, validateOnly);

        // TODO: test validations
    }
    /**
     * Move instances (advanced)
     *
     * Moves one or more instances in the Elasticsearch cluster. The custom configuration settings are posted in the body.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveEsClusterInstancesAdvancedTest() throws ApiException {
        TransientElasticsearchPlanConfiguration body = null;
        String clusterId = null;
        Boolean forceUpdate = null;
        Boolean instancesDown = null;
        Boolean moveOnly = null;
        Boolean validateOnly = null;
        ClusterCommandResponse response = api.moveEsClusterInstancesAdvanced(body, clusterId, forceUpdate, instancesDown, moveOnly, validateOnly);

        // TODO: test validations
    }
    /**
     * Proxies HTTP POST request to the cluster
     *
     * Proxies HTTP POST request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postEsProxyRequestsTest() throws ApiException {
        String xManagementRequest = null;
        String clusterId = null;
        String elasticsearchPath = null;
        String body = null;
        api.postEsProxyRequests(xManagementRequest, clusterId, elasticsearchPath, body);

        // TODO: test validations
    }
    /**
     * Proxies HTTP PUT request to the cluster
     *
     * Proxies HTTP PUT request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putEsProxyRequestsTest() throws ApiException {
        String xManagementRequest = null;
        String clusterId = null;
        String elasticsearchPath = null;
        String body = null;
        api.putEsProxyRequests(xManagementRequest, clusterId, elasticsearchPath, body);

        // TODO: test validations
    }
    /**
     * Restart cluster
     *
     * Restarts the Elasticsearch cluster. When you restart an active cluster, the existing plan is used and a &#x60;cluster_reboot&#x60; is applied. A &#x60;cluster_reboot&#x60; issues an Elasticsearch restart command, then waits for the command to complete. When you restart an inactive cluster, the most recent successful plan is applied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartEsClusterTest() throws ApiException {
        String clusterId = null;
        Boolean restoreSnapshot = null;
        Boolean skipSnapshot = null;
        Boolean cancelPending = null;
        String groupAttribute = null;
        Integer shardInitWaitTime = null;
        ClusterCommandResponse response = api.restartEsCluster(clusterId, restoreSnapshot, skipSnapshot, cancelPending, groupAttribute, shardInitWaitTime);

        // TODO: test validations
    }
    /**
     * Resynchronize cluster
     *
     * Immediately resynchronizes the search index and cache for the selected Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncEsClusterTest() throws ApiException {
        String clusterId = null;
        EmptyResponse response = api.resyncEsCluster(clusterId);

        // TODO: test validations
    }
    /**
     * Resynchronize clusters
     *
     * Asynchronously resynchronizes the search index for all Elasticsearch clusters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncEsClustersTest() throws ApiException {
        Boolean skipMatchingVersion = null;
        ModelVersionIndexSynchronizationResults response = api.resyncEsClusters(skipMatchingVersion);

        // TODO: test validations
    }
    /**
     * Search clusters
     *
     * Retrieves the information for all of the Elasticsearch clusters that match the specified query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchEsClustersTest() throws ApiException {
        SearchRequest body = null;
        ElasticsearchClustersInfo response = api.searchEsClusters(body);

        // TODO: test validations
    }
    /**
     * Set remote clusters for cross-cluster search
     *
     * Overwrites or creates the cross-cluster search configuration for the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEsClusterCcsSettingsTest() throws ApiException {
        CrossClusterSearchSettings body = null;
        String clusterId = null;
        EmptyResponse response = api.setEsClusterCcsSettings(body, clusterId);

        // TODO: test validations
    }
    /**
     * Set settings overrides (all instances)
     *
     * Overrides the settings for all of the instances in the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEsClusterInstancesAllSettingsOverridesTest() throws ApiException {
        ElasticsearchClusterInstanceSettingsOverrides body = null;
        String clusterId = null;
        Boolean restartAfterUpdate = null;
        ElasticsearchClusterInstanceSettingsOverrides response = api.setEsClusterInstancesAllSettingsOverrides(body, clusterId, restartAfterUpdate);

        // TODO: test validations
    }
    /**
     * Set settings overrides
     *
     * Overrides the settings for the specified instances in the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEsClusterInstancesSettingsOverridesTest() throws ApiException {
        ElasticsearchClusterInstanceSettingsOverrides body = null;
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        Boolean restartAfterUpdate = null;
        ElasticsearchClusterInstanceSettingsOverrides response = api.setEsClusterInstancesSettingsOverrides(body, clusterId, instanceIds, ignoreMissing, restartAfterUpdate);

        // TODO: test validations
    }
    /**
     * Add or remove settings from the cluster keystore
     *
     * Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEsClusterKeystoreTest() throws ApiException {
        KeystoreContents body = null;
        String clusterId = null;
        KeystoreContents response = api.setEsClusterKeystore(body, clusterId);

        // TODO: test validations
    }
    /**
     * Set legacy security settings
     *
     * Sets the legacy Shield security settings for a 2.x Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEsClusterLegacySecuritySettingsTest() throws ApiException {
        LegacySecuritySettings body = null;
        String clusterId = null;
        LegacySecuritySettings response = api.setEsClusterLegacySecuritySettings(body, clusterId);

        // TODO: test validations
    }
    /**
     * Set cluster metadata
     *
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the Elasticsearch cluster. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEsClusterMetadataRawTest() throws ApiException {
        String body = null;
        String clusterId = null;
        Integer version = null;
        Object response = api.setEsClusterMetadataRaw(body, clusterId, version);

        // TODO: test validations
    }
    /**
     * Set monitoring
     *
     * Overwrites or creates the monitoring destination for the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEsClusterMonitoringTest() throws ApiException {
        String clusterId = null;
        String destClusterId = null;
        EmptyResponse response = api.setEsClusterMonitoring(clusterId, destClusterId);

        // TODO: test validations
    }
    /**
     * Set cluster name
     *
     * Assigns a name to the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEsClusterNameTest() throws ApiException {
        String clusterId = null;
        String newName = null;
        EmptyResponse response = api.setEsClusterName(clusterId, newName);

        // TODO: test validations
    }
    /**
     * Shut down cluster
     *
     * Shuts down the active Elasticsearch cluster and removes all of the cluster nodes. The cluster plan is retained. WARNING: To avoid data loss, save the data outside of the cluster before you shut the cluster down.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shutdownEsClusterTest() throws ApiException {
        String clusterId = null;
        Boolean skipSnapshot = null;
        Boolean hide = null;
        ClusterCommandResponse response = api.shutdownEsCluster(clusterId, skipSnapshot, hide);

        // TODO: test validations
    }
    /**
     * Take snapshot
     *
     * To create a snapshot of the specified Elasticsearch cluster, uses the configured snapshot repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void snapshotEsClusterTest() throws ApiException {
        String clusterId = null;
        ClusterSnapshotRequest body = null;
        ClusterSnapshotResponse response = api.snapshotEsCluster(clusterId, body);

        // TODO: test validations
    }
    /**
     * Start instances
     *
     * Starts the instances in the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startEsClusterInstancesTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.startEsClusterInstances(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Start all instances
     *
     * Starts all of the instances in the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startEsClusterInstancesAllTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.startEsClusterInstancesAll(clusterId);

        // TODO: test validations
    }
    /**
     * Start maintenance mode all instances
     *
     * Starts maintenance mode on all of the instances in the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startEsClusterInstancesAllMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.startEsClusterInstancesAllMaintenanceMode(clusterId);

        // TODO: test validations
    }
    /**
     * Start maintenance mode
     *
     * Starts maintenance mode on the specified instances in the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startEsClusterMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.startEsClusterMaintenanceMode(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Stop instances
     *
     * Stops the instances in the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopEsClusterInstancesTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.stopEsClusterInstances(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Stop all instances
     *
     * Stops all of the instances in the Elasticsearch cluster..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopEsClusterInstancesAllTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.stopEsClusterInstancesAll(clusterId);

        // TODO: test validations
    }
    /**
     * Stop maintenance mode all instances
     *
     * Stops maintenance mode on all of the instances in the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopEsClusterInstancesAllMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.stopEsClusterInstancesAllMaintenanceMode(clusterId);

        // TODO: test validations
    }
    /**
     * Stop maintenance mode
     *
     * Stops maintenance mode on the specified instances in the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopEsClusterMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.stopEsClusterMaintenanceMode(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Update cluster curation settings
     *
     * Overrides cluster curation settings for an Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEsClusterCurationSettingsTest() throws ApiException {
        ClusterCurationSettings body = null;
        String clusterId = null;
        Integer version = null;
        ClusterCurationSettings response = api.updateEsClusterCurationSettings(body, clusterId, version);

        // TODO: test validations
    }
    /**
     * Update cluster metadata settings
     *
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied. Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEsClusterMetadataSettingsTest() throws ApiException {
        ClusterMetadataSettings body = null;
        String clusterId = null;
        Integer version = null;
        ClusterMetadataSettings response = api.updateEsClusterMetadataSettings(body, clusterId, version);

        // TODO: test validations
    }
    /**
     * Update plan
     *
     * Updates the configuration of the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEsClusterPlanTest() throws ApiException {
        ElasticsearchClusterPlan body = null;
        String clusterId = null;
        Boolean validateOnly = null;
        ClusterCrudResponse response = api.updateEsClusterPlan(body, clusterId, validateOnly);

        // TODO: test validations
    }
    /**
     * Update cluster snapshot settings
     *
     * Any changes in the PATCHed object will be applied to the snapshot settings object.  PATCHing existing fields will cause same values to be re-applied. PATCHing a value of &#x27;null&#x27; will cause the field to be reverted to its default value or removed if no default value exists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEsClusterSnapshotSettingsTest() throws ApiException {
        ClusterSnapshotSettings body = null;
        String clusterId = null;
        Integer version = null;
        ClusterSnapshotSettings response = api.updateEsClusterSnapshotSettings(body, clusterId, version);

        // TODO: test validations
    }
}
