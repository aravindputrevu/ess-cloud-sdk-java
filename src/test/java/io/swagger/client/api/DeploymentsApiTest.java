/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApmResourceInfo;
import io.swagger.client.model.AppSearchResourceInfo;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.DeploymentCreateRequest;
import io.swagger.client.model.DeploymentCreateResponse;
import io.swagger.client.model.DeploymentDeleteResponse;
import io.swagger.client.model.DeploymentGetResponse;
import io.swagger.client.model.DeploymentResourceCommandResponse;
import io.swagger.client.model.DeploymentResourceCrudResponse;
import io.swagger.client.model.DeploymentResourceUpgradeResponse;
import io.swagger.client.model.DeploymentRestoreResponse;
import io.swagger.client.model.DeploymentShutdownResponse;
import io.swagger.client.model.DeploymentUpdateRequest;
import io.swagger.client.model.DeploymentUpdateResponse;
import io.swagger.client.model.DeploymentsListResponse;
import io.swagger.client.model.DeploymentsSearchResponse;
import io.swagger.client.model.ElasticsearchResourceInfo;
import io.swagger.client.model.IndexSynchronizationResults;
import io.swagger.client.model.KibanaResourceInfo;
import io.swagger.client.model.Note;
import io.swagger.client.model.Notes;
import io.swagger.client.model.SearchRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeploymentsApi
 */
@Ignore
public class DeploymentsApiTest {

    private final DeploymentsApi api = new DeploymentsApi();

    /**
     * Cancel resource pending plan
     *
     * Cancels the pending plan of a Resource belonging to a given Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelDeploymentResourcePendingPlanTest() throws ApiException {
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        Boolean forceDelete = null;
        Boolean ignoreMissing = null;
        DeploymentResourceCrudResponse response = api.cancelDeploymentResourcePendingPlan(deploymentId, resourceKind, refId, forceDelete, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Create Deployment
     *
     * Creates a Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeploymentTest() throws ApiException {
        DeploymentCreateRequest body = null;
        String requestId = null;
        Boolean validateOnly = null;
        DeploymentCreateResponse response = api.createDeployment(body, requestId, validateOnly);

        // TODO: test validations
    }
    /**
     * Create deployment note
     *
     * Create note for the running deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeploymentNoteTest() throws ApiException {
        Note body = null;
        String deploymentId = null;
        Integer version = null;
        Notes response = api.createDeploymentNote(body, deploymentId, version);

        // TODO: test validations
    }
    /**
     * Delete Deployment
     *
     * Deletes a Deployment and all its resources.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeploymentTest() throws ApiException {
        String deploymentId = null;
        DeploymentDeleteResponse response = api.deleteDeployment(deploymentId);

        // TODO: test validations
    }
    /**
     * Delete deployment note
     *
     * Delete note for the running deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeploymentNoteTest() throws ApiException {
        String deploymentId = null;
        String noteId = null;
        Integer version = null;
        Notes response = api.deleteDeploymentNote(deploymentId, noteId, version);

        // TODO: test validations
    }
    /**
     * Delete Stateless Resource from Deployment
     *
     * Delete Stateless Resource belonging to a given Deployment. Deployment must be shutdown already.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeploymentStatelessResourceTest() throws ApiException {
        String deploymentId = null;
        String statelessResourceKind = null;
        String refId = null;
        DeploymentResourceCrudResponse response = api.deleteDeploymentStatelessResource(deploymentId, statelessResourceKind, refId);

        // TODO: test validations
    }
    /**
     * Get Deployment
     *
     * Retrieves information about a Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeploymentTest() throws ApiException {
        String deploymentId = null;
        Boolean showSecurity = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showPlanLogs = null;
        Boolean showPlanHistory = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        Integer showSystemAlerts = null;
        Boolean showSettings = null;
        Boolean enrichWithTemplate = null;
        DeploymentGetResponse response = api.getDeployment(deploymentId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate);

        // TODO: test validations
    }
    /**
     * Get Deployment APM Resource Info
     *
     * Get info about an APM Resource belonging to a given Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeploymentApmResourceInfoTest() throws ApiException {
        String deploymentId = null;
        String refId = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showPlanLogs = null;
        Boolean showPlanHistory = null;
        Boolean showPlanDefaults = null;
        Boolean showSettings = null;
        ApmResourceInfo response = api.getDeploymentApmResourceInfo(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, showSettings);

        // TODO: test validations
    }
    /**
     * Get Deployment App Search Resource Info
     *
     * Get info about an App Search Resource belonging to a given Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeploymentAppsearchResourceInfoTest() throws ApiException {
        String deploymentId = null;
        String refId = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showPlanLogs = null;
        Boolean showPlanHistory = null;
        Boolean showPlanDefaults = null;
        Boolean showSettings = null;
        AppSearchResourceInfo response = api.getDeploymentAppsearchResourceInfo(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, showSettings);

        // TODO: test validations
    }
    /**
     * Get Deployment Elasticsearch Resource Info
     *
     * Get info about an Elasticsearch Resource belonging to a given Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeploymentEsResourceInfoTest() throws ApiException {
        String deploymentId = null;
        String refId = null;
        Boolean showSecurity = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showPlanLogs = null;
        Boolean showPlanHistory = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        Integer showSystemAlerts = null;
        Boolean showSettings = null;
        Boolean enrichWithTemplate = null;
        ElasticsearchResourceInfo response = api.getDeploymentEsResourceInfo(deploymentId, refId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate);

        // TODO: test validations
    }
    /**
     * Get Deployment Kibana Resource Info
     *
     * Get info about an Kibana Resource belonging to a given Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeploymentKibResourceInfoTest() throws ApiException {
        String deploymentId = null;
        String refId = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showPlanLogs = null;
        Boolean showPlanHistory = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        Boolean showSettings = null;
        KibanaResourceInfo response = api.getDeploymentKibResourceInfo(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSettings);

        // TODO: test validations
    }
    /**
     * Get a deployment note
     *
     * Gets a deployment note.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeploymentNoteTest() throws ApiException {
        String deploymentId = null;
        String noteId = null;
        Note response = api.getDeploymentNote(deploymentId, noteId);

        // TODO: test validations
    }
    /**
     * Get deployment notes
     *
     * Get deployment notes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeploymentNotesTest() throws ApiException {
        String deploymentId = null;
        Notes response = api.getDeploymentNotes(deploymentId);

        // TODO: test validations
    }
    /**
     * List Deployments
     *
     * List Deployments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDeploymentsTest() throws ApiException {
        DeploymentsListResponse response = api.listDeployments();

        // TODO: test validations
    }
    /**
     * Restart Deployment Elasticsearch Resource
     *
     * Restarts an Elasticsearch Resource. If a Resource is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartDeploymentEsResourceTest() throws ApiException {
        String deploymentId = null;
        String refId = null;
        Boolean restoreSnapshot = null;
        Boolean skipSnapshot = null;
        Boolean cancelPending = null;
        String groupAttribute = null;
        Long shardInitWaitTime = null;
        DeploymentResourceCommandResponse response = api.restartDeploymentEsResource(deploymentId, refId, restoreSnapshot, skipSnapshot, cancelPending, groupAttribute, shardInitWaitTime);

        // TODO: test validations
    }
    /**
     * Restart Deployment Stateless Resource
     *
     * Restarts an Stateless Resource. If a Resource is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartDeploymentStatelessResourceTest() throws ApiException {
        String deploymentId = null;
        String statelessResourceKind = null;
        String refId = null;
        Boolean cancelPending = null;
        DeploymentResourceCommandResponse response = api.restartDeploymentStatelessResource(deploymentId, statelessResourceKind, refId, cancelPending);

        // TODO: test validations
    }
    /**
     * Restores a shutdown Deployment
     *
     * Restores all resources in a Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreDeploymentTest() throws ApiException {
        String deploymentId = null;
        Boolean restoreSnapshot = null;
        DeploymentRestoreResponse response = api.restoreDeployment(deploymentId, restoreSnapshot);

        // TODO: test validations
    }
    /**
     * Restores a shutdown resource
     *
     * Restores a shutdown resource belonging to a given Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreDeploymentResourceTest() throws ApiException {
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        Boolean restoreSnapshot = null;
        DeploymentResourceCrudResponse response = api.restoreDeploymentResource(deploymentId, resourceKind, refId, restoreSnapshot);

        // TODO: test validations
    }
    /**
     * Resynchronize Deployment
     *
     * Immediately resynchronizes the search index for the selected deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncDeploymentTest() throws ApiException {
        String deploymentId = null;
        IndexSynchronizationResults response = api.resyncDeployment(deploymentId);

        // TODO: test validations
    }
    /**
     * Resynchronize Deployments
     *
     * Resynchronizes the search index for all the deployments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncDeploymentsTest() throws ApiException {
        IndexSynchronizationResults response = api.resyncDeployments();

        // TODO: test validations
    }
    /**
     * Search Deployments
     *
     * Retrieves the information for all of the Deployments that match the specified query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchDeploymentsTest() throws ApiException {
        SearchRequest body = null;
        DeploymentsSearchResponse response = api.searchDeployments(body);

        // TODO: test validations
    }
    /**
     * Set a Deployment&#x27;s resource metadata
     *
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the resource. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDeploymentResourceRawMetadataTest() throws ApiException {
        String body = null;
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        Integer version = null;
        String response = api.setDeploymentResourceRawMetadata(body, deploymentId, resourceKind, refId, version);

        // TODO: test validations
    }
    /**
     * Shuts down Deployment
     *
     * Shuts down all resources in a Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shutdownDeploymentTest() throws ApiException {
        String deploymentId = null;
        Boolean hide = null;
        Boolean skipSnapshot = null;
        DeploymentShutdownResponse response = api.shutdownDeployment(deploymentId, hide, skipSnapshot);

        // TODO: test validations
    }
    /**
     * Shutdown Deployment Elasticsearch Resource
     *
     * Shutdown Elasticsearch Resource belonging to a given Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shutdownDeploymentEsResourceTest() throws ApiException {
        String deploymentId = null;
        String refId = null;
        Boolean hide = null;
        Boolean skipSnapshot = null;
        DeploymentResourceCommandResponse response = api.shutdownDeploymentEsResource(deploymentId, refId, hide, skipSnapshot);

        // TODO: test validations
    }
    /**
     * Shutdown Deployment Stateless Resource
     *
     * Shutdown Stateless Resource belonging to a given Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shutdownDeploymentStatelessResourceTest() throws ApiException {
        String deploymentId = null;
        String statelessResourceKind = null;
        String refId = null;
        Boolean hide = null;
        Boolean skipSnapshot = null;
        DeploymentResourceCommandResponse response = api.shutdownDeploymentStatelessResource(deploymentId, statelessResourceKind, refId, hide, skipSnapshot);

        // TODO: test validations
    }
    /**
     * Start instances
     *
     * Starts instances belonging to a Deployment Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDeploymentResourceInstancesTest() throws ApiException {
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        DeploymentResourceCommandResponse response = api.startDeploymentResourceInstances(deploymentId, resourceKind, refId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Start all instances
     *
     * Starts all instances belonging to a Deployment Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDeploymentResourceInstancesAllTest() throws ApiException {
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        DeploymentResourceCommandResponse response = api.startDeploymentResourceInstancesAll(deploymentId, resourceKind, refId);

        // TODO: test validations
    }
    /**
     * Start maintenance mode (all instances)
     *
     * Starts maintenance mode of all instances belonging to a Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDeploymentResourceInstancesAllMaintenanceModeTest() throws ApiException {
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        DeploymentResourceCommandResponse response = api.startDeploymentResourceInstancesAllMaintenanceMode(deploymentId, resourceKind, refId);

        // TODO: test validations
    }
    /**
     * Start maintenance mode
     *
     * Starts maintenance mode of instances belonging to a Deployment Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDeploymentResourceMaintenanceModeTest() throws ApiException {
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        DeploymentResourceCommandResponse response = api.startDeploymentResourceMaintenanceMode(deploymentId, resourceKind, refId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Stop of instances
     *
     * Stops instances belonging to a Deployment Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopDeploymentResourceInstancesTest() throws ApiException {
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        DeploymentResourceCommandResponse response = api.stopDeploymentResourceInstances(deploymentId, resourceKind, refId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Stop all instances
     *
     * Stops all instances belonging to a Deployment Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopDeploymentResourceInstancesAllTest() throws ApiException {
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        DeploymentResourceCommandResponse response = api.stopDeploymentResourceInstancesAll(deploymentId, resourceKind, refId);

        // TODO: test validations
    }
    /**
     * Stop maintenance mode (all instances)
     *
     * Stops maintenance mode of all instances belonging to a Deployment Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopDeploymentResourceInstancesAllMaintenanceModeTest() throws ApiException {
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        DeploymentResourceCommandResponse response = api.stopDeploymentResourceInstancesAllMaintenanceMode(deploymentId, resourceKind, refId);

        // TODO: test validations
    }
    /**
     * Stop maintenance mode
     *
     * Stops maintenance mode of instances belonging to a Deployment Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopDeploymentResourceMaintenanceModeTest() throws ApiException {
        String deploymentId = null;
        String resourceKind = null;
        String refId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        DeploymentResourceCommandResponse response = api.stopDeploymentResourceMaintenanceMode(deploymentId, resourceKind, refId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Update Deployment
     *
     * Updates a Deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeploymentTest() throws ApiException {
        DeploymentUpdateRequest body = null;
        String deploymentId = null;
        Boolean hidePrunedOrphans = null;
        Boolean skipSnapshot = null;
        Boolean validateOnly = null;
        Integer version = null;
        DeploymentUpdateResponse response = api.updateDeployment(body, deploymentId, hidePrunedOrphans, skipSnapshot, validateOnly, version);

        // TODO: test validations
    }
    /**
     * Update deployment note
     *
     * Update note for the running deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeploymentNoteTest() throws ApiException {
        Note body = null;
        String deploymentId = null;
        String noteId = null;
        Integer version = null;
        Note response = api.updateDeploymentNote(body, deploymentId, noteId, version);

        // TODO: test validations
    }
    /**
     * Upgrade Kibana, APM, AppSearch inside Deployment
     *
     * Upgrades a running cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeDeploymentStatelessResourceTest() throws ApiException {
        String deploymentId = null;
        String statelessResourceKind = null;
        String refId = null;
        Boolean validateOnly = null;
        DeploymentResourceUpgradeResponse response = api.upgradeDeploymentStatelessResource(deploymentId, statelessResourceKind, refId, validateOnly);

        // TODO: test validations
    }
}
