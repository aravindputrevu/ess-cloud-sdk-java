/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.ClusterCommandResponse;
import io.swagger.client.model.ClusterCrudResponse;
import io.swagger.client.model.ClusterMetadataSettings;
import io.swagger.client.model.ClusterUpgradeInfo;
import io.swagger.client.model.CreateKibanaRequest;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.KibanaClusterInfo;
import io.swagger.client.model.KibanaClusterPlan;
import io.swagger.client.model.KibanaClusterPlansInfo;
import io.swagger.client.model.KibanaClustersInfo;
import io.swagger.client.model.ModelVersionIndexSynchronizationResults;
import io.swagger.client.model.SearchRequest;
import io.swagger.client.model.TransientKibanaPlanConfiguration;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClustersKibanaApi
 */
@Ignore
public class ClustersKibanaApiTest {

    private final ClustersKibanaApi api = new ClustersKibanaApi();

    /**
     * Cancel pending plan
     *
     * Cancels the pending plan of the Kibana instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelKibanaClusterPendingPlanTest() throws ApiException {
        String clusterId = null;
        Boolean ignoreMissing = null;
        Boolean forceDelete = null;
        EmptyResponse response = api.cancelKibanaClusterPendingPlan(clusterId, ignoreMissing, forceDelete);

        // TODO: test validations
    }
    /**
     * Create cluster
     *
     * Creates a Kibana instance for the Elasticsearch cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createKibanaClusterTest() throws ApiException {
        CreateKibanaRequest body = null;
        Boolean validateOnly = null;
        ClusterCrudResponse response = api.createKibanaCluster(body, validateOnly);

        // TODO: test validations
    }
    /**
     * Proxy HTTP DELETE request
     *
     * Proxies the HTTP DELETE request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKibProxyRequestsTest() throws ApiException {
        String clusterId = null;
        String xManagementRequest = null;
        String kibanaPath = null;
        api.deleteKibProxyRequests(clusterId, xManagementRequest, kibanaPath);

        // TODO: test validations
    }
    /**
     * Delete cluster
     *
     * Deletes the Kibana instance. Before you delete the Kibana instance, you must first successfully issue a &#x60;_shutdown&#x60; command.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKibanaClusterTest() throws ApiException {
        String clusterId = null;
        EmptyResponse response = api.deleteKibanaCluster(clusterId);

        // TODO: test validations
    }
    /**
     * Proxy HTTP GET request
     *
     * Proxies the HTTP GET request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKibProxyRequestsTest() throws ApiException {
        String clusterId = null;
        String kibanaPath = null;
        String xManagementRequest = null;
        api.getKibProxyRequests(clusterId, kibanaPath, xManagementRequest);

        // TODO: test validations
    }
    /**
     * Get cluster
     *
     * Retrieves the Kibana instance information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKibanaClusterTest() throws ApiException {
        String clusterId = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showPlanLogs = null;
        Boolean showPlanDefaults = null;
        Boolean showSettings = null;
        Boolean convertLegacyPlans = null;
        KibanaClusterInfo response = api.getKibanaCluster(clusterId, showMetadata, showPlans, showPlanLogs, showPlanDefaults, showSettings, convertLegacyPlans);

        // TODO: test validations
    }
    /**
     * Get cluster metadata
     *
     * Advanced use only. Retrieves the internal metadata, in free-form JSON, for the Kibana instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKibanaClusterMetadataRawTest() throws ApiException {
        String clusterId = null;
        Object response = api.getKibanaClusterMetadataRaw(clusterId);

        // TODO: test validations
    }
    /**
     * Get cluster metadata settings
     *
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKibanaClusterMetadataSettingsTest() throws ApiException {
        String clusterId = null;
        ClusterMetadataSettings response = api.getKibanaClusterMetadataSettings(clusterId);

        // TODO: test validations
    }
    /**
     * Get pending plan
     *
     * Retrieves the pending plan of the Kibana instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKibanaClusterPendingPlanTest() throws ApiException {
        String clusterId = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        KibanaClusterPlan response = api.getKibanaClusterPendingPlan(clusterId, showPlanDefaults, convertLegacyPlans);

        // TODO: test validations
    }
    /**
     * Get plan
     *
     * Retrieves the active plan of the Kibana instance. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKibanaClusterPlanTest() throws ApiException {
        String clusterId = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        KibanaClusterPlan response = api.getKibanaClusterPlan(clusterId, showPlanDefaults, convertLegacyPlans);

        // TODO: test validations
    }
    /**
     * Get plan activity
     *
     * Retrieves the active and historical plan information for the Kibana instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKibanaClusterPlanActivityTest() throws ApiException {
        String clusterId = null;
        Boolean showPlanLogs = null;
        Boolean showPlanDefaults = null;
        Boolean convertLegacyPlans = null;
        KibanaClusterPlansInfo response = api.getKibanaClusterPlanActivity(clusterId, showPlanLogs, showPlanDefaults, convertLegacyPlans);

        // TODO: test validations
    }
    /**
     * Get clusters
     *
     * Retrieves the information for all Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKibanaClustersTest() throws ApiException {
        Integer from = null;
        Integer size = null;
        String q = null;
        Boolean showMetadata = null;
        Boolean showPlans = null;
        Boolean showHidden = null;
        Boolean showPlanDefaults = null;
        Boolean showSettings = null;
        KibanaClustersInfo response = api.getKibanaClusters(from, size, q, showMetadata, showPlans, showHidden, showPlanDefaults, showSettings);

        // TODO: test validations
    }
    /**
     * Move instances
     *
     * Moves one or more Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveKibanaClusterInstancesTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        TransientKibanaPlanConfiguration body = null;
        Boolean ignoreMissing = null;
        Boolean forceUpdate = null;
        Boolean validateOnly = null;
        ClusterCommandResponse response = api.moveKibanaClusterInstances(clusterId, instanceIds, body, ignoreMissing, forceUpdate, validateOnly);

        // TODO: test validations
    }
    /**
     * Move instances (advanced)
     *
     * Moves one or more Kibana instances. The custom configuration settings are posted in the body.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveKibanaClusterInstancesAdvancedTest() throws ApiException {
        TransientKibanaPlanConfiguration body = null;
        String clusterId = null;
        Boolean forceUpdate = null;
        Boolean validateOnly = null;
        ClusterCommandResponse response = api.moveKibanaClusterInstancesAdvanced(body, clusterId, forceUpdate, validateOnly);

        // TODO: test validations
    }
    /**
     * Proxy HTTP POST request
     *
     * Proxies the HTTP POST request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postKibProxyRequestsTest() throws ApiException {
        String xManagementRequest = null;
        String clusterId = null;
        String kibanaPath = null;
        String body = null;
        api.postKibProxyRequests(xManagementRequest, clusterId, kibanaPath, body);

        // TODO: test validations
    }
    /**
     * Proxy HTTP PUT request
     *
     * Proxies the HTTP PUT request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putKibProxyRequestsTest() throws ApiException {
        String xManagementRequest = null;
        String clusterId = null;
        String kibanaPath = null;
        String body = null;
        api.putKibProxyRequests(xManagementRequest, clusterId, kibanaPath, body);

        // TODO: test validations
    }
    /**
     * Restart cluster
     *
     * Restarts the Kibana instance. When you restart an active instance, the existing plan is used and a &#x60;cluster_reboot&#x60; is applied. A &#x60;cluster_reboot&#x60; issues a Kibana restart command, then waits for the command to complete. When you restart an inactive instance, the most recent successful plan is applied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartKibanaClusterTest() throws ApiException {
        String clusterId = null;
        Boolean cancelPending = null;
        ClusterCommandResponse response = api.restartKibanaCluster(clusterId, cancelPending);

        // TODO: test validations
    }
    /**
     * Resynchronize cluster
     *
     * Immediately resynchronizes the search index and cache for the selected Kibana instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncKibanaClusterTest() throws ApiException {
        String clusterId = null;
        EmptyResponse response = api.resyncKibanaCluster(clusterId);

        // TODO: test validations
    }
    /**
     * Resynchronize clusters
     *
     * Asynchronously resynchronizes the search index for all Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncKibanaClustersTest() throws ApiException {
        Boolean skipMatchingVersion = null;
        ModelVersionIndexSynchronizationResults response = api.resyncKibanaClusters(skipMatchingVersion);

        // TODO: test validations
    }
    /**
     * Search clusters
     *
     * Retrieves the information for all of the Kibana instances that match the specified query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchKibanaClustersTest() throws ApiException {
        SearchRequest body = null;
        KibanaClustersInfo response = api.searchKibanaClusters(body);

        // TODO: test validations
    }
    /**
     * Set cluster metadata
     *
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the Kibana instance. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setKibanaClusterMetadataRawTest() throws ApiException {
        String body = null;
        String clusterId = null;
        Integer version = null;
        Object response = api.setKibanaClusterMetadataRaw(body, clusterId, version);

        // TODO: test validations
    }
    /**
     * Set cluster name
     *
     * Assigns a name to the Kibana instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setKibanaClusterNameTest() throws ApiException {
        String clusterId = null;
        String newName = null;
        EmptyResponse response = api.setKibanaClusterName(clusterId, newName);

        // TODO: test validations
    }
    /**
     * Shut down cluster
     *
     * Shuts down the active Kibana instance and removes all of the instance nodes. The instance definition is retained. WARNING: To avoid data loss, save the snapshot repository before you shut down the instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shutdownKibanaClusterTest() throws ApiException {
        String clusterId = null;
        Boolean hide = null;
        ClusterCommandResponse response = api.shutdownKibanaCluster(clusterId, hide);

        // TODO: test validations
    }
    /**
     * Start instances
     *
     * Starts the specified Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startKibanaClusterInstancesTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.startKibanaClusterInstances(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Start all instances
     *
     * Starts all of the Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startKibanaClusterInstancesAllTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.startKibanaClusterInstancesAll(clusterId);

        // TODO: test validations
    }
    /**
     * Start maintenance mode all instances
     *
     * Starts maintenance mode on all of the Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startKibanaClusterInstancesAllMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.startKibanaClusterInstancesAllMaintenanceMode(clusterId);

        // TODO: test validations
    }
    /**
     * Start maintenance mode
     *
     * Starts maintenance mode on the specified Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startKibanaClusterMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.startKibanaClusterMaintenanceMode(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Stop instances
     *
     * Stops the specified Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopKibanaClusterInstancesTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.stopKibanaClusterInstances(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Stop all instances
     *
     * Stops all of the Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopKibanaClusterInstancesAllTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.stopKibanaClusterInstancesAll(clusterId);

        // TODO: test validations
    }
    /**
     * Stop maintenance mode all instances
     *
     * Stops maintenance mode on all of the Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopKibanaClusterInstancesAllMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        ClusterCommandResponse response = api.stopKibanaClusterInstancesAllMaintenanceMode(clusterId);

        // TODO: test validations
    }
    /**
     * Stop maintenance mode
     *
     * Stops maintenance mode on the specified Kibana instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopKibanaClusterMaintenanceModeTest() throws ApiException {
        String clusterId = null;
        List<String> instanceIds = null;
        Boolean ignoreMissing = null;
        ClusterCommandResponse response = api.stopKibanaClusterMaintenanceMode(clusterId, instanceIds, ignoreMissing);

        // TODO: test validations
    }
    /**
     * Update cluster metadata settings
     *
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied. Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateKibanaClusterMetadataSettingsTest() throws ApiException {
        ClusterMetadataSettings body = null;
        String clusterId = null;
        Integer version = null;
        ClusterMetadataSettings response = api.updateKibanaClusterMetadataSettings(body, clusterId, version);

        // TODO: test validations
    }
    /**
     * Update plan
     *
     * Updates the configuration of the Kibana instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateKibanaClusterPlanTest() throws ApiException {
        KibanaClusterPlan body = null;
        String clusterId = null;
        Boolean validateOnly = null;
        ClusterCrudResponse response = api.updateKibanaClusterPlan(body, clusterId, validateOnly);

        // TODO: test validations
    }
    /**
     * Upgrade cluster
     *
     * Upgrades an active Kibana instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeKibanaClusterTest() throws ApiException {
        String clusterId = null;
        Boolean validateOnly = null;
        ClusterUpgradeInfo response = api.upgradeKibanaCluster(clusterId, validateOnly);

        // TODO: test validations
    }
}
