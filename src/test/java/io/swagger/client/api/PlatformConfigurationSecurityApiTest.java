/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ActiveDirectorySettings;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.EnrollmentTokenRequest;
import io.swagger.client.model.IdResponse;
import io.swagger.client.model.LdapSettings;
import io.swagger.client.model.ListEnrollmentTokenReply;
import io.swagger.client.model.RequestEnrollmentTokenReply;
import io.swagger.client.model.SamlSettings;
import io.swagger.client.model.SecurityDeployment;
import io.swagger.client.model.SecurityDeploymentCreateRequest;
import io.swagger.client.model.SecurityRealmInfoList;
import io.swagger.client.model.SecurityRealmsReorderRequest;
import io.swagger.client.model.TlsPublicCertChain;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlatformConfigurationSecurityApi
 */
@Ignore
public class PlatformConfigurationSecurityApiTest {

    private final PlatformConfigurationSecurityApi api = new PlatformConfigurationSecurityApi();

    /**
     * Create Active Directory configuration
     *
     * Creates a new Active Directory configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createActiveDirectoryConfigurationTest() throws ApiException {
        ActiveDirectorySettings body = null;
        EmptyResponse response = api.createActiveDirectoryConfiguration(body);

        // TODO: test validations
    }
    /**
     * Create enrollment token
     *
     * Creates an enrollment token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEnrollmentTokenTest() throws ApiException {
        EnrollmentTokenRequest body = null;
        RequestEnrollmentTokenReply response = api.createEnrollmentToken(body);

        // TODO: test validations
    }
    /**
     * Create LDAP configuration
     *
     * Creates a new LDAP configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLdapConfigurationTest() throws ApiException {
        LdapSettings body = null;
        EmptyResponse response = api.createLdapConfiguration(body);

        // TODO: test validations
    }
    /**
     * Create SAML configuration
     *
     * Creates a new SAML configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSamlConfigurationTest() throws ApiException {
        SamlSettings body = null;
        EmptyResponse response = api.createSamlConfiguration(body);

        // TODO: test validations
    }
    /**
     * Create security deployment
     *
     * Creates a new security deployment configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecurityDeploymentTest() throws ApiException {
        SecurityDeploymentCreateRequest body = null;
        IdResponse response = api.createSecurityDeployment(body);

        // TODO: test validations
    }
    /**
     * Delete Active Directory configuration
     *
     * Deletes a single Active Directory configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteActiveDirectoryConfigurationTest() throws ApiException {
        String realmId = null;
        Integer version = null;
        EmptyResponse response = api.deleteActiveDirectoryConfiguration(realmId, version);

        // TODO: test validations
    }
    /**
     * Delete enrollment token
     *
     * Revokes and deletes the enrollment token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEnrollmentTokenTest() throws ApiException {
        String token = null;
        EmptyResponse response = api.deleteEnrollmentToken(token);

        // TODO: test validations
    }
    /**
     * Delete LDAP configuration
     *
     * Deletes a single LDAP configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLdapConfigurationTest() throws ApiException {
        String realmId = null;
        Integer version = null;
        EmptyResponse response = api.deleteLdapConfiguration(realmId, version);

        // TODO: test validations
    }
    /**
     * Delete SAML configuration
     *
     * Deletes a single SAML configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSamlConfigurationTest() throws ApiException {
        String realmId = null;
        Integer version = null;
        EmptyResponse response = api.deleteSamlConfiguration(realmId, version);

        // TODO: test validations
    }
    /**
     * Disables the security deployment
     *
     * Disables the existing security deployment configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableSecurityDeploymentTest() throws ApiException {
        Integer version = null;
        EmptyResponse response = api.disableSecurityDeployment(version);

        // TODO: test validations
    }
    /**
     * Enables the security deployment
     *
     * Enables the existing security deployment configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableSecurityDeploymentTest() throws ApiException {
        Integer version = null;
        EmptyResponse response = api.enableSecurityDeployment(version);

        // TODO: test validations
    }
    /**
     * Get Active Directory configuration
     *
     * Retrieves a single Active Directory security realm configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActiveDirectoryConfigurationTest() throws ApiException {
        String realmId = null;
        ActiveDirectorySettings response = api.getActiveDirectoryConfiguration(realmId);

        // TODO: test validations
    }
    /**
     * Get enrollment tokens
     *
     * Retrieves a list of active enrollment tokens.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnrollmentTokensTest() throws ApiException {
        ListEnrollmentTokenReply response = api.getEnrollmentTokens();

        // TODO: test validations
    }
    /**
     * Get LDAP configuration
     *
     * Retrieves a single LDAP security realm configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLdapConfigurationTest() throws ApiException {
        String realmId = null;
        LdapSettings response = api.getLdapConfiguration(realmId);

        // TODO: test validations
    }
    /**
     * Get SAML configuration
     *
     * Retrieves a single SAML security realm configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSamlConfigurationTest() throws ApiException {
        String realmId = null;
        SamlSettings response = api.getSamlConfiguration(realmId);

        // TODO: test validations
    }
    /**
     * Get current security deployment
     *
     * Retrieves the current security deployment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityDeploymentTest() throws ApiException {
        SecurityDeployment response = api.getSecurityDeployment();

        // TODO: test validations
    }
    /**
     * List security realm configurations
     *
     * Retrieves a list of security realm configurations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityRealmConfigurationsTest() throws ApiException {
        SecurityRealmInfoList response = api.getSecurityRealmConfigurations();

        // TODO: test validations
    }
    /**
     * Get TLS certificate
     *
     * Retrieves a certificate in the TLS certificate chain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTlsCertificateTest() throws ApiException {
        String serviceName = null;
        TlsPublicCertChain response = api.getTlsCertificate(serviceName);

        // TODO: test validations
    }
    /**
     * Reorder security realms
     *
     * Reorder security realms.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSecurityRealmsTest() throws ApiException {
        SecurityRealmsReorderRequest body = null;
        EmptyResponse response = api.reorderSecurityRealms(body);

        // TODO: test validations
    }
    /**
     * Set TLS certificate
     *
     * Creates or updates the TLS certificate chain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setTlsCertificateTest() throws ApiException {
        String body = null;
        String serviceName = null;
        EmptyResponse response = api.setTlsCertificate(body, serviceName);

        // TODO: test validations
    }
    /**
     * Update Active Directory configuration
     *
     * Updates an existing Active Directory configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateActiveDirectoryConfigurationTest() throws ApiException {
        ActiveDirectorySettings body = null;
        String realmId = null;
        Integer version = null;
        EmptyResponse response = api.updateActiveDirectoryConfiguration(body, realmId, version);

        // TODO: test validations
    }
    /**
     * Update LDAP configuration
     *
     * Updates an existing LDAP configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLdapConfigurationTest() throws ApiException {
        LdapSettings body = null;
        String realmId = null;
        Integer version = null;
        EmptyResponse response = api.updateLdapConfiguration(body, realmId, version);

        // TODO: test validations
    }
    /**
     * Update SAML configuration
     *
     * Updates an existing SAML configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSamlConfigurationTest() throws ApiException {
        SamlSettings body = null;
        String realmId = null;
        Integer version = null;
        EmptyResponse response = api.updateSamlConfiguration(body, realmId, version);

        // TODO: test validations
    }
}
