/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AllocatorInfo;
import io.swagger.client.model.AllocatorOverview;
import io.swagger.client.model.AllocatorSettings;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.Blessing;
import io.swagger.client.model.Blessings;
import io.swagger.client.model.ConfigStoreOption;
import io.swagger.client.model.ConfigStoreOptionData;
import io.swagger.client.model.ConfigStoreOptionList;
import io.swagger.client.model.ConstructorInfo;
import io.swagger.client.model.ConstructorOverview;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.LicenseObject;
import io.swagger.client.model.MetadataItem;
import io.swagger.client.model.MetadataItemValue;
import io.swagger.client.model.MetadataItems;
import io.swagger.client.model.ModelVersionIndexSynchronizationResults;
import io.swagger.client.model.MoveClustersCommandResponse;
import io.swagger.client.model.MoveClustersRequest;
import io.swagger.client.model.ProxiesFilteredGroup;
import io.swagger.client.model.ProxiesFilteredGroupHealth;
import io.swagger.client.model.ProxiesHealth;
import io.swagger.client.model.ProxiesSettings;
import io.swagger.client.model.ProxyInfo;
import io.swagger.client.model.ProxyOverview;
import io.swagger.client.model.Role;
import io.swagger.client.model.RoleAggregate;
import io.swagger.client.model.RoleAggregateCreateData;
import io.swagger.client.model.RoleAggregates;
import io.swagger.client.model.RunnerInfo;
import io.swagger.client.model.RunnerOverview;
import io.swagger.client.model.RunnerRolesInfo;
import io.swagger.client.model.SearchRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlatformInfrastructureApi
 */
@Ignore
public class PlatformInfrastructureApiTest {

    private final PlatformInfrastructureApi api = new PlatformInfrastructureApi();

    /**
     * Add Blessing
     *
     * Add a Blessing for a runner to a role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBlueprinterBlessingTest() throws ApiException {
        Blessing body = null;
        String blueprinterRoleId = null;
        String runnerId = null;
        Integer version = null;
        RoleAggregate response = api.addBlueprinterBlessing(body, blueprinterRoleId, runnerId, version);

        // TODO: test validations
    }
    /**
     * Create a role
     *
     * Create a Blueprinter role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBlueprinterRoleTest() throws ApiException {
        RoleAggregateCreateData body = null;
        RoleAggregate response = api.createBlueprinterRole(body);

        // TODO: test validations
    }
    /**
     * Create Config Store Option
     *
     * Inserts new Config Store Option.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigStoreOptionTest() throws ApiException {
        ConfigStoreOptionData body = null;
        String configOptionId = null;
        ConfigStoreOption response = api.createConfigStoreOption(body, configOptionId);

        // TODO: test validations
    }
    /**
     * Create filtered group of proxies
     *
     * Create the settings for a filtered group of proxies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProxiesFilteredGroupTest() throws ApiException {
        ProxiesFilteredGroup body = null;
        ProxiesFilteredGroup response = api.createProxiesFilteredGroup(body);

        // TODO: test validations
    }
    /**
     * Delete allocator
     *
     * Deletes the allocator.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllocatorTest() throws ApiException {
        String allocatorId = null;
        Boolean removeInstances = null;
        EmptyResponse response = api.deleteAllocator(allocatorId, removeInstances);

        // TODO: test validations
    }
    /**
     * Delete allocator metadata item
     *
     * Removes a single item from the allocator metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllocatorMetadataItemTest() throws ApiException {
        String allocatorId = null;
        String key = null;
        Integer version = null;
        List<MetadataItem> response = api.deleteAllocatorMetadataItem(allocatorId, key, version);

        // TODO: test validations
    }
    /**
     * Delete role
     *
     * Delete a role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBlueprinterRoleTest() throws ApiException {
        String blueprinterRoleId = null;
        Integer version = null;
        EmptyResponse response = api.deleteBlueprinterRole(blueprinterRoleId, version);

        // TODO: test validations
    }
    /**
     * Delete Config Store Option by name
     *
     * Delete Config Store Option by name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigStoreOptionTest() throws ApiException {
        String configOptionId = null;
        EmptyResponse response = api.deleteConfigStoreOption(configOptionId);

        // TODO: test validations
    }
    /**
     * Delete license
     *
     * Deletes the license.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLicenseTest() throws ApiException {
        EmptyResponse response = api.deleteLicense();

        // TODO: test validations
    }
    /**
     * Delete filtered group of proxies
     *
     * Deletes a filtered group of proxies by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProxiesFilteredGroupTest() throws ApiException {
        String proxiesFilteredGroupId = null;
        Integer version = null;
        EmptyResponse response = api.deleteProxiesFilteredGroup(proxiesFilteredGroupId, version);

        // TODO: test validations
    }
    /**
     * Delete runner
     *
     * Delete a runner by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRunnerTest() throws ApiException {
        String runnerId = null;
        EmptyResponse response = api.deleteRunner(runnerId);

        // TODO: test validations
    }
    /**
     * Get allocator
     *
     * Retrieves the allocator by the ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocatorTest() throws ApiException {
        String allocatorId = null;
        AllocatorInfo response = api.getAllocator(allocatorId);

        // TODO: test validations
    }
    /**
     * Get allocator metadata
     *
     * Retrieves the allocator metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocatorMetadataTest() throws ApiException {
        String allocatorId = null;
        List<MetadataItem> response = api.getAllocatorMetadata(allocatorId);

        // TODO: test validations
    }
    /**
     * Get allocator settings
     *
     * Retrieves the allocator override settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocatorSettingsTest() throws ApiException {
        String allocatorId = null;
        AllocatorSettings response = api.getAllocatorSettings(allocatorId);

        // TODO: test validations
    }
    /**
     * Get allocators
     *
     * Retrieves the information for all of the allocators in the platform.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocatorsTest() throws ApiException {
        String q = null;
        Integer size = null;
        Integer from = null;
        String sort = null;
        AllocatorOverview response = api.getAllocators(q, size, from, sort);

        // TODO: test validations
    }
    /**
     * Get role
     *
     * Retrieve a role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlueprinterRoleTest() throws ApiException {
        String blueprinterRoleId = null;
        RoleAggregate response = api.getBlueprinterRole(blueprinterRoleId);

        // TODO: test validations
    }
    /**
     * Find Config Store Option by name
     *
     * Find Config Store Option by name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigStoreOptionTest() throws ApiException {
        String configOptionId = null;
        ConfigStoreOption response = api.getConfigStoreOption(configOptionId);

        // TODO: test validations
    }
    /**
     * Get constructor
     *
     * Retrieves a constructor by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConstructorTest() throws ApiException {
        String constructorId = null;
        ConstructorInfo response = api.getConstructor(constructorId);

        // TODO: test validations
    }
    /**
     * Get constructors
     *
     * Retrieves an overview of all constructors in an ECE installation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConstructorsTest() throws ApiException {
        ConstructorOverview response = api.getConstructors();

        // TODO: test validations
    }
    /**
     * Get license
     *
     * Retrieves the license.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLicenseTest() throws ApiException {
        LicenseObject response = api.getLicense();

        // TODO: test validations
    }
    /**
     * Get proxies
     *
     * Retrieves an overview of all proxies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProxiesTest() throws ApiException {
        ProxyOverview response = api.getProxies();

        // TODO: test validations
    }
    /**
     * Get filtered group of proxies
     *
     * Get data for a filtered group of proxies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProxiesFilteredGroupTest() throws ApiException {
        String proxiesFilteredGroupId = null;
        ProxiesFilteredGroup response = api.getProxiesFilteredGroup(proxiesFilteredGroupId);

        // TODO: test validations
    }
    /**
     * Get health for a filtered group of proxies
     *
     * Get the health status of a filtered group of proxies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProxiesFilteredGroupHealthTest() throws ApiException {
        String proxiesFilteredGroupId = null;
        String expectStatus = null;
        ProxiesFilteredGroupHealth response = api.getProxiesFilteredGroupHealth(proxiesFilteredGroupId, expectStatus);

        // TODO: test validations
    }
    /**
     * Get proxy health
     *
     * Get the health status of all proxies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProxiesHealthTest() throws ApiException {
        String expectStatus = null;
        ProxiesHealth response = api.getProxiesHealth(expectStatus);

        // TODO: test validations
    }
    /**
     * Get proxies settings
     *
     * Retrieves the settings for all proxies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProxiesSettingsTest() throws ApiException {
        ProxiesSettings response = api.getProxiesSettings();

        // TODO: test validations
    }
    /**
     * Get proxy
     *
     * Retrieves a single proxy by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProxyTest() throws ApiException {
        String proxyId = null;
        ProxyInfo response = api.getProxy(proxyId);

        // TODO: test validations
    }
    /**
     * Get runner
     *
     * Retrieves a runner by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRunnerTest() throws ApiException {
        String runnerId = null;
        RunnerInfo response = api.getRunner(runnerId);

        // TODO: test validations
    }
    /**
     * Get runners
     *
     * Retrieves an overview of all runners.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRunnersTest() throws ApiException {
        String q = null;
        RunnerOverview response = api.getRunners(q);

        // TODO: test validations
    }
    /**
     * List roles
     *
     * Retrieve all persisted roles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBlueprinterRolesTest() throws ApiException {
        RoleAggregates response = api.listBlueprinterRoles();

        // TODO: test validations
    }
    /**
     * List Config Store Option
     *
     * List all existing Config Store Option.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigStoreOptionTest() throws ApiException {
        ConfigStoreOptionList response = api.listConfigStoreOption();

        // TODO: test validations
    }
    /**
     * Move clusters
     *
     * Moves the clusters to a different allocator.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveClustersTest() throws ApiException {
        String allocatorId = null;
        MoveClustersRequest body = null;
        Boolean forceUpdate = null;
        Boolean moveOnly = null;
        Boolean allocatorDown = null;
        Boolean validateOnly = null;
        MoveClustersCommandResponse response = api.moveClusters(allocatorId, body, forceUpdate, moveOnly, allocatorDown, validateOnly);

        // TODO: test validations
    }
    /**
     * Move clusters by type
     *
     * Moves the clusters, by type, to a different allocator.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveClustersByTypeTest() throws ApiException {
        String allocatorId = null;
        String clusterType = null;
        MoveClustersRequest body = null;
        Boolean forceUpdate = null;
        Boolean moveOnly = null;
        Boolean allocatorDown = null;
        Boolean validateOnly = null;
        MoveClustersCommandResponse response = api.moveClustersByType(allocatorId, clusterType, body, forceUpdate, moveOnly, allocatorDown, validateOnly);

        // TODO: test validations
    }
    /**
     * Update Config Store Option
     *
     * Update existing Config Store Option.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putConfigStoreOptionTest() throws ApiException {
        ConfigStoreOptionData body = null;
        String configOptionId = null;
        Integer version = null;
        ConfigStoreOption response = api.putConfigStoreOption(body, configOptionId, version);

        // TODO: test validations
    }
    /**
     * Resynchronize allocator
     *
     * Immediately synchronizes the allocator information in the back-end search index and caches.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncAllocatorTest() throws ApiException {
        String allocatorId = null;
        EmptyResponse response = api.resyncAllocator(allocatorId);

        // TODO: test validations
    }
    /**
     * Resynchronize allocators
     *
     * Asynchronously synchronizes all allocator information in the back-end search index.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncAllocatorsTest() throws ApiException {
        Boolean skipMatchingVersion = null;
        ModelVersionIndexSynchronizationResults response = api.resyncAllocators(skipMatchingVersion);

        // TODO: test validations
    }
    /**
     * Resynchronize constructor
     *
     * Immediately resynchronizes the search index and cache for the selected constructor.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncConstructorTest() throws ApiException {
        String constructorId = null;
        EmptyResponse response = api.resyncConstructor(constructorId);

        // TODO: test validations
    }
    /**
     * Resynchronize constructors
     *
     * Asynchronously synchronizes all constructor information in the back-end search index.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncConstructorsTest() throws ApiException {
        Boolean skipMatchingVersion = null;
        ModelVersionIndexSynchronizationResults response = api.resyncConstructors(skipMatchingVersion);

        // TODO: test validations
    }
    /**
     * Resynchronize runner
     *
     * Immediately resynchronizes the search index and cache for the selected runner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncRunnerTest() throws ApiException {
        String runnerId = null;
        EmptyResponse response = api.resyncRunner(runnerId);

        // TODO: test validations
    }
    /**
     * Resynchronize runners
     *
     * Asynchronously synchronizes all runner information in the search index.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resyncRunnersTest() throws ApiException {
        Boolean skipMatchingVersion = null;
        ModelVersionIndexSynchronizationResults response = api.resyncRunners(skipMatchingVersion);

        // TODO: test validations
    }
    /**
     * Search allocators
     *
     * Retrieves the information for all of the allocators in the platform that match the specified query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchAllocatorsTest() throws ApiException {
        SearchRequest body = null;
        AllocatorOverview response = api.searchAllocators(body);

        // TODO: test validations
    }
    /**
     * Search runners
     *
     * Retrieves runners that match a given query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchRunnersTest() throws ApiException {
        SearchRequest body = null;
        RunnerOverview response = api.searchRunners(body);

        // TODO: test validations
    }
    /**
     * Set allocator metadata
     *
     * Sets the allocator metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAllocatorMetadataTest() throws ApiException {
        MetadataItems body = null;
        String allocatorId = null;
        Integer version = null;
        List<MetadataItem> response = api.setAllocatorMetadata(body, allocatorId, version);

        // TODO: test validations
    }
    /**
     * Set allocator metadata item
     *
     * Adds or updates a single item in the allocator metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAllocatorMetadataItemTest() throws ApiException {
        MetadataItemValue body = null;
        String allocatorId = null;
        String key = null;
        Integer version = null;
        List<MetadataItem> response = api.setAllocatorMetadataItem(body, allocatorId, key, version);

        // TODO: test validations
    }
    /**
     * Set allocator settings
     *
     * Overwrites the allocator settings with the specified settings. WARNING: Any unspecified fields are deleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAllocatorSettingsTest() throws ApiException {
        AllocatorSettings body = null;
        String allocatorId = null;
        Integer version = null;
        AllocatorSettings response = api.setAllocatorSettings(body, allocatorId, version);

        // TODO: test validations
    }
    /**
     * Set blessings
     *
     * Set blessings for a role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBlueprinterBlessingsTest() throws ApiException {
        Blessings body = null;
        String blueprinterRoleId = null;
        Integer version = null;
        RoleAggregate response = api.setBlueprinterBlessings(body, blueprinterRoleId, version);

        // TODO: test validations
    }
    /**
     * Add or update license
     *
     * Adds a new or updates an existing license.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setLicenseTest() throws ApiException {
        LicenseObject body = null;
        EmptyResponse response = api.setLicense(body);

        // TODO: test validations
    }
    /**
     * Set proxy settings
     *
     * Overwrites the proxy settings. All unspecified fields are deleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProxiesSettingsTest() throws ApiException {
        ProxiesSettings body = null;
        Integer version = null;
        ProxiesSettings response = api.setProxiesSettings(body, version);

        // TODO: test validations
    }
    /**
     * Set runner roles
     *
     * Set runner roles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setRunnerRolesTest() throws ApiException {
        RunnerRolesInfo body = null;
        String runnerId = null;
        Boolean bless = null;
        RunnerRolesInfo response = api.setRunnerRoles(body, runnerId, bless);

        // TODO: test validations
    }
    /**
     * Start maintenance mode
     *
     * Starts maintenance mode on the allocator.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startAllocatorMaintenanceModeTest() throws ApiException {
        String allocatorId = null;
        EmptyResponse response = api.startAllocatorMaintenanceMode(allocatorId);

        // TODO: test validations
    }
    /**
     * Start maintenance mode
     *
     * Start maintenance mode of a constructor. It will stop constructing new plans while continuing with on-going ones.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startConstructorMaintenanceModeTest() throws ApiException {
        String constructorId = null;
        EmptyResponse response = api.startConstructorMaintenanceMode(constructorId);

        // TODO: test validations
    }
    /**
     * Stop maintenance mode
     *
     * Stops maintenance mode on the allocator.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopAllocatorMaintenanceModeTest() throws ApiException {
        String allocatorId = null;
        EmptyResponse response = api.stopAllocatorMaintenanceMode(allocatorId);

        // TODO: test validations
    }
    /**
     * Stop maintenance mode
     *
     * Stop maintenance mode of a constructor. It will resume the construction of submitted plans.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopConstructorMaintenanceModeTest() throws ApiException {
        String constructorId = null;
        EmptyResponse response = api.stopConstructorMaintenanceMode(constructorId);

        // TODO: test validations
    }
    /**
     * Update allocator settings
     *
     * Applies the settings as a patch. Only the fields that are referenced in the update are altered.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAllocatorSettingsTest() throws ApiException {
        String body = null;
        String allocatorId = null;
        Integer version = null;
        AllocatorSettings response = api.updateAllocatorSettings(body, allocatorId, version);

        // TODO: test validations
    }
    /**
     * Update role
     *
     * Update a role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBlueprinterRoleTest() throws ApiException {
        Role body = null;
        String blueprinterRoleId = null;
        Integer version = null;
        RoleAggregate response = api.updateBlueprinterRole(body, blueprinterRoleId, version);

        // TODO: test validations
    }
    /**
     * Update filtered group of proxies
     *
     * Update the settings for a filtered group of proxies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProxiesFilteredGroupTest() throws ApiException {
        ProxiesFilteredGroup body = null;
        String proxiesFilteredGroupId = null;
        Integer version = null;
        ProxiesFilteredGroup response = api.updateProxiesFilteredGroup(body, proxiesFilteredGroupId, version);

        // TODO: test validations
    }
    /**
     * Update proxy settings
     *
     * Applies the settings as a patch. Only the fields that are referenced in the update are changed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProxiesSettingsTest() throws ApiException {
        String body = null;
        Integer version = null;
        ProxiesSettings response = api.updateProxiesSettings(body, version);

        // TODO: test validations
    }
}
