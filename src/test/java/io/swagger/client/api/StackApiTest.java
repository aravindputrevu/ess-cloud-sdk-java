/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.EmptyResponse;
import java.io.File;
import io.swagger.client.model.InstanceTypeResource;
import io.swagger.client.model.StackVersionArchiveProcessingResult;
import io.swagger.client.model.StackVersionConfig;
import io.swagger.client.model.StackVersionConfigPost;
import io.swagger.client.model.StackVersionConfigs;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StackApi
 */
@Ignore
public class StackApiTest {

    private final StackApi api = new StackApi();

    /**
     * Delete stack version
     *
     * Uses the &#x60;deleted&#x60; flag, which removes only that version of the Elastic Stack from the list of available versions. To restore the version, send an update request. For more information, see the PUT request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVersionStackTest() throws ApiException {
        String version = null;
        EmptyResponse response = api.deleteVersionStack(version);

        // TODO: test validations
    }
    /**
     * Get instance types
     *
     * Retrieves a list of all instance types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceTypesTest() throws ApiException {
        List<InstanceTypeResource> response = api.getInstanceTypes();

        // TODO: test validations
    }
    /**
     * Get stack version
     *
     * Retrieves the Elastic Stack version and template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionStackTest() throws ApiException {
        String version = null;
        StackVersionConfig response = api.getVersionStack(version);

        // TODO: test validations
    }
    /**
     * Get stack versions
     *
     * By default, retrieves only the available Elastic Stack versions. To retrieve all of the Elastic Stack versions, use the &#x60;show_deleted parameter&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionStacksTest() throws ApiException {
        Boolean showDeleted = null;
        Boolean showUnusable = null;
        StackVersionConfigs response = api.getVersionStacks(showDeleted, showUnusable);

        // TODO: test validations
    }
    /**
     * Upload stack pack
     *
     * Creates or updates an Elastic Stack pack and template. The endpoint supports &#x60;multipart/form-data&#x60; requests, as well as &#x60;application/zip&#x60; and &#x60;application/octet-stream&#x60; requests with a binary body. The maximum size of the payload is 1Mb. When the archive contains an Elastic Stack configuration that is available through the API, the configuration and template are overwritten.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStackPacksTest() throws ApiException {
        File file = null;
        StackVersionArchiveProcessingResult response = api.updateStackPacks(file);

        // TODO: test validations
    }
    /**
     * Update stack version
     *
     * Updates the Elastic Stack version configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVersionStackTest() throws ApiException {
        StackVersionConfigPost body = null;
        String version = null;
        StackVersionConfig response = api.updateVersionStack(body, version);

        // TODO: test validations
    }
}
