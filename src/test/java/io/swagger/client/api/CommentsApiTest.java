/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.Comment;
import io.swagger.client.model.CommentCreateRequest;
import io.swagger.client.model.CommentUpdateRequest;
import io.swagger.client.model.CommentsWithMetas;
import io.swagger.client.model.EmptyResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentsApi
 */
@Ignore
public class CommentsApiTest {

    private final CommentsApi api = new CommentsApi();

    /**
     * Create a Comment
     *
     * Creates a comment for the given Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentTest() throws ApiException {
        CommentCreateRequest body = null;
        String resourceType = null;
        String resourceId = null;
        Comment response = api.createComment(body, resourceType, resourceId);

        // TODO: test validations
    }
    /**
     * Delete Comment
     *
     * Deletes a Comment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentTest() throws ApiException {
        String resourceType = null;
        String resourceId = null;
        String commentId = null;
        Integer version = null;
        EmptyResponse response = api.deleteComment(resourceType, resourceId, commentId, version);

        // TODO: test validations
    }
    /**
     * Get Comment
     *
     * Retrieves a Comment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCommentTest() throws ApiException {
        String resourceType = null;
        String resourceId = null;
        String commentId = null;
        Comment response = api.getComment(resourceType, resourceId, commentId);

        // TODO: test validations
    }
    /**
     * List Comments
     *
     * Retrieves all the comments for a given Resource, in reverse modified time order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCommentTest() throws ApiException {
        String resourceType = null;
        String resourceId = null;
        CommentsWithMetas response = api.listComment(resourceType, resourceId);

        // TODO: test validations
    }
    /**
     * Update Comment
     *
     * Updates a Comment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCommentTest() throws ApiException {
        CommentUpdateRequest body = null;
        String resourceType = null;
        String resourceId = null;
        String commentId = null;
        Integer version = null;
        Comment response = api.updateComment(body, resourceType, resourceId, commentId, version);

        // TODO: test validations
    }
}
