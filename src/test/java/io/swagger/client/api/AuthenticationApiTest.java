/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiKeyResponse;
import io.swagger.client.model.ApiKeysResponse;
import io.swagger.client.model.AuthenticationInfo;
import io.swagger.client.model.AvailableAuthenticationMethods;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.CreateApiKeyRequest;
import io.swagger.client.model.DeleteApiKeysRequest;
import io.swagger.client.model.DeleteUsersApiKeysRequest;
import io.swagger.client.model.ElevatePermissionsRequest;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.LoginRequest;
import io.swagger.client.model.ReAuthenticationRequest;
import io.swagger.client.model.ReAuthenticationResponse;
import io.swagger.client.model.TokenResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Ignore
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    /**
     * Create API key
     *
     * Creates a new API key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        CreateApiKeyRequest body = null;
        ApiKeyResponse response = api.createApiKey(body);

        // TODO: test validations
    }
    /**
     * Delete API key
     *
     * Delete or invalidate the API key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApiKeyTest() throws ApiException {
        String apiKeyId = null;
        EmptyResponse response = api.deleteApiKey(apiKeyId);

        // TODO: test validations
    }
    /**
     * Delete API keys
     *
     * Delete or invalidate API keys.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApiKeysTest() throws ApiException {
        DeleteApiKeysRequest body = null;
        EmptyResponse response = api.deleteApiKeys(body);

        // TODO: test validations
    }
    /**
     * Delete an API key for a user
     *
     * Delete or invalidate an API key for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserApiKeyTest() throws ApiException {
        String userId = null;
        String apiKeyId = null;
        EmptyResponse response = api.deleteUserApiKey(userId, apiKeyId);

        // TODO: test validations
    }
    /**
     * Delete API keys for a user
     *
     * Delete or invalidate all of the API keys for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserApiKeysTest() throws ApiException {
        String userId = null;
        EmptyResponse response = api.deleteUserApiKeys(userId);

        // TODO: test validations
    }
    /**
     * Delete API keys of multiple users
     *
     * Delete or invalidate the API keys for multiple users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsersApiKeysTest() throws ApiException {
        DeleteUsersApiKeysRequest body = null;
        EmptyResponse response = api.deleteUsersApiKeys(body);

        // TODO: test validations
    }
    /**
     * Disable elevated permissions
     *
     * Disables elevated permissions for the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableElevatedPermissionsTest() throws ApiException {
        TokenResponse response = api.disableElevatedPermissions();

        // TODO: test validations
    }
    /**
     * Enable elevated permissions
     *
     * Enables the elevated permissions for the current user. Elevated permissions allow the user to complete potentially destructive operations on clusters. Elevated permissions are available for a limited period of time and automatically expire if you do not renew them.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableElevatedPermissionsTest() throws ApiException {
        ElevatePermissionsRequest body = null;
        TokenResponse response = api.enableElevatedPermissions(body);

        // TODO: test validations
    }
    /**
     * Get API key
     *
     * Retrieves the metadata for an API key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiKeyTest() throws ApiException {
        String apiKeyId = null;
        ApiKeyResponse response = api.getApiKey(apiKeyId);

        // TODO: test validations
    }
    /**
     * Get all API keys
     *
     * Retrieves the metadata for all of the API keys that the user generated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiKeysTest() throws ApiException {
        ApiKeysResponse response = api.getApiKeys();

        // TODO: test validations
    }
    /**
     * User authentication information
     *
     * Provides authentication information about a user, including elevated permission status and TOTP device availability.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthenticationInfoTest() throws ApiException {
        AuthenticationInfo response = api.getAuthenticationInfo();

        // TODO: test validations
    }
    /**
     * Get a user API key
     *
     * Retrieves the API key metadata for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserApiKeyTest() throws ApiException {
        String userId = null;
        String apiKeyId = null;
        ApiKeyResponse response = api.getUserApiKey(userId, apiKeyId);

        // TODO: test validations
    }
    /**
     * Get all API keys for a user
     *
     * Retrieves all of the API key metadata for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserApiKeysTest() throws ApiException {
        String userId = null;
        ApiKeysResponse response = api.getUserApiKeys(userId);

        // TODO: test validations
    }
    /**
     * Get all API keys for all users
     *
     * Retrieves the metadata for all of the API keys for all users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersApiKeysTest() throws ApiException {
        ApiKeysResponse response = api.getUsersApiKeys();

        // TODO: test validations
    }
    /**
     * Login to ECE
     *
     * Authenticates against available users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        LoginRequest body = null;
        TokenResponse response = api.login(body);

        // TODO: test validations
    }
    /**
     * Available authentication methods
     *
     * Provides information about available authentication methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void methodsTest() throws ApiException {
        AvailableAuthenticationMethods response = api.methods();

        // TODO: test validations
    }
    /**
     * Re-authenticate to generate a token
     *
     * Re-authenticate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reAuthenticateTest() throws ApiException {
        ReAuthenticationRequest body = null;
        ReAuthenticationResponse response = api.reAuthenticate(body);

        // TODO: test validations
    }
    /**
     * Refresh authentication token
     *
     * Issues a new authentication token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshTokenTest() throws ApiException {
        TokenResponse response = api.refreshToken();

        // TODO: test validations
    }
    /**
     * SAML callback
     *
     * Accepts a callback request from an identity provider and authenticates the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void samlCallbackTest() throws ApiException {
        String saMLResponse = null;
        String relayState = null;
        api.samlCallback(saMLResponse, relayState);

        // TODO: test validations
    }
    /**
     * Initiate SAML protocol
     *
     * Calls the authentication cluster to initiate SAML Single Sign-on (Web Browser SSO profile) protocol and redirects the user to the identity provider for authentication. The authentication cluster must be configured prior to initiation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void samlInitTest() throws ApiException {
        String state = null;
        api.samlInit(state);

        // TODO: test validations
    }
}
