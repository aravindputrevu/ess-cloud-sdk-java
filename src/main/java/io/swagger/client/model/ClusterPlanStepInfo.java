/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ClusterPlanStepLogMessageInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Information about a step in a plan.
 */
@Schema(description = "Information about a step in a plan.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class ClusterPlanStepInfo {
  @SerializedName("step_id")
  private String stepId = null;

  @SerializedName("started")
  private OffsetDateTime started = null;

  @SerializedName("completed")
  private OffsetDateTime completed = null;

  @SerializedName("duration_in_millis")
  private Long durationInMillis = null;

  /**
   * The status of the step (success, warning, error - warning means something didn&#x27;t go as expected but it was not serious enough to abort the plan)
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCESS("success"),
    WARNING("warning"),
    ERROR("error"),
    PENDING("pending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  /**
   * Current stage that the step is in
   */
  @JsonAdapter(StageEnum.Adapter.class)
  public enum StageEnum {
    STARTING("starting"),
    COMPLETED("completed"),
    IN_PROGRESS("in_progress");

    private String value;

    StageEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StageEnum fromValue(String text) {
      for (StageEnum b : StageEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StageEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StageEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("stage")
  private StageEnum stage = null;

  @SerializedName("info_log")
  private List<ClusterPlanStepLogMessageInfo> infoLog = new ArrayList<ClusterPlanStepLogMessageInfo>();

  public ClusterPlanStepInfo stepId(String stepId) {
    this.stepId = stepId;
    return this;
  }

   /**
   * ID of current step
   * @return stepId
  **/
  @Schema(required = true, description = "ID of current step")
  public String getStepId() {
    return stepId;
  }

  public void setStepId(String stepId) {
    this.stepId = stepId;
  }

  public ClusterPlanStepInfo started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

   /**
   * When the step started (ISO format in UTC)
   * @return started
  **/
  @Schema(required = true, description = "When the step started (ISO format in UTC)")
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }

  public ClusterPlanStepInfo completed(OffsetDateTime completed) {
    this.completed = completed;
    return this;
  }

   /**
   * When the step completed (ISO format in UTC)
   * @return completed
  **/
  @Schema(description = "When the step completed (ISO format in UTC)")
  public OffsetDateTime getCompleted() {
    return completed;
  }

  public void setCompleted(OffsetDateTime completed) {
    this.completed = completed;
  }

  public ClusterPlanStepInfo durationInMillis(Long durationInMillis) {
    this.durationInMillis = durationInMillis;
    return this;
  }

   /**
   * The duration of the step in MS
   * @return durationInMillis
  **/
  @Schema(description = "The duration of the step in MS")
  public Long getDurationInMillis() {
    return durationInMillis;
  }

  public void setDurationInMillis(Long durationInMillis) {
    this.durationInMillis = durationInMillis;
  }

  public ClusterPlanStepInfo status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the step (success, warning, error - warning means something didn&#x27;t go as expected but it was not serious enough to abort the plan)
   * @return status
  **/
  @Schema(required = true, description = "The status of the step (success, warning, error - warning means something didn't go as expected but it was not serious enough to abort the plan)")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ClusterPlanStepInfo stage(StageEnum stage) {
    this.stage = stage;
    return this;
  }

   /**
   * Current stage that the step is in
   * @return stage
  **/
  @Schema(required = true, description = "Current stage that the step is in")
  public StageEnum getStage() {
    return stage;
  }

  public void setStage(StageEnum stage) {
    this.stage = stage;
  }

  public ClusterPlanStepInfo infoLog(List<ClusterPlanStepLogMessageInfo> infoLog) {
    this.infoLog = infoLog;
    return this;
  }

  public ClusterPlanStepInfo addInfoLogItem(ClusterPlanStepLogMessageInfo infoLogItem) {
    this.infoLog.add(infoLogItem);
    return this;
  }

   /**
   * Human readable summaries of the step, including messages for each stage of the step
   * @return infoLog
  **/
  @Schema(required = true, description = "Human readable summaries of the step, including messages for each stage of the step")
  public List<ClusterPlanStepLogMessageInfo> getInfoLog() {
    return infoLog;
  }

  public void setInfoLog(List<ClusterPlanStepLogMessageInfo> infoLog) {
    this.infoLog = infoLog;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterPlanStepInfo clusterPlanStepInfo = (ClusterPlanStepInfo) o;
    return Objects.equals(this.stepId, clusterPlanStepInfo.stepId) &&
        Objects.equals(this.started, clusterPlanStepInfo.started) &&
        Objects.equals(this.completed, clusterPlanStepInfo.completed) &&
        Objects.equals(this.durationInMillis, clusterPlanStepInfo.durationInMillis) &&
        Objects.equals(this.status, clusterPlanStepInfo.status) &&
        Objects.equals(this.stage, clusterPlanStepInfo.stage) &&
        Objects.equals(this.infoLog, clusterPlanStepInfo.infoLog);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stepId, started, completed, durationInMillis, status, stage, infoLog);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterPlanStepInfo {\n");
    
    sb.append("    stepId: ").append(toIndentedString(stepId)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    durationInMillis: ").append(toIndentedString(durationInMillis)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    infoLog: ").append(toIndentedString(infoLog)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
