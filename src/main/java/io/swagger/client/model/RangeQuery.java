/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The query that matches documents with fields that contain terms within a specified range.
 */
@Schema(description = "The query that matches documents with fields that contain terms within a specified range.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class RangeQuery {
  @SerializedName("gt")
  private Object gt = null;

  @SerializedName("gte")
  private Object gte = null;

  @SerializedName("lt")
  private Object lt = null;

  @SerializedName("lte")
  private Object lte = null;

  @SerializedName("boost")
  private Float boost = null;

  @SerializedName("format")
  private String format = null;

  @SerializedName("time_zone")
  private String timeZone = null;

  public RangeQuery gt(Object gt) {
    this.gt = gt;
    return this;
  }

   /**
   * Greater-than
   * @return gt
  **/
  @Schema(description = "Greater-than")
  public Object getGt() {
    return gt;
  }

  public void setGt(Object gt) {
    this.gt = gt;
  }

  public RangeQuery gte(Object gte) {
    this.gte = gte;
    return this;
  }

   /**
   * Greater-than or equal to
   * @return gte
  **/
  @Schema(description = "Greater-than or equal to")
  public Object getGte() {
    return gte;
  }

  public void setGte(Object gte) {
    this.gte = gte;
  }

  public RangeQuery lt(Object lt) {
    this.lt = lt;
    return this;
  }

   /**
   * Less-than
   * @return lt
  **/
  @Schema(description = "Less-than")
  public Object getLt() {
    return lt;
  }

  public void setLt(Object lt) {
    this.lt = lt;
  }

  public RangeQuery lte(Object lte) {
    this.lte = lte;
    return this;
  }

   /**
   * Less-than or equal to.
   * @return lte
  **/
  @Schema(description = "Less-than or equal to.")
  public Object getLte() {
    return lte;
  }

  public void setLte(Object lte) {
    this.lte = lte;
  }

  public RangeQuery boost(Float boost) {
    this.boost = boost;
    return this;
  }

   /**
   * An optional boost value to apply to the query.
   * @return boost
  **/
  @Schema(description = "An optional boost value to apply to the query.")
  public Float getBoost() {
    return boost;
  }

  public void setBoost(Float boost) {
    this.boost = boost;
  }

  public RangeQuery format(String format) {
    this.format = format;
    return this;
  }

   /**
   * Formatted dates will be parsed using the format specified on the date field by default, but it can be overridden by passing the format parameter.
   * @return format
  **/
  @Schema(description = "Formatted dates will be parsed using the format specified on the date field by default, but it can be overridden by passing the format parameter.")
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }

  public RangeQuery timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Dates can be converted from another timezone to UTC either by specifying the time zone in the date value itself (if the format accepts it), or it can be specified as the time_zone parameter.
   * @return timeZone
  **/
  @Schema(description = "Dates can be converted from another timezone to UTC either by specifying the time zone in the date value itself (if the format accepts it), or it can be specified as the time_zone parameter.")
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RangeQuery rangeQuery = (RangeQuery) o;
    return Objects.equals(this.gt, rangeQuery.gt) &&
        Objects.equals(this.gte, rangeQuery.gte) &&
        Objects.equals(this.lt, rangeQuery.lt) &&
        Objects.equals(this.lte, rangeQuery.lte) &&
        Objects.equals(this.boost, rangeQuery.boost) &&
        Objects.equals(this.format, rangeQuery.format) &&
        Objects.equals(this.timeZone, rangeQuery.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gt, gte, lt, lte, boost, format, timeZone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RangeQuery {\n");
    
    sb.append("    gt: ").append(toIndentedString(gt)).append("\n");
    sb.append("    gte: ").append(toIndentedString(gte)).append("\n");
    sb.append("    lt: ").append(toIndentedString(lt)).append("\n");
    sb.append("    lte: ").append(toIndentedString(lte)).append("\n");
    sb.append("    boost: ").append(toIndentedString(boost)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
