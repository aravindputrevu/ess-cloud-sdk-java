/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BoolQuery;
import io.swagger.client.model.ExistsQuery;
import io.swagger.client.model.MatchAllQuery;
import io.swagger.client.model.MatchNoneQuery;
import io.swagger.client.model.MatchQuery;
import io.swagger.client.model.NestedQuery;
import io.swagger.client.model.PrefixQuery;
import io.swagger.client.model.QueryStringQuery;
import io.swagger.client.model.RangeQuery;
import io.swagger.client.model.TermQuery;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * The container for all of the allowed Elasticsearch queries. Specify only one property each time.
 */
@Schema(description = "The container for all of the allowed Elasticsearch queries. Specify only one property each time.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class QueryContainer {
  @SerializedName("match")
  private Map<String, MatchQuery> match = null;

  @SerializedName("match_all")
  private MatchAllQuery matchAll = null;

  @SerializedName("match_none")
  private MatchNoneQuery matchNone = null;

  @SerializedName("term")
  private Map<String, TermQuery> term = null;

  @SerializedName("bool")
  private BoolQuery bool = null;

  @SerializedName("query_string")
  private QueryStringQuery queryString = null;

  @SerializedName("nested")
  private NestedQuery nested = null;

  @SerializedName("prefix")
  private Map<String, PrefixQuery> prefix = null;

  @SerializedName("exists")
  private ExistsQuery exists = null;

  @SerializedName("range")
  private Map<String, RangeQuery> range = null;

  public QueryContainer match(Map<String, MatchQuery> match) {
    this.match = match;
    return this;
  }

  public QueryContainer putMatchItem(String key, MatchQuery matchItem) {
    if (this.match == null) {
      this.match = new HashMap<String, MatchQuery>();
    }
    this.match.put(key, matchItem);
    return this;
  }

   /**
   * Get match
   * @return match
  **/
  @Schema(description = "")
  public Map<String, MatchQuery> getMatch() {
    return match;
  }

  public void setMatch(Map<String, MatchQuery> match) {
    this.match = match;
  }

  public QueryContainer matchAll(MatchAllQuery matchAll) {
    this.matchAll = matchAll;
    return this;
  }

   /**
   * Get matchAll
   * @return matchAll
  **/
  @Schema(description = "")
  public MatchAllQuery getMatchAll() {
    return matchAll;
  }

  public void setMatchAll(MatchAllQuery matchAll) {
    this.matchAll = matchAll;
  }

  public QueryContainer matchNone(MatchNoneQuery matchNone) {
    this.matchNone = matchNone;
    return this;
  }

   /**
   * Get matchNone
   * @return matchNone
  **/
  @Schema(description = "")
  public MatchNoneQuery getMatchNone() {
    return matchNone;
  }

  public void setMatchNone(MatchNoneQuery matchNone) {
    this.matchNone = matchNone;
  }

  public QueryContainer term(Map<String, TermQuery> term) {
    this.term = term;
    return this;
  }

  public QueryContainer putTermItem(String key, TermQuery termItem) {
    if (this.term == null) {
      this.term = new HashMap<String, TermQuery>();
    }
    this.term.put(key, termItem);
    return this;
  }

   /**
   * Get term
   * @return term
  **/
  @Schema(description = "")
  public Map<String, TermQuery> getTerm() {
    return term;
  }

  public void setTerm(Map<String, TermQuery> term) {
    this.term = term;
  }

  public QueryContainer bool(BoolQuery bool) {
    this.bool = bool;
    return this;
  }

   /**
   * Get bool
   * @return bool
  **/
  @Schema(description = "")
  public BoolQuery getBool() {
    return bool;
  }

  public void setBool(BoolQuery bool) {
    this.bool = bool;
  }

  public QueryContainer queryString(QueryStringQuery queryString) {
    this.queryString = queryString;
    return this;
  }

   /**
   * Get queryString
   * @return queryString
  **/
  @Schema(description = "")
  public QueryStringQuery getQueryString() {
    return queryString;
  }

  public void setQueryString(QueryStringQuery queryString) {
    this.queryString = queryString;
  }

  public QueryContainer nested(NestedQuery nested) {
    this.nested = nested;
    return this;
  }

   /**
   * Get nested
   * @return nested
  **/
  @Schema(description = "")
  public NestedQuery getNested() {
    return nested;
  }

  public void setNested(NestedQuery nested) {
    this.nested = nested;
  }

  public QueryContainer prefix(Map<String, PrefixQuery> prefix) {
    this.prefix = prefix;
    return this;
  }

  public QueryContainer putPrefixItem(String key, PrefixQuery prefixItem) {
    if (this.prefix == null) {
      this.prefix = new HashMap<String, PrefixQuery>();
    }
    this.prefix.put(key, prefixItem);
    return this;
  }

   /**
   * Get prefix
   * @return prefix
  **/
  @Schema(description = "")
  public Map<String, PrefixQuery> getPrefix() {
    return prefix;
  }

  public void setPrefix(Map<String, PrefixQuery> prefix) {
    this.prefix = prefix;
  }

  public QueryContainer exists(ExistsQuery exists) {
    this.exists = exists;
    return this;
  }

   /**
   * Get exists
   * @return exists
  **/
  @Schema(description = "")
  public ExistsQuery getExists() {
    return exists;
  }

  public void setExists(ExistsQuery exists) {
    this.exists = exists;
  }

  public QueryContainer range(Map<String, RangeQuery> range) {
    this.range = range;
    return this;
  }

  public QueryContainer putRangeItem(String key, RangeQuery rangeItem) {
    if (this.range == null) {
      this.range = new HashMap<String, RangeQuery>();
    }
    this.range.put(key, rangeItem);
    return this;
  }

   /**
   * Get range
   * @return range
  **/
  @Schema(description = "")
  public Map<String, RangeQuery> getRange() {
    return range;
  }

  public void setRange(Map<String, RangeQuery> range) {
    this.range = range;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryContainer queryContainer = (QueryContainer) o;
    return Objects.equals(this.match, queryContainer.match) &&
        Objects.equals(this.matchAll, queryContainer.matchAll) &&
        Objects.equals(this.matchNone, queryContainer.matchNone) &&
        Objects.equals(this.term, queryContainer.term) &&
        Objects.equals(this.bool, queryContainer.bool) &&
        Objects.equals(this.queryString, queryContainer.queryString) &&
        Objects.equals(this.nested, queryContainer.nested) &&
        Objects.equals(this.prefix, queryContainer.prefix) &&
        Objects.equals(this.exists, queryContainer.exists) &&
        Objects.equals(this.range, queryContainer.range);
  }

  @Override
  public int hashCode() {
    return Objects.hash(match, matchAll, matchNone, term, bool, queryString, nested, prefix, exists, range);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryContainer {\n");
    
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    matchAll: ").append(toIndentedString(matchAll)).append("\n");
    sb.append("    matchNone: ").append(toIndentedString(matchNone)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    bool: ").append(toIndentedString(bool)).append("\n");
    sb.append("    queryString: ").append(toIndentedString(queryString)).append("\n");
    sb.append("    nested: ").append(toIndentedString(nested)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
