/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CompatibleVersionResource;
import io.swagger.client.model.NodeTypeResource;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * InstanceTypeResource
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class InstanceTypeResource {
  @SerializedName("instance_type")
  private String instanceType = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("node_types")
  private List<NodeTypeResource> nodeTypes = new ArrayList<NodeTypeResource>();

  @SerializedName("compatibility")
  private List<CompatibleVersionResource> compatibility = new ArrayList<CompatibleVersionResource>();

  @SerializedName("default_instance_configuration_id")
  private String defaultInstanceConfigurationId = null;

  public InstanceTypeResource instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

   /**
   * Instance type, the key for this resource
   * @return instanceType
  **/
  @Schema(required = true, description = "Instance type, the key for this resource")
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }

  public InstanceTypeResource name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Instance type name
   * @return name
  **/
  @Schema(required = true, description = "Instance type name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InstanceTypeResource description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Instance type description
   * @return description
  **/
  @Schema(required = true, description = "Instance type description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public InstanceTypeResource nodeTypes(List<NodeTypeResource> nodeTypes) {
    this.nodeTypes = nodeTypes;
    return this;
  }

  public InstanceTypeResource addNodeTypesItem(NodeTypeResource nodeTypesItem) {
    this.nodeTypes.add(nodeTypesItem);
    return this;
  }

   /**
   * Supported node types
   * @return nodeTypes
  **/
  @Schema(required = true, description = "Supported node types")
  public List<NodeTypeResource> getNodeTypes() {
    return nodeTypes;
  }

  public void setNodeTypes(List<NodeTypeResource> nodeTypes) {
    this.nodeTypes = nodeTypes;
  }

  public InstanceTypeResource compatibility(List<CompatibleVersionResource> compatibility) {
    this.compatibility = compatibility;
    return this;
  }

  public InstanceTypeResource addCompatibilityItem(CompatibleVersionResource compatibilityItem) {
    this.compatibility.add(compatibilityItem);
    return this;
  }

   /**
   * Compatible versions
   * @return compatibility
  **/
  @Schema(required = true, description = "Compatible versions")
  public List<CompatibleVersionResource> getCompatibility() {
    return compatibility;
  }

  public void setCompatibility(List<CompatibleVersionResource> compatibility) {
    this.compatibility = compatibility;
  }

  public InstanceTypeResource defaultInstanceConfigurationId(String defaultInstanceConfigurationId) {
    this.defaultInstanceConfigurationId = defaultInstanceConfigurationId;
    return this;
  }

   /**
   * Id of the default instance configuration to use for this instance type.
   * @return defaultInstanceConfigurationId
  **/
  @Schema(description = "Id of the default instance configuration to use for this instance type.")
  public String getDefaultInstanceConfigurationId() {
    return defaultInstanceConfigurationId;
  }

  public void setDefaultInstanceConfigurationId(String defaultInstanceConfigurationId) {
    this.defaultInstanceConfigurationId = defaultInstanceConfigurationId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceTypeResource instanceTypeResource = (InstanceTypeResource) o;
    return Objects.equals(this.instanceType, instanceTypeResource.instanceType) &&
        Objects.equals(this.name, instanceTypeResource.name) &&
        Objects.equals(this.description, instanceTypeResource.description) &&
        Objects.equals(this.nodeTypes, instanceTypeResource.nodeTypes) &&
        Objects.equals(this.compatibility, instanceTypeResource.compatibility) &&
        Objects.equals(this.defaultInstanceConfigurationId, instanceTypeResource.defaultInstanceConfigurationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceType, name, description, nodeTypes, compatibility, defaultInstanceConfigurationId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceTypeResource {\n");
    
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    nodeTypes: ").append(toIndentedString(nodeTypes)).append("\n");
    sb.append("    compatibility: ").append(toIndentedString(compatibility)).append("\n");
    sb.append("    defaultInstanceConfigurationId: ").append(toIndentedString(defaultInstanceConfigurationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
