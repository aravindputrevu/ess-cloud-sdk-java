/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.QueryContainer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * An Elasticsearch search request with a subset of options.
 */
@Schema(description = "An Elasticsearch search request with a subset of options.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class SearchRequest {
  @SerializedName("from")
  private Integer from = null;

  @SerializedName("size")
  private Integer size = null;

  @SerializedName("query")
  private QueryContainer query = null;

  @SerializedName("sort")
  private List<Object> sort = null;

  public SearchRequest from(Integer from) {
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @Schema(description = "")
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }

  public SearchRequest size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * The maximum number of search results to return.
   * @return size
  **/
  @Schema(description = "The maximum number of search results to return.")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public SearchRequest query(QueryContainer query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @Schema(description = "")
  public QueryContainer getQuery() {
    return query;
  }

  public void setQuery(QueryContainer query) {
    this.query = query;
  }

  public SearchRequest sort(List<Object> sort) {
    this.sort = sort;
    return this;
  }

  public SearchRequest addSortItem(Object sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<Object>();
    }
    this.sort.add(sortItem);
    return this;
  }

   /**
   * An array of fields to sort the search results by.
   * @return sort
  **/
  @Schema(description = "An array of fields to sort the search results by.")
  public List<Object> getSort() {
    return sort;
  }

  public void setSort(List<Object> sort) {
    this.sort = sort;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchRequest searchRequest = (SearchRequest) o;
    return Objects.equals(this.from, searchRequest.from) &&
        Objects.equals(this.size, searchRequest.size) &&
        Objects.equals(this.query, searchRequest.query) &&
        Objects.equals(this.sort, searchRequest.sort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, size, query, sort);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchRequest {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
