/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The docker image that is used to run a service.
 */
@Schema(description = "The docker image that is used to run a service.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class PlatformServiceImageInfo {
  @SerializedName("id")
  private String id = null;

  @SerializedName("tag")
  private String tag = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("hash")
  private String hash = null;

  public PlatformServiceImageInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Id of runner that hosts the container
   * @return id
  **/
  @Schema(example = "docker.elastic.co/elastic-cloud-enterprise:1.0.0-GA", description = "Id of runner that hosts the container")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PlatformServiceImageInfo tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Image tag
   * @return tag
  **/
  @Schema(example = "docker.elastic.co/elastic-cloud-enterprise:1.0.0-GA", description = "Image tag")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public PlatformServiceImageInfo version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Version of service
   * @return version
  **/
  @Schema(example = "1.0.0-GA", description = "Version of service")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public PlatformServiceImageInfo hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Image hash code
   * @return hash
  **/
  @Schema(example = "sha256:04a5be1ab07de64269ffa52da26044e0ecc36fa1164e7914468e69d65a2090d4", description = "Image hash code")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlatformServiceImageInfo platformServiceImageInfo = (PlatformServiceImageInfo) o;
    return Objects.equals(this.id, platformServiceImageInfo.id) &&
        Objects.equals(this.tag, platformServiceImageInfo.tag) &&
        Objects.equals(this.version, platformServiceImageInfo.version) &&
        Objects.equals(this.hash, platformServiceImageInfo.hash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, tag, version, hash);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlatformServiceImageInfo {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
