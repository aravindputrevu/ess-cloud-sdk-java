/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Controls the combinations of Elasticsearch node types. TIP: By default, the Elasticsearch node is master eligible, can hold data, and run ingest pipelines. WARNING: Do not set for tiebreaker topologies.
 */
@Schema(description = "Controls the combinations of Elasticsearch node types. TIP: By default, the Elasticsearch node is master eligible, can hold data, and run ingest pipelines. WARNING: Do not set for tiebreaker topologies.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class ElasticsearchNodeType {
  @SerializedName("master")
  private Boolean master = null;

  @SerializedName("data")
  private Boolean data = null;

  @SerializedName("ingest")
  private Boolean ingest = null;

  @SerializedName("ml")
  private Boolean ml = null;

  public ElasticsearchNodeType master(Boolean master) {
    this.master = master;
    return this;
  }

   /**
   * Defines whether this node can be elected master (default: true)
   * @return master
  **/
  @Schema(description = "Defines whether this node can be elected master (default: true)")
  public Boolean isMaster() {
    return master;
  }

  public void setMaster(Boolean master) {
    this.master = master;
  }

  public ElasticsearchNodeType data(Boolean data) {
    this.data = data;
    return this;
  }

   /**
   * Defines whether this node can hold data (default: true)
   * @return data
  **/
  @Schema(description = "Defines whether this node can hold data (default: true)")
  public Boolean isData() {
    return data;
  }

  public void setData(Boolean data) {
    this.data = data;
  }

  public ElasticsearchNodeType ingest(Boolean ingest) {
    this.ingest = ingest;
    return this;
  }

   /**
   * Defines whether this node can run an ingest pipeline (default: true)
   * @return ingest
  **/
  @Schema(description = "Defines whether this node can run an ingest pipeline (default: true)")
  public Boolean isIngest() {
    return ingest;
  }

  public void setIngest(Boolean ingest) {
    this.ingest = ingest;
  }

  public ElasticsearchNodeType ml(Boolean ml) {
    this.ml = ml;
    return this;
  }

   /**
   * Defines whether this node can run ml jobs, valid only for versions 5.4.0 or greater (default: false)
   * @return ml
  **/
  @Schema(description = "Defines whether this node can run ml jobs, valid only for versions 5.4.0 or greater (default: false)")
  public Boolean isMl() {
    return ml;
  }

  public void setMl(Boolean ml) {
    this.ml = ml;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticsearchNodeType elasticsearchNodeType = (ElasticsearchNodeType) o;
    return Objects.equals(this.master, elasticsearchNodeType.master) &&
        Objects.equals(this.data, elasticsearchNodeType.data) &&
        Objects.equals(this.ingest, elasticsearchNodeType.ingest) &&
        Objects.equals(this.ml, elasticsearchNodeType.ml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(master, data, ingest, ml);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticsearchNodeType {\n");
    
    sb.append("    master: ").append(toIndentedString(master)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    ingest: ").append(toIndentedString(ingest)).append("\n");
    sb.append("    ml: ").append(toIndentedString(ml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
