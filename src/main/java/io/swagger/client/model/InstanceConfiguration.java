/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DiscreteSizes;
import io.swagger.client.model.QueryContainer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * The configuration template for Elasticsearch instances, Kibana instances, and APM Servers.
 */
@Schema(description = "The configuration template for Elasticsearch instances, Kibana instances, and APM Servers.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class InstanceConfiguration {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("instance_type")
  private String instanceType = null;

  @SerializedName("node_types")
  private List<String> nodeTypes = null;

  @SerializedName("discrete_sizes")
  private DiscreteSizes discreteSizes = null;

  @SerializedName("allocator_filter")
  private QueryContainer allocatorFilter = null;

  @SerializedName("storage_multiplier")
  private Double storageMultiplier = null;

  @SerializedName("deleted_on")
  private OffsetDateTime deletedOn = null;

  @SerializedName("system_owned")
  private Boolean systemOwned = null;

  @SerializedName("metadata")
  private Object metadata = null;

  public InstanceConfiguration id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique identifier for the instance configuration
   * @return id
  **/
  @Schema(description = "Unique identifier for the instance configuration")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public InstanceConfiguration name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Display name for the instance configuration.
   * @return name
  **/
  @Schema(required = true, description = "Display name for the instance configuration.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InstanceConfiguration description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Optional description for the instance configuration
   * @return description
  **/
  @Schema(description = "Optional description for the instance configuration")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public InstanceConfiguration instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

   /**
   * The type of instance (elasticsearch, kibana)
   * @return instanceType
  **/
  @Schema(required = true, description = "The type of instance (elasticsearch, kibana)")
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }

  public InstanceConfiguration nodeTypes(List<String> nodeTypes) {
    this.nodeTypes = nodeTypes;
    return this;
  }

  public InstanceConfiguration addNodeTypesItem(String nodeTypesItem) {
    if (this.nodeTypes == null) {
      this.nodeTypes = new ArrayList<String>();
    }
    this.nodeTypes.add(nodeTypesItem);
    return this;
  }

   /**
   * Node types (master, data) for the instance
   * @return nodeTypes
  **/
  @Schema(description = "Node types (master, data) for the instance")
  public List<String> getNodeTypes() {
    return nodeTypes;
  }

  public void setNodeTypes(List<String> nodeTypes) {
    this.nodeTypes = nodeTypes;
  }

  public InstanceConfiguration discreteSizes(DiscreteSizes discreteSizes) {
    this.discreteSizes = discreteSizes;
    return this;
  }

   /**
   * Get discreteSizes
   * @return discreteSizes
  **/
  @Schema(required = true, description = "")
  public DiscreteSizes getDiscreteSizes() {
    return discreteSizes;
  }

  public void setDiscreteSizes(DiscreteSizes discreteSizes) {
    this.discreteSizes = discreteSizes;
  }

  public InstanceConfiguration allocatorFilter(QueryContainer allocatorFilter) {
    this.allocatorFilter = allocatorFilter;
    return this;
  }

   /**
   * Get allocatorFilter
   * @return allocatorFilter
  **/
  @Schema(description = "")
  public QueryContainer getAllocatorFilter() {
    return allocatorFilter;
  }

  public void setAllocatorFilter(QueryContainer allocatorFilter) {
    this.allocatorFilter = allocatorFilter;
  }

  public InstanceConfiguration storageMultiplier(Double storageMultiplier) {
    this.storageMultiplier = storageMultiplier;
    return this;
  }

   /**
   * Settings for the instance storage multiplier
   * @return storageMultiplier
  **/
  @Schema(description = "Settings for the instance storage multiplier")
  public Double getStorageMultiplier() {
    return storageMultiplier;
  }

  public void setStorageMultiplier(Double storageMultiplier) {
    this.storageMultiplier = storageMultiplier;
  }

  public InstanceConfiguration deletedOn(OffsetDateTime deletedOn) {
    this.deletedOn = deletedOn;
    return this;
  }

   /**
   * Date/time that this instance configuration was marked for deletion
   * @return deletedOn
  **/
  @Schema(description = "Date/time that this instance configuration was marked for deletion")
  public OffsetDateTime getDeletedOn() {
    return deletedOn;
  }

  public void setDeletedOn(OffsetDateTime deletedOn) {
    this.deletedOn = deletedOn;
  }

  public InstanceConfiguration systemOwned(Boolean systemOwned) {
    this.systemOwned = systemOwned;
    return this;
  }

   /**
   * Indicates if a instance configuration is system owned (restricts the set of operations that can be performed on it)
   * @return systemOwned
  **/
  @Schema(description = "Indicates if a instance configuration is system owned (restricts the set of operations that can be performed on it)")
  public Boolean isSystemOwned() {
    return systemOwned;
  }

  public void setSystemOwned(Boolean systemOwned) {
    this.systemOwned = systemOwned;
  }

  public InstanceConfiguration metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Optional arbitrary metadata to associate with this template.
   * @return metadata
  **/
  @Schema(description = "Optional arbitrary metadata to associate with this template.")
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceConfiguration instanceConfiguration = (InstanceConfiguration) o;
    return Objects.equals(this.id, instanceConfiguration.id) &&
        Objects.equals(this.name, instanceConfiguration.name) &&
        Objects.equals(this.description, instanceConfiguration.description) &&
        Objects.equals(this.instanceType, instanceConfiguration.instanceType) &&
        Objects.equals(this.nodeTypes, instanceConfiguration.nodeTypes) &&
        Objects.equals(this.discreteSizes, instanceConfiguration.discreteSizes) &&
        Objects.equals(this.allocatorFilter, instanceConfiguration.allocatorFilter) &&
        Objects.equals(this.storageMultiplier, instanceConfiguration.storageMultiplier) &&
        Objects.equals(this.deletedOn, instanceConfiguration.deletedOn) &&
        Objects.equals(this.systemOwned, instanceConfiguration.systemOwned) &&
        Objects.equals(this.metadata, instanceConfiguration.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, instanceType, nodeTypes, discreteSizes, allocatorFilter, storageMultiplier, deletedOn, systemOwned, metadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceConfiguration {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    nodeTypes: ").append(toIndentedString(nodeTypes)).append("\n");
    sb.append("    discreteSizes: ").append(toIndentedString(discreteSizes)).append("\n");
    sb.append("    allocatorFilter: ").append(toIndentedString(allocatorFilter)).append("\n");
    sb.append("    storageMultiplier: ").append(toIndentedString(storageMultiplier)).append("\n");
    sb.append("    deletedOn: ").append(toIndentedString(deletedOn)).append("\n");
    sb.append("    systemOwned: ").append(toIndentedString(systemOwned)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
