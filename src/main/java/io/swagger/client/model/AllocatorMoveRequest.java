/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * As part of the upgrade plan, identifies the move requests for the Kibana instances or APM Servers on the allocators.
 */
@Schema(description = "As part of the upgrade plan, identifies the move requests for the Kibana instances or APM Servers on the allocators.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class AllocatorMoveRequest {
  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private List<String> to = null;

  @SerializedName("allocator_down")
  private Boolean allocatorDown = null;

  public AllocatorMoveRequest from(String from) {
    this.from = from;
    return this;
  }

   /**
   * The allocator id off which all instances in the cluster should be moved
   * @return from
  **/
  @Schema(required = true, description = "The allocator id off which all instances in the cluster should be moved")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public AllocatorMoveRequest to(List<String> to) {
    this.to = to;
    return this;
  }

  public AllocatorMoveRequest addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<String>();
    }
    this.to.add(toItem);
    return this;
  }

   /**
   * An optional list of allocator ids to which the instance(s) should be moved. If not specified then any available allocator can be used (including the current one if it is healthy)
   * @return to
  **/
  @Schema(description = "An optional list of allocator ids to which the instance(s) should be moved. If not specified then any available allocator can be used (including the current one if it is healthy)")
  public List<String> getTo() {
    return to;
  }

  public void setTo(List<String> to) {
    this.to = to;
  }

  public AllocatorMoveRequest allocatorDown(Boolean allocatorDown) {
    this.allocatorDown = allocatorDown;
    return this;
  }

   /**
   * Tells the infrastructure that all instances on the allocator should be considered as permanently down when deciding how to migrate data to new nodes. If left blank then the system will auto-decide (currently: will treat the allocator as up)
   * @return allocatorDown
  **/
  @Schema(description = "Tells the infrastructure that all instances on the allocator should be considered as permanently down when deciding how to migrate data to new nodes. If left blank then the system will auto-decide (currently: will treat the allocator as up)")
  public Boolean isAllocatorDown() {
    return allocatorDown;
  }

  public void setAllocatorDown(Boolean allocatorDown) {
    this.allocatorDown = allocatorDown;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllocatorMoveRequest allocatorMoveRequest = (AllocatorMoveRequest) o;
    return Objects.equals(this.from, allocatorMoveRequest.from) &&
        Objects.equals(this.to, allocatorMoveRequest.to) &&
        Objects.equals(this.allocatorDown, allocatorMoveRequest.allocatorDown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, allocatorDown);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllocatorMoveRequest {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    allocatorDown: ").append(toIndentedString(allocatorDown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
