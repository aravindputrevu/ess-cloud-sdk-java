/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.FilterAssociation;
import io.swagger.client.model.IpFilterRule;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * The container for a set of IP filter rules.
 */
@Schema(description = "The container for a set of IP filter rules.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class IpFilterRuleset {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("rules")
  private List<IpFilterRule> rules = new ArrayList<IpFilterRule>();

  @SerializedName("associations")
  private List<FilterAssociation> associations = null;

  @SerializedName("total_associations")
  private Integer totalAssociations = null;

  public IpFilterRuleset id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ruleset ID
   * @return id
  **/
  @Schema(description = "The ruleset ID")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public IpFilterRuleset name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the ruleset
   * @return name
  **/
  @Schema(required = true, description = "Name of the ruleset")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public IpFilterRuleset description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the ruleset
   * @return description
  **/
  @Schema(description = "Description of the ruleset")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public IpFilterRuleset rules(List<IpFilterRule> rules) {
    this.rules = rules;
    return this;
  }

  public IpFilterRuleset addRulesItem(IpFilterRule rulesItem) {
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * List of rules
   * @return rules
  **/
  @Schema(required = true, description = "List of rules")
  public List<IpFilterRule> getRules() {
    return rules;
  }

  public void setRules(List<IpFilterRule> rules) {
    this.rules = rules;
  }

  public IpFilterRuleset associations(List<FilterAssociation> associations) {
    this.associations = associations;
    return this;
  }

  public IpFilterRuleset addAssociationsItem(FilterAssociation associationsItem) {
    if (this.associations == null) {
      this.associations = new ArrayList<FilterAssociation>();
    }
    this.associations.add(associationsItem);
    return this;
  }

   /**
   * List of associations. Returned only when include_associations query parameter is true
   * @return associations
  **/
  @Schema(description = "List of associations. Returned only when include_associations query parameter is true")
  public List<FilterAssociation> getAssociations() {
    return associations;
  }

  public void setAssociations(List<FilterAssociation> associations) {
    this.associations = associations;
  }

  public IpFilterRuleset totalAssociations(Integer totalAssociations) {
    this.totalAssociations = totalAssociations;
    return this;
  }

   /**
   * Total number of associations. This includes associations user doesn&#x27;t have permission to view.Returned only when include_associations query parameter is true
   * @return totalAssociations
  **/
  @Schema(description = "Total number of associations. This includes associations user doesn't have permission to view.Returned only when include_associations query parameter is true")
  public Integer getTotalAssociations() {
    return totalAssociations;
  }

  public void setTotalAssociations(Integer totalAssociations) {
    this.totalAssociations = totalAssociations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpFilterRuleset ipFilterRuleset = (IpFilterRuleset) o;
    return Objects.equals(this.id, ipFilterRuleset.id) &&
        Objects.equals(this.name, ipFilterRuleset.name) &&
        Objects.equals(this.description, ipFilterRuleset.description) &&
        Objects.equals(this.rules, ipFilterRuleset.rules) &&
        Objects.equals(this.associations, ipFilterRuleset.associations) &&
        Objects.equals(this.totalAssociations, ipFilterRuleset.totalAssociations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, rules, associations, totalAssociations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpFilterRuleset {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    totalAssociations: ").append(toIndentedString(totalAssociations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
