/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Information about the snapshot status for the Elasticsearch cluster. For example, the health status.
 */
@Schema(description = "Information about the snapshot status for the Elasticsearch cluster. For example, the health status.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class SnapshotStatusInfo {
  @SerializedName("healthy")
  private Boolean healthy = null;

  @SerializedName("count")
  private Integer count = null;

  @SerializedName("latest_successful")
  private Boolean latestSuccessful = null;

  @SerializedName("latest_status")
  private String latestStatus = null;

  @SerializedName("scheduled_time")
  private OffsetDateTime scheduledTime = null;

  @SerializedName("latest_end_time")
  private OffsetDateTime latestEndTime = null;

  @SerializedName("latest_successful_end_time")
  private OffsetDateTime latestSuccessfulEndTime = null;

  @SerializedName("recent_success")
  private Boolean recentSuccess = null;

  public SnapshotStatusInfo healthy(Boolean healthy) {
    this.healthy = healthy;
    return this;
  }

   /**
   * Health status of snapshots for this cluster
   * @return healthy
  **/
  @Schema(required = true, description = "Health status of snapshots for this cluster")
  public Boolean isHealthy() {
    return healthy;
  }

  public void setHealthy(Boolean healthy) {
    this.healthy = healthy;
  }

  public SnapshotStatusInfo count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Number of snapshots stored for this cluster
   * @return count
  **/
  @Schema(required = true, description = "Number of snapshots stored for this cluster")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public SnapshotStatusInfo latestSuccessful(Boolean latestSuccessful) {
    this.latestSuccessful = latestSuccessful;
    return this;
  }

   /**
   * Latest snapshot status
   * @return latestSuccessful
  **/
  @Schema(description = "Latest snapshot status")
  public Boolean isLatestSuccessful() {
    return latestSuccessful;
  }

  public void setLatestSuccessful(Boolean latestSuccessful) {
    this.latestSuccessful = latestSuccessful;
  }

  public SnapshotStatusInfo latestStatus(String latestStatus) {
    this.latestStatus = latestStatus;
    return this;
  }

   /**
   * Status of the latest snapshot attempt, if any exist.
   * @return latestStatus
  **/
  @Schema(description = "Status of the latest snapshot attempt, if any exist.")
  public String getLatestStatus() {
    return latestStatus;
  }

  public void setLatestStatus(String latestStatus) {
    this.latestStatus = latestStatus;
  }

  public SnapshotStatusInfo scheduledTime(OffsetDateTime scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

   /**
   * Scheduled time of next snapshot attempt
   * @return scheduledTime
  **/
  @Schema(description = "Scheduled time of next snapshot attempt")
  public OffsetDateTime getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(OffsetDateTime scheduledTime) {
    this.scheduledTime = scheduledTime;
  }

  public SnapshotStatusInfo latestEndTime(OffsetDateTime latestEndTime) {
    this.latestEndTime = latestEndTime;
    return this;
  }

   /**
   * The end time of the most recently attempted snapshot
   * @return latestEndTime
  **/
  @Schema(description = "The end time of the most recently attempted snapshot")
  public OffsetDateTime getLatestEndTime() {
    return latestEndTime;
  }

  public void setLatestEndTime(OffsetDateTime latestEndTime) {
    this.latestEndTime = latestEndTime;
  }

  public SnapshotStatusInfo latestSuccessfulEndTime(OffsetDateTime latestSuccessfulEndTime) {
    this.latestSuccessfulEndTime = latestSuccessfulEndTime;
    return this;
  }

   /**
   * The end time of the most recently successful snapshot
   * @return latestSuccessfulEndTime
  **/
  @Schema(description = "The end time of the most recently successful snapshot")
  public OffsetDateTime getLatestSuccessfulEndTime() {
    return latestSuccessfulEndTime;
  }

  public void setLatestSuccessfulEndTime(OffsetDateTime latestSuccessfulEndTime) {
    this.latestSuccessfulEndTime = latestSuccessfulEndTime;
  }

  public SnapshotStatusInfo recentSuccess(Boolean recentSuccess) {
    this.recentSuccess = recentSuccess;
    return this;
  }

   /**
   * Indicates whether the cluster has a relatively recent successful snapshot.
   * @return recentSuccess
  **/
  @Schema(description = "Indicates whether the cluster has a relatively recent successful snapshot.")
  public Boolean isRecentSuccess() {
    return recentSuccess;
  }

  public void setRecentSuccess(Boolean recentSuccess) {
    this.recentSuccess = recentSuccess;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapshotStatusInfo snapshotStatusInfo = (SnapshotStatusInfo) o;
    return Objects.equals(this.healthy, snapshotStatusInfo.healthy) &&
        Objects.equals(this.count, snapshotStatusInfo.count) &&
        Objects.equals(this.latestSuccessful, snapshotStatusInfo.latestSuccessful) &&
        Objects.equals(this.latestStatus, snapshotStatusInfo.latestStatus) &&
        Objects.equals(this.scheduledTime, snapshotStatusInfo.scheduledTime) &&
        Objects.equals(this.latestEndTime, snapshotStatusInfo.latestEndTime) &&
        Objects.equals(this.latestSuccessfulEndTime, snapshotStatusInfo.latestSuccessfulEndTime) &&
        Objects.equals(this.recentSuccess, snapshotStatusInfo.recentSuccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthy, count, latestSuccessful, latestStatus, scheduledTime, latestEndTime, latestSuccessfulEndTime, recentSuccess);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapshotStatusInfo {\n");
    
    sb.append("    healthy: ").append(toIndentedString(healthy)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    latestSuccessful: ").append(toIndentedString(latestSuccessful)).append("\n");
    sb.append("    latestStatus: ").append(toIndentedString(latestStatus)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    latestEndTime: ").append(toIndentedString(latestEndTime)).append("\n");
    sb.append("    latestSuccessfulEndTime: ").append(toIndentedString(latestSuccessfulEndTime)).append("\n");
    sb.append("    recentSuccess: ").append(toIndentedString(recentSuccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
