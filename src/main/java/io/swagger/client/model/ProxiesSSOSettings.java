/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The single sign-on settings for all proxies.
 */
@Schema(description = "The single sign-on settings for all proxies.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class ProxiesSSOSettings {
  @SerializedName("max_age")
  private Long maxAge = null;

  @SerializedName("sso_secret")
  private String ssoSecret = null;

  @SerializedName("cookie_name")
  private String cookieName = null;

  @SerializedName("dont_log_requests")
  private Boolean dontLogRequests = null;

  @SerializedName("default_redirect_path")
  private String defaultRedirectPath = null;

  @SerializedName("maintenance_bypass_cookie_name")
  private String maintenanceBypassCookieName = null;

  public ProxiesSSOSettings maxAge(Long maxAge) {
    this.maxAge = maxAge;
    return this;
  }

   /**
   * Maximum age of single-sign-on token in milliseconds
   * @return maxAge
  **/
  @Schema(required = true, description = "Maximum age of single-sign-on token in milliseconds")
  public Long getMaxAge() {
    return maxAge;
  }

  public void setMaxAge(Long maxAge) {
    this.maxAge = maxAge;
  }

  public ProxiesSSOSettings ssoSecret(String ssoSecret) {
    this.ssoSecret = ssoSecret;
    return this;
  }

   /**
   * Secret string for single-sign-on
   * @return ssoSecret
  **/
  @Schema(required = true, description = "Secret string for single-sign-on")
  public String getSsoSecret() {
    return ssoSecret;
  }

  public void setSsoSecret(String ssoSecret) {
    this.ssoSecret = ssoSecret;
  }

  public ProxiesSSOSettings cookieName(String cookieName) {
    this.cookieName = cookieName;
    return this;
  }

   /**
   * Name of the HTTP cookie used for single-sign-on
   * @return cookieName
  **/
  @Schema(required = true, description = "Name of the HTTP cookie used for single-sign-on")
  public String getCookieName() {
    return cookieName;
  }

  public void setCookieName(String cookieName) {
    this.cookieName = cookieName;
  }

  public ProxiesSSOSettings dontLogRequests(Boolean dontLogRequests) {
    this.dontLogRequests = dontLogRequests;
    return this;
  }

   /**
   * If true, don&#x27;t log requests
   * @return dontLogRequests
  **/
  @Schema(required = true, description = "If true, don't log requests")
  public Boolean isDontLogRequests() {
    return dontLogRequests;
  }

  public void setDontLogRequests(Boolean dontLogRequests) {
    this.dontLogRequests = dontLogRequests;
  }

  public ProxiesSSOSettings defaultRedirectPath(String defaultRedirectPath) {
    this.defaultRedirectPath = defaultRedirectPath;
    return this;
  }

   /**
   * Default path where users are redirected after a successful single-sign-on
   * @return defaultRedirectPath
  **/
  @Schema(required = true, description = "Default path where users are redirected after a successful single-sign-on")
  public String getDefaultRedirectPath() {
    return defaultRedirectPath;
  }

  public void setDefaultRedirectPath(String defaultRedirectPath) {
    this.defaultRedirectPath = defaultRedirectPath;
  }

  public ProxiesSSOSettings maintenanceBypassCookieName(String maintenanceBypassCookieName) {
    this.maintenanceBypassCookieName = maintenanceBypassCookieName;
    return this;
  }

   /**
   * Name of the cookie that bypasses maintenance
   * @return maintenanceBypassCookieName
  **/
  @Schema(required = true, description = "Name of the cookie that bypasses maintenance")
  public String getMaintenanceBypassCookieName() {
    return maintenanceBypassCookieName;
  }

  public void setMaintenanceBypassCookieName(String maintenanceBypassCookieName) {
    this.maintenanceBypassCookieName = maintenanceBypassCookieName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxiesSSOSettings proxiesSSOSettings = (ProxiesSSOSettings) o;
    return Objects.equals(this.maxAge, proxiesSSOSettings.maxAge) &&
        Objects.equals(this.ssoSecret, proxiesSSOSettings.ssoSecret) &&
        Objects.equals(this.cookieName, proxiesSSOSettings.cookieName) &&
        Objects.equals(this.dontLogRequests, proxiesSSOSettings.dontLogRequests) &&
        Objects.equals(this.defaultRedirectPath, proxiesSSOSettings.defaultRedirectPath) &&
        Objects.equals(this.maintenanceBypassCookieName, proxiesSSOSettings.maintenanceBypassCookieName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxAge, ssoSecret, cookieName, dontLogRequests, defaultRedirectPath, maintenanceBypassCookieName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxiesSSOSettings {\n");
    
    sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
    sb.append("    ssoSecret: ").append(toIndentedString(ssoSecret)).append("\n");
    sb.append("    cookieName: ").append(toIndentedString(cookieName)).append("\n");
    sb.append("    dontLogRequests: ").append(toIndentedString(dontLogRequests)).append("\n");
    sb.append("    defaultRedirectPath: ").append(toIndentedString(defaultRedirectPath)).append("\n");
    sb.append("    maintenanceBypassCookieName: ").append(toIndentedString(maintenanceBypassCookieName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
