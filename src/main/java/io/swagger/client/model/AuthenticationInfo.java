/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * A user&#x27;s authentication info
 */
@Schema(description = "A user's authentication info")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class AuthenticationInfo {
  @SerializedName("has_totp_device")
  private Boolean hasTotpDevice = null;

  /**
   * The TOTP device source
   */
  @JsonAdapter(TotpDeviceSourceEnum.Adapter.class)
  public enum TotpDeviceSourceEnum {
    NATIVE("native"),
    OKTA("okta");

    private String value;

    TotpDeviceSourceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TotpDeviceSourceEnum fromValue(String text) {
      for (TotpDeviceSourceEnum b : TotpDeviceSourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TotpDeviceSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TotpDeviceSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TotpDeviceSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TotpDeviceSourceEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("totp_device_source")
  private TotpDeviceSourceEnum totpDeviceSource = null;

  @SerializedName("has_elevated_permissions")
  private Boolean hasElevatedPermissions = null;

  @SerializedName("elevated_permissions_expire_at")
  private OffsetDateTime elevatedPermissionsExpireAt = null;

  public AuthenticationInfo hasTotpDevice(Boolean hasTotpDevice) {
    this.hasTotpDevice = hasTotpDevice;
    return this;
  }

   /**
   * True if the user has an available TOTP device
   * @return hasTotpDevice
  **/
  @Schema(required = true, description = "True if the user has an available TOTP device")
  public Boolean isHasTotpDevice() {
    return hasTotpDevice;
  }

  public void setHasTotpDevice(Boolean hasTotpDevice) {
    this.hasTotpDevice = hasTotpDevice;
  }

  public AuthenticationInfo totpDeviceSource(TotpDeviceSourceEnum totpDeviceSource) {
    this.totpDeviceSource = totpDeviceSource;
    return this;
  }

   /**
   * The TOTP device source
   * @return totpDeviceSource
  **/
  @Schema(required = true, description = "The TOTP device source")
  public TotpDeviceSourceEnum getTotpDeviceSource() {
    return totpDeviceSource;
  }

  public void setTotpDeviceSource(TotpDeviceSourceEnum totpDeviceSource) {
    this.totpDeviceSource = totpDeviceSource;
  }

  public AuthenticationInfo hasElevatedPermissions(Boolean hasElevatedPermissions) {
    this.hasElevatedPermissions = hasElevatedPermissions;
    return this;
  }

   /**
   * True if the user has elevated permissions
   * @return hasElevatedPermissions
  **/
  @Schema(required = true, description = "True if the user has elevated permissions")
  public Boolean isHasElevatedPermissions() {
    return hasElevatedPermissions;
  }

  public void setHasElevatedPermissions(Boolean hasElevatedPermissions) {
    this.hasElevatedPermissions = hasElevatedPermissions;
  }

  public AuthenticationInfo elevatedPermissionsExpireAt(OffsetDateTime elevatedPermissionsExpireAt) {
    this.elevatedPermissionsExpireAt = elevatedPermissionsExpireAt;
    return this;
  }

   /**
   * The UTC time when elevated permissions will expire, if the user has elevated permissions
   * @return elevatedPermissionsExpireAt
  **/
  @Schema(description = "The UTC time when elevated permissions will expire, if the user has elevated permissions")
  public OffsetDateTime getElevatedPermissionsExpireAt() {
    return elevatedPermissionsExpireAt;
  }

  public void setElevatedPermissionsExpireAt(OffsetDateTime elevatedPermissionsExpireAt) {
    this.elevatedPermissionsExpireAt = elevatedPermissionsExpireAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationInfo authenticationInfo = (AuthenticationInfo) o;
    return Objects.equals(this.hasTotpDevice, authenticationInfo.hasTotpDevice) &&
        Objects.equals(this.totpDeviceSource, authenticationInfo.totpDeviceSource) &&
        Objects.equals(this.hasElevatedPermissions, authenticationInfo.hasElevatedPermissions) &&
        Objects.equals(this.elevatedPermissionsExpireAt, authenticationInfo.elevatedPermissionsExpireAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasTotpDevice, totpDeviceSource, hasElevatedPermissions, elevatedPermissionsExpireAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationInfo {\n");
    
    sb.append("    hasTotpDevice: ").append(toIndentedString(hasTotpDevice)).append("\n");
    sb.append("    totpDeviceSource: ").append(toIndentedString(totpDeviceSource)).append("\n");
    sb.append("    hasElevatedPermissions: ").append(toIndentedString(hasElevatedPermissions)).append("\n");
    sb.append("    elevatedPermissionsExpireAt: ").append(toIndentedString(elevatedPermissionsExpireAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
