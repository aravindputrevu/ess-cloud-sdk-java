/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Hyperlink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Information about the APM Servers associated with the Elasticsearch cluster.
 */
@Schema(description = "Information about the APM Servers associated with the Elasticsearch cluster.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class ApmSubInfo {
  @SerializedName("apm_id")
  private String apmId = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("links")
  private Map<String, Hyperlink> links = null;

  public ApmSubInfo apmId(String apmId) {
    this.apmId = apmId;
    return this;
  }

   /**
   * The APM cluster Id
   * @return apmId
  **/
  @Schema(required = true, description = "The APM cluster Id")
  public String getApmId() {
    return apmId;
  }

  public void setApmId(String apmId) {
    this.apmId = apmId;
  }

  public ApmSubInfo enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether the associated APM cluster is currently available
   * @return enabled
  **/
  @Schema(required = true, description = "Whether the associated APM cluster is currently available")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public ApmSubInfo links(Map<String, Hyperlink> links) {
    this.links = links;
    return this;
  }

  public ApmSubInfo putLinksItem(String key, Hyperlink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<String, Hyperlink>();
    }
    this.links.put(key, linksItem);
    return this;
  }

   /**
   * A map of application-specific operations (which map to &#x27;operationId&#x27;s in the Swagger API) to metadata about that operation
   * @return links
  **/
  @Schema(description = "A map of application-specific operations (which map to 'operationId's in the Swagger API) to metadata about that operation")
  public Map<String, Hyperlink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, Hyperlink> links) {
    this.links = links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApmSubInfo apmSubInfo = (ApmSubInfo) o;
    return Objects.equals(this.apmId, apmSubInfo.apmId) &&
        Objects.equals(this.enabled, apmSubInfo.enabled) &&
        Objects.equals(this.links, apmSubInfo.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apmId, enabled, links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApmSubInfo {\n");
    
    sb.append("    apmId: ").append(toIndentedString(apmId)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
