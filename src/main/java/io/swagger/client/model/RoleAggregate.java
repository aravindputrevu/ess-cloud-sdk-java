/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BlessingsWithMeta;
import io.swagger.client.model.PendingStatesWithMeta;
import io.swagger.client.model.RoleWithMeta;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Describes whether certain runners are blessed to run a Role.
 */
@Schema(description = "Describes whether certain runners are blessed to run a Role.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class RoleAggregate {
  @SerializedName("id")
  private String id = null;

  @SerializedName("role")
  private RoleWithMeta role = null;

  @SerializedName("blessings")
  private BlessingsWithMeta blessings = null;

  @SerializedName("pending")
  private PendingStatesWithMeta pending = null;

  public RoleAggregate id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique id of this role
   * @return id
  **/
  @Schema(example = "constructor", required = true, description = "The unique id of this role")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public RoleAggregate role(RoleWithMeta role) {
    this.role = role;
    return this;
  }

   /**
   * Get role
   * @return role
  **/
  @Schema(required = true, description = "")
  public RoleWithMeta getRole() {
    return role;
  }

  public void setRole(RoleWithMeta role) {
    this.role = role;
  }

  public RoleAggregate blessings(BlessingsWithMeta blessings) {
    this.blessings = blessings;
    return this;
  }

   /**
   * Get blessings
   * @return blessings
  **/
  @Schema(description = "")
  public BlessingsWithMeta getBlessings() {
    return blessings;
  }

  public void setBlessings(BlessingsWithMeta blessings) {
    this.blessings = blessings;
  }

  public RoleAggregate pending(PendingStatesWithMeta pending) {
    this.pending = pending;
    return this;
  }

   /**
   * Get pending
   * @return pending
  **/
  @Schema(description = "")
  public PendingStatesWithMeta getPending() {
    return pending;
  }

  public void setPending(PendingStatesWithMeta pending) {
    this.pending = pending;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoleAggregate roleAggregate = (RoleAggregate) o;
    return Objects.equals(this.id, roleAggregate.id) &&
        Objects.equals(this.role, roleAggregate.role) &&
        Objects.equals(this.blessings, roleAggregate.blessings) &&
        Objects.equals(this.pending, roleAggregate.pending);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, role, blessings, pending);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoleAggregate {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    blessings: ").append(toIndentedString(blessings)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
