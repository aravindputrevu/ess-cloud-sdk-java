/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * The request that specifies the Elasticsearch instances, Kibana instances, and APM Servers to move to allocators as part of the upgrade plan.
 */
@Schema(description = "The request that specifies the Elasticsearch instances, Kibana instances, and APM Servers to move to allocators as part of the upgrade plan.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class InstanceMoveRequest {
  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private List<String> to = null;

  @SerializedName("instance_down")
  private Boolean instanceDown = null;

  public InstanceMoveRequest from(String from) {
    this.from = from;
    return this;
  }

   /**
   * The instance id that is going to be moved
   * @return from
  **/
  @Schema(required = true, description = "The instance id that is going to be moved")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public InstanceMoveRequest to(List<String> to) {
    this.to = to;
    return this;
  }

  public InstanceMoveRequest addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<String>();
    }
    this.to.add(toItem);
    return this;
  }

   /**
   * An optional list of allocator ids to which the instance should be moved. If not specified then any available allocator can be used (including the current one if it is healthy)
   * @return to
  **/
  @Schema(description = "An optional list of allocator ids to which the instance should be moved. If not specified then any available allocator can be used (including the current one if it is healthy)")
  public List<String> getTo() {
    return to;
  }

  public void setTo(List<String> to) {
    this.to = to;
  }

  public InstanceMoveRequest instanceDown(Boolean instanceDown) {
    this.instanceDown = instanceDown;
    return this;
  }

   /**
   * Tells the infrastructure that the instance should be considered as permanently down when deciding how to migrate data to new nodes. If left blank then the system will automatically decide (currently: will treat the instances as up)
   * @return instanceDown
  **/
  @Schema(description = "Tells the infrastructure that the instance should be considered as permanently down when deciding how to migrate data to new nodes. If left blank then the system will automatically decide (currently: will treat the instances as up)")
  public Boolean isInstanceDown() {
    return instanceDown;
  }

  public void setInstanceDown(Boolean instanceDown) {
    this.instanceDown = instanceDown;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceMoveRequest instanceMoveRequest = (InstanceMoveRequest) o;
    return Objects.equals(this.from, instanceMoveRequest.from) &&
        Objects.equals(this.to, instanceMoveRequest.to) &&
        Objects.equals(this.instanceDown, instanceMoveRequest.instanceDown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, instanceDown);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceMoveRequest {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    instanceDown: ").append(toIndentedString(instanceDown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
