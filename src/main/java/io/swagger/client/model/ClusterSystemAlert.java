/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Information about a system alert on an Elasticsearch cluster.
 */
@Schema(description = "Information about a system alert on an Elasticsearch cluster.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class ClusterSystemAlert {
  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  @SerializedName("instance_name")
  private String instanceName = null;

  /**
   * Type of system alert
   */
  @JsonAdapter(AlertTypeEnum.Adapter.class)
  public enum AlertTypeEnum {
    AUTOMATIC_RESTART("automatic_restart"),
    HEAP_DUMP("heap_dump"),
    UNKNOWN_EVENT("unknown_event");

    private String value;

    AlertTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AlertTypeEnum fromValue(String text) {
      for (AlertTypeEnum b : AlertTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AlertTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlertTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlertTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AlertTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("alert_type")
  private AlertTypeEnum alertType = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("exit_code")
  private Integer exitCode = null;

  public ClusterSystemAlert timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp marking the system alert
   * @return timestamp
  **/
  @Schema(required = true, description = "Timestamp marking the system alert")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public ClusterSystemAlert instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

   /**
   * Instance that caused the system alert
   * @return instanceName
  **/
  @Schema(required = true, description = "Instance that caused the system alert")
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }

  public ClusterSystemAlert alertType(AlertTypeEnum alertType) {
    this.alertType = alertType;
    return this;
  }

   /**
   * Type of system alert
   * @return alertType
  **/
  @Schema(required = true, description = "Type of system alert")
  public AlertTypeEnum getAlertType() {
    return alertType;
  }

  public void setAlertType(AlertTypeEnum alertType) {
    this.alertType = alertType;
  }

  public ClusterSystemAlert url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The URL related to the event. Only applicable for alert_type: heap_dump
   * @return url
  **/
  @Schema(description = "The URL related to the event. Only applicable for alert_type: heap_dump")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public ClusterSystemAlert exitCode(Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

   /**
   * The exit_code related to the event. Only applicable for alert_type: slain
   * @return exitCode
  **/
  @Schema(description = "The exit_code related to the event. Only applicable for alert_type: slain")
  public Integer getExitCode() {
    return exitCode;
  }

  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterSystemAlert clusterSystemAlert = (ClusterSystemAlert) o;
    return Objects.equals(this.timestamp, clusterSystemAlert.timestamp) &&
        Objects.equals(this.instanceName, clusterSystemAlert.instanceName) &&
        Objects.equals(this.alertType, clusterSystemAlert.alertType) &&
        Objects.equals(this.url, clusterSystemAlert.url) &&
        Objects.equals(this.exitCode, clusterSystemAlert.exitCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, instanceName, alertType, url, exitCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterSystemAlert {\n");
    
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
