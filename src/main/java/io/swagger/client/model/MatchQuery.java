/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Consumes and analyzes text, numbers, and dates, then constructs a query.
 */
@Schema(description = "Consumes and analyzes text, numbers, and dates, then constructs a query.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class MatchQuery {
  @SerializedName("query")
  private String query = null;

  @SerializedName("operator")
  private String operator = null;

  @SerializedName("minimum_should_match")
  private Integer minimumShouldMatch = null;

  @SerializedName("analyzer")
  private String analyzer = null;

  public MatchQuery query(String query) {
    this.query = query;
    return this;
  }

   /**
   * The text/numeric/date to query for.
   * @return query
  **/
  @Schema(required = true, description = "The text/numeric/date to query for.")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public MatchQuery operator(String operator) {
    this.operator = operator;
    return this;
  }

   /**
   * The operator flag can be set to or or and to control the boolean clauses (defaults to or).
   * @return operator
  **/
  @Schema(description = "The operator flag can be set to or or and to control the boolean clauses (defaults to or).")
  public String getOperator() {
    return operator;
  }

  public void setOperator(String operator) {
    this.operator = operator;
  }

  public MatchQuery minimumShouldMatch(Integer minimumShouldMatch) {
    this.minimumShouldMatch = minimumShouldMatch;
    return this;
  }

   /**
   * The minimum number of optional should clauses to match.
   * @return minimumShouldMatch
  **/
  @Schema(description = "The minimum number of optional should clauses to match.")
  public Integer getMinimumShouldMatch() {
    return minimumShouldMatch;
  }

  public void setMinimumShouldMatch(Integer minimumShouldMatch) {
    this.minimumShouldMatch = minimumShouldMatch;
  }

  public MatchQuery analyzer(String analyzer) {
    this.analyzer = analyzer;
    return this;
  }

   /**
   * The analyzer that will be used to perform the analysis process on the text. Defaults to the analyzer that was used to index the field.
   * @return analyzer
  **/
  @Schema(description = "The analyzer that will be used to perform the analysis process on the text. Defaults to the analyzer that was used to index the field.")
  public String getAnalyzer() {
    return analyzer;
  }

  public void setAnalyzer(String analyzer) {
    this.analyzer = analyzer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchQuery matchQuery = (MatchQuery) o;
    return Objects.equals(this.query, matchQuery.query) &&
        Objects.equals(this.operator, matchQuery.operator) &&
        Objects.equals(this.minimumShouldMatch, matchQuery.minimumShouldMatch) &&
        Objects.equals(this.analyzer, matchQuery.analyzer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, operator, minimumShouldMatch, analyzer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchQuery {\n");
    
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    minimumShouldMatch: ").append(toIndentedString(minimumShouldMatch)).append("\n");
    sb.append("    analyzer: ").append(toIndentedString(analyzer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
