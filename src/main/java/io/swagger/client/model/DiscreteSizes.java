/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Instance sizes that are supported by the Elasticsearch instance, Kibana instance, or APM Server configuration.
 */
@Schema(description = "Instance sizes that are supported by the Elasticsearch instance, Kibana instance, or APM Server configuration.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class DiscreteSizes {
  @SerializedName("sizes")
  private List<Integer> sizes = new ArrayList<Integer>();

  @SerializedName("default_size")
  private Integer defaultSize = null;

  /**
   * The unit that each size represents
   */
  @JsonAdapter(ResourceEnum.Adapter.class)
  public enum ResourceEnum {
    MEMORY("memory"),
    STORAGE("storage");

    private String value;

    ResourceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResourceEnum fromValue(String text) {
      for (ResourceEnum b : ResourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResourceEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("resource")
  private ResourceEnum resource = null;

  public DiscreteSizes sizes(List<Integer> sizes) {
    this.sizes = sizes;
    return this;
  }

  public DiscreteSizes addSizesItem(Integer sizesItem) {
    this.sizes.add(sizesItem);
    return this;
  }

   /**
   * List of supported sizes
   * @return sizes
  **/
  @Schema(required = true, description = "List of supported sizes")
  public List<Integer> getSizes() {
    return sizes;
  }

  public void setSizes(List<Integer> sizes) {
    this.sizes = sizes;
  }

  public DiscreteSizes defaultSize(Integer defaultSize) {
    this.defaultSize = defaultSize;
    return this;
  }

   /**
   * The default size
   * @return defaultSize
  **/
  @Schema(required = true, description = "The default size")
  public Integer getDefaultSize() {
    return defaultSize;
  }

  public void setDefaultSize(Integer defaultSize) {
    this.defaultSize = defaultSize;
  }

  public DiscreteSizes resource(ResourceEnum resource) {
    this.resource = resource;
    return this;
  }

   /**
   * The unit that each size represents
   * @return resource
  **/
  @Schema(required = true, description = "The unit that each size represents")
  public ResourceEnum getResource() {
    return resource;
  }

  public void setResource(ResourceEnum resource) {
    this.resource = resource;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscreteSizes discreteSizes = (DiscreteSizes) o;
    return Objects.equals(this.sizes, discreteSizes.sizes) &&
        Objects.equals(this.defaultSize, discreteSizes.defaultSize) &&
        Objects.equals(this.resource, discreteSizes.resource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sizes, defaultSize, resource);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscreteSizes {\n");
    
    sb.append("    sizes: ").append(toIndentedString(sizes)).append("\n");
    sb.append("    defaultSize: ").append(toIndentedString(defaultSize)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
