/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.KibanaSystemSettings;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The Kibana instance settings. When specified at the top level, provides a field-by-field default. When specified at the topology level, provides the override settings.
 */
@Schema(description = "The Kibana instance settings. When specified at the top level, provides a field-by-field default. When specified at the topology level, provides the override settings.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class KibanaConfiguration {
  @SerializedName("version")
  private String version = null;

  @SerializedName("docker_image")
  private String dockerImage = null;

  @SerializedName("system_settings")
  private KibanaSystemSettings systemSettings = null;

  @SerializedName("user_settings_json")
  private Object userSettingsJson = null;

  @SerializedName("user_settings_yaml")
  private String userSettingsYaml = null;

  @SerializedName("user_settings_override_json")
  private Object userSettingsOverrideJson = null;

  @SerializedName("user_settings_override_yaml")
  private String userSettingsOverrideYaml = null;

  public KibanaConfiguration version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the Kibana cluster (must be one of the ECE supported versions, and won&#x27;t work unless it matches the Elasticsearch version. Leave blank to auto-detect version.)
   * @return version
  **/
  @Schema(description = "The version of the Kibana cluster (must be one of the ECE supported versions, and won't work unless it matches the Elasticsearch version. Leave blank to auto-detect version.)")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public KibanaConfiguration dockerImage(String dockerImage) {
    this.dockerImage = dockerImage;
    return this;
  }

   /**
   * A docker URI that allows overriding of the default docker image specified for this version
   * @return dockerImage
  **/
  @Schema(description = "A docker URI that allows overriding of the default docker image specified for this version")
  public String getDockerImage() {
    return dockerImage;
  }

  public void setDockerImage(String dockerImage) {
    this.dockerImage = dockerImage;
  }

  public KibanaConfiguration systemSettings(KibanaSystemSettings systemSettings) {
    this.systemSettings = systemSettings;
    return this;
  }

   /**
   * Get systemSettings
   * @return systemSettings
  **/
  @Schema(description = "")
  public KibanaSystemSettings getSystemSettings() {
    return systemSettings;
  }

  public void setSystemSettings(KibanaSystemSettings systemSettings) {
    this.systemSettings = systemSettings;
  }

  public KibanaConfiguration userSettingsJson(Object userSettingsJson) {
    this.userSettingsJson = userSettingsJson;
    return this;
  }

   /**
   * An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and &#x27;user_settings_yaml&#x27; is allowed), provided they are on the whitelist (&#x27;user_settings_whitelist&#x27;) and not on the blacklist (&#x27;user_settings_blacklist&#x27;). (This field together with &#x27;user_settings_override*&#x27; and &#x27;system_settings&#x27; defines the total set of Kibana settings)
   * @return userSettingsJson
  **/
  @Schema(description = "An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of Kibana settings)")
  public Object getUserSettingsJson() {
    return userSettingsJson;
  }

  public void setUserSettingsJson(Object userSettingsJson) {
    this.userSettingsJson = userSettingsJson;
  }

  public KibanaConfiguration userSettingsYaml(String userSettingsYaml) {
    this.userSettingsYaml = userSettingsYaml;
    return this;
  }

   /**
   * An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and &#x27;user_settings_json&#x27; is allowed), provided they are on the whitelist (&#x27;user_settings_whitelist&#x27;) and not on the blacklist (&#x27;user_settings_blacklist&#x27;). (These field together with &#x27;user_settings_override*&#x27; and &#x27;system_settings&#x27; defines the total set of Kibana settings)
   * @return userSettingsYaml
  **/
  @Schema(description = "An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of Kibana settings)")
  public String getUserSettingsYaml() {
    return userSettingsYaml;
  }

  public void setUserSettingsYaml(String userSettingsYaml) {
    this.userSettingsYaml = userSettingsYaml;
  }

  public KibanaConfiguration userSettingsOverrideJson(Object userSettingsOverrideJson) {
    this.userSettingsOverrideJson = userSettingsOverrideJson;
    return this;
  }

   /**
   * An arbitrary JSON object allowing ECE admins owners to set clusters&#x27; parameters (only one of this and &#x27;user_settings_override_yaml&#x27; is allowed), ie in addition to the documented &#x27;system_settings&#x27;. (This field together with &#x27;system_settings&#x27; and &#x27;user_settings*&#x27; defines the total set of Kibana settings)
   * @return userSettingsOverrideJson
  **/
  @Schema(description = "An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of Kibana settings)")
  public Object getUserSettingsOverrideJson() {
    return userSettingsOverrideJson;
  }

  public void setUserSettingsOverrideJson(Object userSettingsOverrideJson) {
    this.userSettingsOverrideJson = userSettingsOverrideJson;
  }

  public KibanaConfiguration userSettingsOverrideYaml(String userSettingsOverrideYaml) {
    this.userSettingsOverrideYaml = userSettingsOverrideYaml;
    return this;
  }

   /**
   * An arbitrary YAML object allowing ECE admins owners to set clusters&#x27; parameters (only one of this and &#x27;user_settings_override_json&#x27; is allowed), ie in addition to the documented &#x27;system_settings&#x27;. (This field together with &#x27;system_settings&#x27; and &#x27;user_settings*&#x27; defines the total set of Kibana settings)
   * @return userSettingsOverrideYaml
  **/
  @Schema(description = "An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of Kibana settings)")
  public String getUserSettingsOverrideYaml() {
    return userSettingsOverrideYaml;
  }

  public void setUserSettingsOverrideYaml(String userSettingsOverrideYaml) {
    this.userSettingsOverrideYaml = userSettingsOverrideYaml;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KibanaConfiguration kibanaConfiguration = (KibanaConfiguration) o;
    return Objects.equals(this.version, kibanaConfiguration.version) &&
        Objects.equals(this.dockerImage, kibanaConfiguration.dockerImage) &&
        Objects.equals(this.systemSettings, kibanaConfiguration.systemSettings) &&
        Objects.equals(this.userSettingsJson, kibanaConfiguration.userSettingsJson) &&
        Objects.equals(this.userSettingsYaml, kibanaConfiguration.userSettingsYaml) &&
        Objects.equals(this.userSettingsOverrideJson, kibanaConfiguration.userSettingsOverrideJson) &&
        Objects.equals(this.userSettingsOverrideYaml, kibanaConfiguration.userSettingsOverrideYaml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, dockerImage, systemSettings, userSettingsJson, userSettingsYaml, userSettingsOverrideJson, userSettingsOverrideYaml);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KibanaConfiguration {\n");
    
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    dockerImage: ").append(toIndentedString(dockerImage)).append("\n");
    sb.append("    systemSettings: ").append(toIndentedString(systemSettings)).append("\n");
    sb.append("    userSettingsJson: ").append(toIndentedString(userSettingsJson)).append("\n");
    sb.append("    userSettingsYaml: ").append(toIndentedString(userSettingsYaml)).append("\n");
    sb.append("    userSettingsOverrideJson: ").append(toIndentedString(userSettingsOverrideJson)).append("\n");
    sb.append("    userSettingsOverrideYaml: ").append(toIndentedString(userSettingsOverrideYaml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
