/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AllocatedInstancePlansInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The status of the allocated Kibana instance or APM Server.
 */
@Schema(description = "The status of the allocated Kibana instance or APM Server.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class AllocatedInstanceStatus {
  @SerializedName("cluster_type")
  private String clusterType = null;

  @SerializedName("cluster_id")
  private String clusterId = null;

  @SerializedName("cluster_name")
  private String clusterName = null;

  @SerializedName("instance_name")
  private String instanceName = null;

  @SerializedName("node_memory")
  private Integer nodeMemory = null;

  @SerializedName("healthy")
  private Boolean healthy = null;

  @SerializedName("cluster_healthy")
  private Boolean clusterHealthy = null;

  @SerializedName("instance_configuration_id")
  private String instanceConfigurationId = null;

  @SerializedName("moving")
  private Boolean moving = null;

  @SerializedName("plans_info")
  private AllocatedInstancePlansInfo plansInfo = null;

  @SerializedName("deployment_id")
  private String deploymentId = null;

  public AllocatedInstanceStatus clusterType(String clusterType) {
    this.clusterType = clusterType;
    return this;
  }

   /**
   * Type of instance that is running. E.g. elasticsearch, kibana
   * @return clusterType
  **/
  @Schema(required = true, description = "Type of instance that is running. E.g. elasticsearch, kibana")
  public String getClusterType() {
    return clusterType;
  }

  public void setClusterType(String clusterType) {
    this.clusterType = clusterType;
  }

  public AllocatedInstanceStatus clusterId(String clusterId) {
    this.clusterId = clusterId;
    return this;
  }

   /**
   * Identifier for the cluster this instance belongs
   * @return clusterId
  **/
  @Schema(required = true, description = "Identifier for the cluster this instance belongs")
  public String getClusterId() {
    return clusterId;
  }

  public void setClusterId(String clusterId) {
    this.clusterId = clusterId;
  }

  public AllocatedInstanceStatus clusterName(String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

   /**
   * Name of cluster this instance belongs, if available
   * @return clusterName
  **/
  @Schema(description = "Name of cluster this instance belongs, if available")
  public String getClusterName() {
    return clusterName;
  }

  public void setClusterName(String clusterName) {
    this.clusterName = clusterName;
  }

  public AllocatedInstanceStatus instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

   /**
   * Instance ID of the instance
   * @return instanceName
  **/
  @Schema(required = true, description = "Instance ID of the instance")
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }

  public AllocatedInstanceStatus nodeMemory(Integer nodeMemory) {
    this.nodeMemory = nodeMemory;
    return this;
  }

   /**
   * Memory assigned to this instance
   * @return nodeMemory
  **/
  @Schema(required = true, description = "Memory assigned to this instance")
  public Integer getNodeMemory() {
    return nodeMemory;
  }

  public void setNodeMemory(Integer nodeMemory) {
    this.nodeMemory = nodeMemory;
  }

  public AllocatedInstanceStatus healthy(Boolean healthy) {
    this.healthy = healthy;
    return this;
  }

   /**
   * Indicates whether the instance is healthy
   * @return healthy
  **/
  @Schema(description = "Indicates whether the instance is healthy")
  public Boolean isHealthy() {
    return healthy;
  }

  public void setHealthy(Boolean healthy) {
    this.healthy = healthy;
  }

  public AllocatedInstanceStatus clusterHealthy(Boolean clusterHealthy) {
    this.clusterHealthy = clusterHealthy;
    return this;
  }

   /**
   * Indicates whether the cluster the instance belongs to is healthy
   * @return clusterHealthy
  **/
  @Schema(description = "Indicates whether the cluster the instance belongs to is healthy")
  public Boolean isClusterHealthy() {
    return clusterHealthy;
  }

  public void setClusterHealthy(Boolean clusterHealthy) {
    this.clusterHealthy = clusterHealthy;
  }

  public AllocatedInstanceStatus instanceConfigurationId(String instanceConfigurationId) {
    this.instanceConfigurationId = instanceConfigurationId;
    return this;
  }

   /**
   * The instance configuration id of this instance
   * @return instanceConfigurationId
  **/
  @Schema(description = "The instance configuration id of this instance")
  public String getInstanceConfigurationId() {
    return instanceConfigurationId;
  }

  public void setInstanceConfigurationId(String instanceConfigurationId) {
    this.instanceConfigurationId = instanceConfigurationId;
  }

  public AllocatedInstanceStatus moving(Boolean moving) {
    this.moving = moving;
    return this;
  }

   /**
   * Indicates whether the instance is vacating away from this allocator. Note that this is currently not populated when returned from the search endpoint.
   * @return moving
  **/
  @Schema(description = "Indicates whether the instance is vacating away from this allocator. Note that this is currently not populated when returned from the search endpoint.")
  public Boolean isMoving() {
    return moving;
  }

  public void setMoving(Boolean moving) {
    this.moving = moving;
  }

  public AllocatedInstanceStatus plansInfo(AllocatedInstancePlansInfo plansInfo) {
    this.plansInfo = plansInfo;
    return this;
  }

   /**
   * Get plansInfo
   * @return plansInfo
  **/
  @Schema(description = "")
  public AllocatedInstancePlansInfo getPlansInfo() {
    return plansInfo;
  }

  public void setPlansInfo(AllocatedInstancePlansInfo plansInfo) {
    this.plansInfo = plansInfo;
  }

  public AllocatedInstanceStatus deploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
    return this;
  }

   /**
   * The id of the deployment this cluster belongs to.
   * @return deploymentId
  **/
  @Schema(description = "The id of the deployment this cluster belongs to.")
  public String getDeploymentId() {
    return deploymentId;
  }

  public void setDeploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllocatedInstanceStatus allocatedInstanceStatus = (AllocatedInstanceStatus) o;
    return Objects.equals(this.clusterType, allocatedInstanceStatus.clusterType) &&
        Objects.equals(this.clusterId, allocatedInstanceStatus.clusterId) &&
        Objects.equals(this.clusterName, allocatedInstanceStatus.clusterName) &&
        Objects.equals(this.instanceName, allocatedInstanceStatus.instanceName) &&
        Objects.equals(this.nodeMemory, allocatedInstanceStatus.nodeMemory) &&
        Objects.equals(this.healthy, allocatedInstanceStatus.healthy) &&
        Objects.equals(this.clusterHealthy, allocatedInstanceStatus.clusterHealthy) &&
        Objects.equals(this.instanceConfigurationId, allocatedInstanceStatus.instanceConfigurationId) &&
        Objects.equals(this.moving, allocatedInstanceStatus.moving) &&
        Objects.equals(this.plansInfo, allocatedInstanceStatus.plansInfo) &&
        Objects.equals(this.deploymentId, allocatedInstanceStatus.deploymentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterType, clusterId, clusterName, instanceName, nodeMemory, healthy, clusterHealthy, instanceConfigurationId, moving, plansInfo, deploymentId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllocatedInstanceStatus {\n");
    
    sb.append("    clusterType: ").append(toIndentedString(clusterType)).append("\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    nodeMemory: ").append(toIndentedString(nodeMemory)).append("\n");
    sb.append("    healthy: ").append(toIndentedString(healthy)).append("\n");
    sb.append("    clusterHealthy: ").append(toIndentedString(clusterHealthy)).append("\n");
    sb.append("    instanceConfigurationId: ").append(toIndentedString(instanceConfigurationId)).append("\n");
    sb.append("    moving: ").append(toIndentedString(moving)).append("\n");
    sb.append("    plansInfo: ").append(toIndentedString(plansInfo)).append("\n");
    sb.append("    deploymentId: ").append(toIndentedString(deploymentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
