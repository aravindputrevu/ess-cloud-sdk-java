/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContainersEntryOptionsACL;
import io.swagger.client.model.ContainersEntryOptionsAuth;
import io.swagger.client.model.ContainersEntryOptionsOverrides;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Options for a ContainersEntry belonging to a role
 */
@Schema(description = "Options for a ContainersEntry belonging to a role")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class ContainersEntryOptions {
  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("auths")
  private List<ContainersEntryOptionsAuth> auths = new ArrayList<ContainersEntryOptionsAuth>();

  @SerializedName("acls")
  private List<ContainersEntryOptionsACL> acls = new ArrayList<ContainersEntryOptionsACL>();

  @SerializedName("runners_secret")
  private String runnersSecret = null;

  @SerializedName("container_set_secret")
  private String containerSetSecret = null;

  @SerializedName("enabled_by_named_feature_flag")
  private String enabledByNamedFeatureFlag = null;

  @SerializedName("overrides")
  private ContainersEntryOptionsOverrides overrides = null;

  public ContainersEntryOptions enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether this allocation is active and should be created.
   * @return enabled
  **/
  @Schema(required = true, description = "Whether this allocation is active and should be created.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public ContainersEntryOptions auths(List<ContainersEntryOptionsAuth> auths) {
    this.auths = auths;
    return this;
  }

  public ContainersEntryOptions addAuthsItem(ContainersEntryOptionsAuth authsItem) {
    this.auths.add(authsItem);
    return this;
  }

   /**
   * ZooKeeper Auths associated with this allocation
   * @return auths
  **/
  @Schema(required = true, description = "ZooKeeper Auths associated with this allocation")
  public List<ContainersEntryOptionsAuth> getAuths() {
    return auths;
  }

  public void setAuths(List<ContainersEntryOptionsAuth> auths) {
    this.auths = auths;
  }

  public ContainersEntryOptions acls(List<ContainersEntryOptionsACL> acls) {
    this.acls = acls;
    return this;
  }

  public ContainersEntryOptions addAclsItem(ContainersEntryOptionsACL aclsItem) {
    this.acls.add(aclsItem);
    return this;
  }

   /**
   * ZooKeeper ACLs associated with this allocation
   * @return acls
  **/
  @Schema(required = true, description = "ZooKeeper ACLs associated with this allocation")
  public List<ContainersEntryOptionsACL> getAcls() {
    return acls;
  }

  public void setAcls(List<ContainersEntryOptionsACL> acls) {
    this.acls = acls;
  }

  public ContainersEntryOptions runnersSecret(String runnersSecret) {
    this.runnersSecret = runnersSecret;
    return this;
  }

   /**
   * Secret shared between the runners that have containers in this container set allocated.
   * @return runnersSecret
  **/
  @Schema(description = "Secret shared between the runners that have containers in this container set allocated.")
  public String getRunnersSecret() {
    return runnersSecret;
  }

  public void setRunnersSecret(String runnersSecret) {
    this.runnersSecret = runnersSecret;
  }

  public ContainersEntryOptions containerSetSecret(String containerSetSecret) {
    this.containerSetSecret = containerSetSecret;
    return this;
  }

   /**
   * Secret shared between the containers that are part of this container set.
   * @return containerSetSecret
  **/
  @Schema(description = "Secret shared between the containers that are part of this container set.")
  public String getContainerSetSecret() {
    return containerSetSecret;
  }

  public void setContainerSetSecret(String containerSetSecret) {
    this.containerSetSecret = containerSetSecret;
  }

  public ContainersEntryOptions enabledByNamedFeatureFlag(String enabledByNamedFeatureFlag) {
    this.enabledByNamedFeatureFlag = enabledByNamedFeatureFlag;
    return this;
  }

   /**
   * A named feature flag to check whether this container is enabled or not 
   * @return enabledByNamedFeatureFlag
  **/
  @Schema(description = "A named feature flag to check whether this container is enabled or not ")
  public String getEnabledByNamedFeatureFlag() {
    return enabledByNamedFeatureFlag;
  }

  public void setEnabledByNamedFeatureFlag(String enabledByNamedFeatureFlag) {
    this.enabledByNamedFeatureFlag = enabledByNamedFeatureFlag;
  }

  public ContainersEntryOptions overrides(ContainersEntryOptionsOverrides overrides) {
    this.overrides = overrides;
    return this;
  }

   /**
   * Get overrides
   * @return overrides
  **/
  @Schema(description = "")
  public ContainersEntryOptionsOverrides getOverrides() {
    return overrides;
  }

  public void setOverrides(ContainersEntryOptionsOverrides overrides) {
    this.overrides = overrides;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainersEntryOptions containersEntryOptions = (ContainersEntryOptions) o;
    return Objects.equals(this.enabled, containersEntryOptions.enabled) &&
        Objects.equals(this.auths, containersEntryOptions.auths) &&
        Objects.equals(this.acls, containersEntryOptions.acls) &&
        Objects.equals(this.runnersSecret, containersEntryOptions.runnersSecret) &&
        Objects.equals(this.containerSetSecret, containersEntryOptions.containerSetSecret) &&
        Objects.equals(this.enabledByNamedFeatureFlag, containersEntryOptions.enabledByNamedFeatureFlag) &&
        Objects.equals(this.overrides, containersEntryOptions.overrides);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, auths, acls, runnersSecret, containerSetSecret, enabledByNamedFeatureFlag, overrides);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainersEntryOptions {\n");
    
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    auths: ").append(toIndentedString(auths)).append("\n");
    sb.append("    acls: ").append(toIndentedString(acls)).append("\n");
    sb.append("    runnersSecret: ").append(toIndentedString(runnersSecret)).append("\n");
    sb.append("    containerSetSecret: ").append(toIndentedString(containerSetSecret)).append("\n");
    sb.append("    enabledByNamedFeatureFlag: ").append(toIndentedString(enabledByNamedFeatureFlag)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
