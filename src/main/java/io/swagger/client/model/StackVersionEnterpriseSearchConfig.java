/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.StackVersionInstanceCapacityConstraint;
import io.swagger.client.model.StackVersionNodeType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * EnterpriseSearch related configuration of an Elastic Stack version
 */
@Schema(description = "EnterpriseSearch related configuration of an Elastic Stack version")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class StackVersionEnterpriseSearchConfig {
  @SerializedName("version")
  private String version = null;

  @SerializedName("docker_image")
  private String dockerImage = null;

  @SerializedName("blacklist")
  private List<String> blacklist = new ArrayList<String>();

  @SerializedName("settings")
  private Object settings = null;

  @SerializedName("capacity_constraints")
  private StackVersionInstanceCapacityConstraint capacityConstraints = null;

  @SerializedName("compatible_node_types")
  private List<String> compatibleNodeTypes = null;

  @SerializedName("node_types")
  private List<StackVersionNodeType> nodeTypes = null;

  public StackVersionEnterpriseSearchConfig version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Version of EnterpriseSearch
   * @return version
  **/
  @Schema(description = "Version of EnterpriseSearch")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public StackVersionEnterpriseSearchConfig dockerImage(String dockerImage) {
    this.dockerImage = dockerImage;
    return this;
  }

   /**
   * Docker image for the EnterpriseSearch
   * @return dockerImage
  **/
  @Schema(required = true, description = "Docker image for the EnterpriseSearch")
  public String getDockerImage() {
    return dockerImage;
  }

  public void setDockerImage(String dockerImage) {
    this.dockerImage = dockerImage;
  }

  public StackVersionEnterpriseSearchConfig blacklist(List<String> blacklist) {
    this.blacklist = blacklist;
    return this;
  }

  public StackVersionEnterpriseSearchConfig addBlacklistItem(String blacklistItem) {
    this.blacklist.add(blacklistItem);
    return this;
  }

   /**
   * List of configuration options that cannot be overridden by user settings
   * @return blacklist
  **/
  @Schema(required = true, description = "List of configuration options that cannot be overridden by user settings")
  public List<String> getBlacklist() {
    return blacklist;
  }

  public void setBlacklist(List<String> blacklist) {
    this.blacklist = blacklist;
  }

  public StackVersionEnterpriseSearchConfig settings(Object settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Settings that are applied to all nodes of this type
   * @return settings
  **/
  @Schema(description = "Settings that are applied to all nodes of this type")
  public Object getSettings() {
    return settings;
  }

  public void setSettings(Object settings) {
    this.settings = settings;
  }

  public StackVersionEnterpriseSearchConfig capacityConstraints(StackVersionInstanceCapacityConstraint capacityConstraints) {
    this.capacityConstraints = capacityConstraints;
    return this;
  }

   /**
   * Get capacityConstraints
   * @return capacityConstraints
  **/
  @Schema(description = "")
  public StackVersionInstanceCapacityConstraint getCapacityConstraints() {
    return capacityConstraints;
  }

  public void setCapacityConstraints(StackVersionInstanceCapacityConstraint capacityConstraints) {
    this.capacityConstraints = capacityConstraints;
  }

  public StackVersionEnterpriseSearchConfig compatibleNodeTypes(List<String> compatibleNodeTypes) {
    this.compatibleNodeTypes = compatibleNodeTypes;
    return this;
  }

  public StackVersionEnterpriseSearchConfig addCompatibleNodeTypesItem(String compatibleNodeTypesItem) {
    if (this.compatibleNodeTypes == null) {
      this.compatibleNodeTypes = new ArrayList<String>();
    }
    this.compatibleNodeTypes.add(compatibleNodeTypesItem);
    return this;
  }

   /**
   * Node types that are compatible with this one
   * @return compatibleNodeTypes
  **/
  @Schema(description = "Node types that are compatible with this one")
  public List<String> getCompatibleNodeTypes() {
    return compatibleNodeTypes;
  }

  public void setCompatibleNodeTypes(List<String> compatibleNodeTypes) {
    this.compatibleNodeTypes = compatibleNodeTypes;
  }

  public StackVersionEnterpriseSearchConfig nodeTypes(List<StackVersionNodeType> nodeTypes) {
    this.nodeTypes = nodeTypes;
    return this;
  }

  public StackVersionEnterpriseSearchConfig addNodeTypesItem(StackVersionNodeType nodeTypesItem) {
    if (this.nodeTypes == null) {
      this.nodeTypes = new ArrayList<StackVersionNodeType>();
    }
    this.nodeTypes.add(nodeTypesItem);
    return this;
  }

   /**
   * Node types that are supported by this stack version
   * @return nodeTypes
  **/
  @Schema(description = "Node types that are supported by this stack version")
  public List<StackVersionNodeType> getNodeTypes() {
    return nodeTypes;
  }

  public void setNodeTypes(List<StackVersionNodeType> nodeTypes) {
    this.nodeTypes = nodeTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackVersionEnterpriseSearchConfig stackVersionEnterpriseSearchConfig = (StackVersionEnterpriseSearchConfig) o;
    return Objects.equals(this.version, stackVersionEnterpriseSearchConfig.version) &&
        Objects.equals(this.dockerImage, stackVersionEnterpriseSearchConfig.dockerImage) &&
        Objects.equals(this.blacklist, stackVersionEnterpriseSearchConfig.blacklist) &&
        Objects.equals(this.settings, stackVersionEnterpriseSearchConfig.settings) &&
        Objects.equals(this.capacityConstraints, stackVersionEnterpriseSearchConfig.capacityConstraints) &&
        Objects.equals(this.compatibleNodeTypes, stackVersionEnterpriseSearchConfig.compatibleNodeTypes) &&
        Objects.equals(this.nodeTypes, stackVersionEnterpriseSearchConfig.nodeTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, dockerImage, blacklist, settings, capacityConstraints, compatibleNodeTypes, nodeTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackVersionEnterpriseSearchConfig {\n");
    
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    dockerImage: ").append(toIndentedString(dockerImage)).append("\n");
    sb.append("    blacklist: ").append(toIndentedString(blacklist)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    capacityConstraints: ").append(toIndentedString(capacityConstraints)).append("\n");
    sb.append("    compatibleNodeTypes: ").append(toIndentedString(compatibleNodeTypes)).append("\n");
    sb.append("    nodeTypes: ").append(toIndentedString(nodeTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
