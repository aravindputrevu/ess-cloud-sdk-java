/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.QueryContainer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A query for documents that match boolean combinations of other queries.
 */
@Schema(description = "A query for documents that match boolean combinations of other queries.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class BoolQuery {
  @SerializedName("must")
  private List<QueryContainer> must = null;

  @SerializedName("should")
  private List<QueryContainer> should = null;

  @SerializedName("must_not")
  private List<QueryContainer> mustNot = null;

  @SerializedName("filter")
  private List<QueryContainer> filter = null;

  @SerializedName("minimum_should_match")
  private Integer minimumShouldMatch = null;

  public BoolQuery must(List<QueryContainer> must) {
    this.must = must;
    return this;
  }

  public BoolQuery addMustItem(QueryContainer mustItem) {
    if (this.must == null) {
      this.must = new ArrayList<QueryContainer>();
    }
    this.must.add(mustItem);
    return this;
  }

   /**
   * Get must
   * @return must
  **/
  @Schema(description = "")
  public List<QueryContainer> getMust() {
    return must;
  }

  public void setMust(List<QueryContainer> must) {
    this.must = must;
  }

  public BoolQuery should(List<QueryContainer> should) {
    this.should = should;
    return this;
  }

  public BoolQuery addShouldItem(QueryContainer shouldItem) {
    if (this.should == null) {
      this.should = new ArrayList<QueryContainer>();
    }
    this.should.add(shouldItem);
    return this;
  }

   /**
   * Get should
   * @return should
  **/
  @Schema(description = "")
  public List<QueryContainer> getShould() {
    return should;
  }

  public void setShould(List<QueryContainer> should) {
    this.should = should;
  }

  public BoolQuery mustNot(List<QueryContainer> mustNot) {
    this.mustNot = mustNot;
    return this;
  }

  public BoolQuery addMustNotItem(QueryContainer mustNotItem) {
    if (this.mustNot == null) {
      this.mustNot = new ArrayList<QueryContainer>();
    }
    this.mustNot.add(mustNotItem);
    return this;
  }

   /**
   * Get mustNot
   * @return mustNot
  **/
  @Schema(description = "")
  public List<QueryContainer> getMustNot() {
    return mustNot;
  }

  public void setMustNot(List<QueryContainer> mustNot) {
    this.mustNot = mustNot;
  }

  public BoolQuery filter(List<QueryContainer> filter) {
    this.filter = filter;
    return this;
  }

  public BoolQuery addFilterItem(QueryContainer filterItem) {
    if (this.filter == null) {
      this.filter = new ArrayList<QueryContainer>();
    }
    this.filter.add(filterItem);
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @Schema(description = "")
  public List<QueryContainer> getFilter() {
    return filter;
  }

  public void setFilter(List<QueryContainer> filter) {
    this.filter = filter;
  }

  public BoolQuery minimumShouldMatch(Integer minimumShouldMatch) {
    this.minimumShouldMatch = minimumShouldMatch;
    return this;
  }

   /**
   * The minimum number of optional should clauses to match.
   * @return minimumShouldMatch
  **/
  @Schema(description = "The minimum number of optional should clauses to match.")
  public Integer getMinimumShouldMatch() {
    return minimumShouldMatch;
  }

  public void setMinimumShouldMatch(Integer minimumShouldMatch) {
    this.minimumShouldMatch = minimumShouldMatch;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoolQuery boolQuery = (BoolQuery) o;
    return Objects.equals(this.must, boolQuery.must) &&
        Objects.equals(this.should, boolQuery.should) &&
        Objects.equals(this.mustNot, boolQuery.mustNot) &&
        Objects.equals(this.filter, boolQuery.filter) &&
        Objects.equals(this.minimumShouldMatch, boolQuery.minimumShouldMatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(must, should, mustNot, filter, minimumShouldMatch);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoolQuery {\n");
    
    sb.append("    must: ").append(toIndentedString(must)).append("\n");
    sb.append("    should: ").append(toIndentedString(should)).append("\n");
    sb.append("    mustNot: ").append(toIndentedString(mustNot)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    minimumShouldMatch: ").append(toIndentedString(minimumShouldMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
