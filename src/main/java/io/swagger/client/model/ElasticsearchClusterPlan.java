/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DeploymentTemplateReference;
import io.swagger.client.model.ElasticsearchClusterTopologyElement;
import io.swagger.client.model.ElasticsearchConfiguration;
import io.swagger.client.model.TiebreakerTopologyElement;
import io.swagger.client.model.TransientElasticsearchPlanConfiguration;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * The plan for the Elasticsearch cluster.
 */
@Schema(description = "The plan for the Elasticsearch cluster.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class ElasticsearchClusterPlan {
  @SerializedName("zone_count")
  private Integer zoneCount = null;

  @SerializedName("tiebreaker_override")
  private Boolean tiebreakerOverride = null;

  @SerializedName("tiebreaker_topology")
  private TiebreakerTopologyElement tiebreakerTopology = null;

  @SerializedName("cluster_topology")
  private List<ElasticsearchClusterTopologyElement> clusterTopology = new ArrayList<ElasticsearchClusterTopologyElement>();

  @SerializedName("elasticsearch")
  private ElasticsearchConfiguration elasticsearch = null;

  @SerializedName("deployment_template")
  private DeploymentTemplateReference deploymentTemplate = null;

  @SerializedName("transient")
  private TransientElasticsearchPlanConfiguration _transient = null;

  public ElasticsearchClusterPlan zoneCount(Integer zoneCount) {
    this.zoneCount = zoneCount;
    return this;
  }

   /**
   * DEPRECATED: Scheduled for removal in a future version of the API. Please use &#x60;cluster_topology.zone_count&#x60; instead.  The default number of zones in which data nodes will be placed, if not specified in the per topology settings
   * @return zoneCount
  **/
  @Schema(description = "DEPRECATED: Scheduled for removal in a future version of the API. Please use `cluster_topology.zone_count` instead.  The default number of zones in which data nodes will be placed, if not specified in the per topology settings")
  public Integer getZoneCount() {
    return zoneCount;
  }

  public void setZoneCount(Integer zoneCount) {
    this.zoneCount = zoneCount;
  }

  public ElasticsearchClusterPlan tiebreakerOverride(Boolean tiebreakerOverride) {
    this.tiebreakerOverride = tiebreakerOverride;
    return this;
  }

   /**
   * DEPRECATED: Scheduled for removal in a future version of the API.  Whether to add a tiebreaker node in an unused zone (defaults to auto-decide based on topology). If master nodes are specified then this cannot be left blank, you must explicitly decide true or false.
   * @return tiebreakerOverride
  **/
  @Schema(description = "DEPRECATED: Scheduled for removal in a future version of the API.  Whether to add a tiebreaker node in an unused zone (defaults to auto-decide based on topology). If master nodes are specified then this cannot be left blank, you must explicitly decide true or false.")
  public Boolean isTiebreakerOverride() {
    return tiebreakerOverride;
  }

  public void setTiebreakerOverride(Boolean tiebreakerOverride) {
    this.tiebreakerOverride = tiebreakerOverride;
  }

  public ElasticsearchClusterPlan tiebreakerTopology(TiebreakerTopologyElement tiebreakerTopology) {
    this.tiebreakerTopology = tiebreakerTopology;
    return this;
  }

   /**
   * Get tiebreakerTopology
   * @return tiebreakerTopology
  **/
  @Schema(description = "")
  public TiebreakerTopologyElement getTiebreakerTopology() {
    return tiebreakerTopology;
  }

  public void setTiebreakerTopology(TiebreakerTopologyElement tiebreakerTopology) {
    this.tiebreakerTopology = tiebreakerTopology;
  }

  public ElasticsearchClusterPlan clusterTopology(List<ElasticsearchClusterTopologyElement> clusterTopology) {
    this.clusterTopology = clusterTopology;
    return this;
  }

  public ElasticsearchClusterPlan addClusterTopologyItem(ElasticsearchClusterTopologyElement clusterTopologyItem) {
    this.clusterTopology.add(clusterTopologyItem);
    return this;
  }

   /**
   * Get clusterTopology
   * @return clusterTopology
  **/
  @Schema(required = true, description = "")
  public List<ElasticsearchClusterTopologyElement> getClusterTopology() {
    return clusterTopology;
  }

  public void setClusterTopology(List<ElasticsearchClusterTopologyElement> clusterTopology) {
    this.clusterTopology = clusterTopology;
  }

  public ElasticsearchClusterPlan elasticsearch(ElasticsearchConfiguration elasticsearch) {
    this.elasticsearch = elasticsearch;
    return this;
  }

   /**
   * Get elasticsearch
   * @return elasticsearch
  **/
  @Schema(required = true, description = "")
  public ElasticsearchConfiguration getElasticsearch() {
    return elasticsearch;
  }

  public void setElasticsearch(ElasticsearchConfiguration elasticsearch) {
    this.elasticsearch = elasticsearch;
  }

  public ElasticsearchClusterPlan deploymentTemplate(DeploymentTemplateReference deploymentTemplate) {
    this.deploymentTemplate = deploymentTemplate;
    return this;
  }

   /**
   * Get deploymentTemplate
   * @return deploymentTemplate
  **/
  @Schema(description = "")
  public DeploymentTemplateReference getDeploymentTemplate() {
    return deploymentTemplate;
  }

  public void setDeploymentTemplate(DeploymentTemplateReference deploymentTemplate) {
    this.deploymentTemplate = deploymentTemplate;
  }

  public ElasticsearchClusterPlan _transient(TransientElasticsearchPlanConfiguration _transient) {
    this._transient = _transient;
    return this;
  }

   /**
   * Get _transient
   * @return _transient
  **/
  @Schema(description = "")
  public TransientElasticsearchPlanConfiguration getTransient() {
    return _transient;
  }

  public void setTransient(TransientElasticsearchPlanConfiguration _transient) {
    this._transient = _transient;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticsearchClusterPlan elasticsearchClusterPlan = (ElasticsearchClusterPlan) o;
    return Objects.equals(this.zoneCount, elasticsearchClusterPlan.zoneCount) &&
        Objects.equals(this.tiebreakerOverride, elasticsearchClusterPlan.tiebreakerOverride) &&
        Objects.equals(this.tiebreakerTopology, elasticsearchClusterPlan.tiebreakerTopology) &&
        Objects.equals(this.clusterTopology, elasticsearchClusterPlan.clusterTopology) &&
        Objects.equals(this.elasticsearch, elasticsearchClusterPlan.elasticsearch) &&
        Objects.equals(this.deploymentTemplate, elasticsearchClusterPlan.deploymentTemplate) &&
        Objects.equals(this._transient, elasticsearchClusterPlan._transient);
  }

  @Override
  public int hashCode() {
    return Objects.hash(zoneCount, tiebreakerOverride, tiebreakerTopology, clusterTopology, elasticsearch, deploymentTemplate, _transient);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticsearchClusterPlan {\n");
    
    sb.append("    zoneCount: ").append(toIndentedString(zoneCount)).append("\n");
    sb.append("    tiebreakerOverride: ").append(toIndentedString(tiebreakerOverride)).append("\n");
    sb.append("    tiebreakerTopology: ").append(toIndentedString(tiebreakerTopology)).append("\n");
    sb.append("    clusterTopology: ").append(toIndentedString(clusterTopology)).append("\n");
    sb.append("    elasticsearch: ").append(toIndentedString(elasticsearch)).append("\n");
    sb.append("    deploymentTemplate: ").append(toIndentedString(deploymentTemplate)).append("\n");
    sb.append("    _transient: ").append(toIndentedString(_transient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
