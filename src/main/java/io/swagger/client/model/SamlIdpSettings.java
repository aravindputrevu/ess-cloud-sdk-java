/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The configuration for the Elasticsearch security SAML Identity Provider.
 */
@Schema(description = "The configuration for the Elasticsearch security SAML Identity Provider.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class SamlIdpSettings {
  @SerializedName("entity_id")
  private String entityId = null;

  @SerializedName("metadata_path")
  private String metadataPath = null;

  @SerializedName("use_single_logout")
  private Boolean useSingleLogout = null;

  public SamlIdpSettings entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

   /**
   * The Entity ID of the SAML Identity Provider. An Entity ID is a URI with a maximum length of 1024 characters. It can be a URL or a URN and can be found in the configuration or the SAML metadata of the Identity Provider.
   * @return entityId
  **/
  @Schema(required = true, description = "The Entity ID of the SAML Identity Provider. An Entity ID is a URI with a maximum length of 1024 characters. It can be a URL or a URN and can be found in the configuration or the SAML metadata of the Identity Provider.")
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }

  public SamlIdpSettings metadataPath(String metadataPath) {
    this.metadataPath = metadataPath;
    return this;
  }

   /**
   * The URL to a SAML 2.0 metadata file describing the capabilities and configuration of the Identity Provider
   * @return metadataPath
  **/
  @Schema(required = true, description = "The URL to a SAML 2.0 metadata file describing the capabilities and configuration of the Identity Provider")
  public String getMetadataPath() {
    return metadataPath;
  }

  public void setMetadataPath(String metadataPath) {
    this.metadataPath = metadataPath;
  }

  public SamlIdpSettings useSingleLogout(Boolean useSingleLogout) {
    this.useSingleLogout = useSingleLogout;
    return this;
  }

   /**
   * Indicates whether to utilise the Identity Provider&#x27;s Single Logout service
   * @return useSingleLogout
  **/
  @Schema(description = "Indicates whether to utilise the Identity Provider's Single Logout service")
  public Boolean isUseSingleLogout() {
    return useSingleLogout;
  }

  public void setUseSingleLogout(Boolean useSingleLogout) {
    this.useSingleLogout = useSingleLogout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SamlIdpSettings samlIdpSettings = (SamlIdpSettings) o;
    return Objects.equals(this.entityId, samlIdpSettings.entityId) &&
        Objects.equals(this.metadataPath, samlIdpSettings.metadataPath) &&
        Objects.equals(this.useSingleLogout, samlIdpSettings.useSingleLogout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, metadataPath, useSingleLogout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SamlIdpSettings {\n");
    
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    metadataPath: ").append(toIndentedString(metadataPath)).append("\n");
    sb.append("    useSingleLogout: ").append(toIndentedString(useSingleLogout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
