/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ProxiesSSOSettings;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The HTTP settings for all proxies.
 */
@Schema(description = "The HTTP settings for all proxies.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class ProxiesHttpSettings {
  @SerializedName("disconnected_cutoff")
  private Long disconnectedCutoff = null;

  @SerializedName("minimum_proxy_services")
  private Integer minimumProxyServices = null;

  @SerializedName("sso_settings")
  private ProxiesSSOSettings ssoSettings = null;

  @SerializedName("dashboards_base_url")
  private String dashboardsBaseUrl = null;

  @SerializedName("cookie_secret")
  private String cookieSecret = null;

  @SerializedName("user_cookie_key")
  private String userCookieKey = null;

  public ProxiesHttpSettings disconnectedCutoff(Long disconnectedCutoff) {
    this.disconnectedCutoff = disconnectedCutoff;
    return this;
  }

   /**
   * Cutoff interval after disconnection in milliseconds
   * @return disconnectedCutoff
  **/
  @Schema(required = true, description = "Cutoff interval after disconnection in milliseconds")
  public Long getDisconnectedCutoff() {
    return disconnectedCutoff;
  }

  public void setDisconnectedCutoff(Long disconnectedCutoff) {
    this.disconnectedCutoff = disconnectedCutoff;
  }

  public ProxiesHttpSettings minimumProxyServices(Integer minimumProxyServices) {
    this.minimumProxyServices = minimumProxyServices;
    return this;
  }

   /**
   * Minimum number of proxy instances
   * @return minimumProxyServices
  **/
  @Schema(required = true, description = "Minimum number of proxy instances")
  public Integer getMinimumProxyServices() {
    return minimumProxyServices;
  }

  public void setMinimumProxyServices(Integer minimumProxyServices) {
    this.minimumProxyServices = minimumProxyServices;
  }

  public ProxiesHttpSettings ssoSettings(ProxiesSSOSettings ssoSettings) {
    this.ssoSettings = ssoSettings;
    return this;
  }

   /**
   * Get ssoSettings
   * @return ssoSettings
  **/
  @Schema(required = true, description = "")
  public ProxiesSSOSettings getSsoSettings() {
    return ssoSettings;
  }

  public void setSsoSettings(ProxiesSSOSettings ssoSettings) {
    this.ssoSettings = ssoSettings;
  }

  public ProxiesHttpSettings dashboardsBaseUrl(String dashboardsBaseUrl) {
    this.dashboardsBaseUrl = dashboardsBaseUrl;
    return this;
  }

   /**
   * Base URL for the dashboard
   * @return dashboardsBaseUrl
  **/
  @Schema(required = true, description = "Base URL for the dashboard")
  public String getDashboardsBaseUrl() {
    return dashboardsBaseUrl;
  }

  public void setDashboardsBaseUrl(String dashboardsBaseUrl) {
    this.dashboardsBaseUrl = dashboardsBaseUrl;
  }

  public ProxiesHttpSettings cookieSecret(String cookieSecret) {
    this.cookieSecret = cookieSecret;
    return this;
  }

   /**
   * Secret string for the HTTP cookie
   * @return cookieSecret
  **/
  @Schema(required = true, description = "Secret string for the HTTP cookie")
  public String getCookieSecret() {
    return cookieSecret;
  }

  public void setCookieSecret(String cookieSecret) {
    this.cookieSecret = cookieSecret;
  }

  public ProxiesHttpSettings userCookieKey(String userCookieKey) {
    this.userCookieKey = userCookieKey;
    return this;
  }

   /**
   * User key for the HTTP cookie
   * @return userCookieKey
  **/
  @Schema(required = true, description = "User key for the HTTP cookie")
  public String getUserCookieKey() {
    return userCookieKey;
  }

  public void setUserCookieKey(String userCookieKey) {
    this.userCookieKey = userCookieKey;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxiesHttpSettings proxiesHttpSettings = (ProxiesHttpSettings) o;
    return Objects.equals(this.disconnectedCutoff, proxiesHttpSettings.disconnectedCutoff) &&
        Objects.equals(this.minimumProxyServices, proxiesHttpSettings.minimumProxyServices) &&
        Objects.equals(this.ssoSettings, proxiesHttpSettings.ssoSettings) &&
        Objects.equals(this.dashboardsBaseUrl, proxiesHttpSettings.dashboardsBaseUrl) &&
        Objects.equals(this.cookieSecret, proxiesHttpSettings.cookieSecret) &&
        Objects.equals(this.userCookieKey, proxiesHttpSettings.userCookieKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disconnectedCutoff, minimumProxyServices, ssoSettings, dashboardsBaseUrl, cookieSecret, userCookieKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxiesHttpSettings {\n");
    
    sb.append("    disconnectedCutoff: ").append(toIndentedString(disconnectedCutoff)).append("\n");
    sb.append("    minimumProxyServices: ").append(toIndentedString(minimumProxyServices)).append("\n");
    sb.append("    ssoSettings: ").append(toIndentedString(ssoSettings)).append("\n");
    sb.append("    dashboardsBaseUrl: ").append(toIndentedString(dashboardsBaseUrl)).append("\n");
    sb.append("    cookieSecret: ").append(toIndentedString(cookieSecret)).append("\n");
    sb.append("    userCookieKey: ").append(toIndentedString(userCookieKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
