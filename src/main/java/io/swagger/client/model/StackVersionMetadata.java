/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The metadata for the Elastic Stack.
 */
@Schema(description = "The metadata for the Elastic Stack.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class StackVersionMetadata {
  @SerializedName("notes")
  private String notes = null;

  @SerializedName("pre_release")
  private Boolean preRelease = null;

  @SerializedName("min_platform_version")
  private String minPlatformVersion = null;

  @SerializedName("schema_version")
  private Integer schemaVersion = null;

  public StackVersionMetadata notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Notes for administrator
   * @return notes
  **/
  @Schema(description = "Notes for administrator")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public StackVersionMetadata preRelease(Boolean preRelease) {
    this.preRelease = preRelease;
    return this;
  }

   /**
   * Indicates that the stack pack version is not GA and is not supposed to be used in production
   * @return preRelease
  **/
  @Schema(description = "Indicates that the stack pack version is not GA and is not supposed to be used in production")
  public Boolean isPreRelease() {
    return preRelease;
  }

  public void setPreRelease(Boolean preRelease) {
    this.preRelease = preRelease;
  }

  public StackVersionMetadata minPlatformVersion(String minPlatformVersion) {
    this.minPlatformVersion = minPlatformVersion;
    return this;
  }

   /**
   * The minimum version of the platform that the stack pack version is compatible with
   * @return minPlatformVersion
  **/
  @Schema(description = "The minimum version of the platform that the stack pack version is compatible with")
  public String getMinPlatformVersion() {
    return minPlatformVersion;
  }

  public void setMinPlatformVersion(String minPlatformVersion) {
    this.minPlatformVersion = minPlatformVersion;
  }

  public StackVersionMetadata schemaVersion(Integer schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

   /**
   * The schema version of the stack pack version
   * @return schemaVersion
  **/
  @Schema(description = "The schema version of the stack pack version")
  public Integer getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(Integer schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackVersionMetadata stackVersionMetadata = (StackVersionMetadata) o;
    return Objects.equals(this.notes, stackVersionMetadata.notes) &&
        Objects.equals(this.preRelease, stackVersionMetadata.preRelease) &&
        Objects.equals(this.minPlatformVersion, stackVersionMetadata.minPlatformVersion) &&
        Objects.equals(this.schemaVersion, stackVersionMetadata.schemaVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notes, preRelease, minPlatformVersion, schemaVersion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackVersionMetadata {\n");
    
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    preRelease: ").append(toIndentedString(preRelease)).append("\n");
    sb.append("    minPlatformVersion: ").append(toIndentedString(minPlatformVersion)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
