/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AppSearchPlansInfo;
import io.swagger.client.model.AppSearchSettings;
import io.swagger.client.model.ClusterMetadataInfo;
import io.swagger.client.model.ClusterTopologyInfo;
import io.swagger.client.model.ExternalHyperlink;
import io.swagger.client.model.Hyperlink;
import io.swagger.client.model.TargetElasticsearchCluster;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * The overview information for the App Search Server.
 */
@Schema(description = "The overview information for the App Search Server.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class AppSearchInfo {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("elasticsearch_cluster")
  private TargetElasticsearchCluster elasticsearchCluster = null;

  @SerializedName("deployment_id")
  private String deploymentId = null;

  @SerializedName("healthy")
  private Boolean healthy = null;

  /**
   * App Search status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INITIALIZING("initializing"),
    STOPPING("stopping"),
    STOPPED("stopped"),
    REBOOTING("rebooting"),
    RESTARTING("restarting"),
    RECONFIGURING("reconfiguring"),
    STARTED("started");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("plan_info")
  private AppSearchPlansInfo planInfo = null;

  @SerializedName("metadata")
  private ClusterMetadataInfo metadata = null;

  @SerializedName("topology")
  private ClusterTopologyInfo topology = null;

  @SerializedName("external_links")
  private List<ExternalHyperlink> externalLinks = new ArrayList<ExternalHyperlink>();

  @SerializedName("links")
  private Map<String, Hyperlink> links = null;

  @SerializedName("settings")
  private AppSearchSettings settings = null;

  @SerializedName("region")
  private String region = null;

  public AppSearchInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the App Search
   * @return id
  **/
  @Schema(required = true, description = "The id of the App Search")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public AppSearchInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the App Search
   * @return name
  **/
  @Schema(required = true, description = "The name of the App Search")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AppSearchInfo elasticsearchCluster(TargetElasticsearchCluster elasticsearchCluster) {
    this.elasticsearchCluster = elasticsearchCluster;
    return this;
  }

   /**
   * Get elasticsearchCluster
   * @return elasticsearchCluster
  **/
  @Schema(required = true, description = "")
  public TargetElasticsearchCluster getElasticsearchCluster() {
    return elasticsearchCluster;
  }

  public void setElasticsearchCluster(TargetElasticsearchCluster elasticsearchCluster) {
    this.elasticsearchCluster = elasticsearchCluster;
  }

  public AppSearchInfo deploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
    return this;
  }

   /**
   * The id of the deployment to which this App Search belongs to.
   * @return deploymentId
  **/
  @Schema(description = "The id of the deployment to which this App Search belongs to.")
  public String getDeploymentId() {
    return deploymentId;
  }

  public void setDeploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
  }

  public AppSearchInfo healthy(Boolean healthy) {
    this.healthy = healthy;
    return this;
  }

   /**
   * Whether the App Search is healthy or not (one or more of the info subsections will have healthy: false)
   * @return healthy
  **/
  @Schema(required = true, description = "Whether the App Search is healthy or not (one or more of the info subsections will have healthy: false)")
  public Boolean isHealthy() {
    return healthy;
  }

  public void setHealthy(Boolean healthy) {
    this.healthy = healthy;
  }

   /**
   * App Search status
   * @return status
  **/
  @Schema(description = "App Search status")
  public StatusEnum getStatus() {
    return status;
  }

  public AppSearchInfo planInfo(AppSearchPlansInfo planInfo) {
    this.planInfo = planInfo;
    return this;
  }

   /**
   * Get planInfo
   * @return planInfo
  **/
  @Schema(required = true, description = "")
  public AppSearchPlansInfo getPlanInfo() {
    return planInfo;
  }

  public void setPlanInfo(AppSearchPlansInfo planInfo) {
    this.planInfo = planInfo;
  }

  public AppSearchInfo metadata(ClusterMetadataInfo metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @Schema(description = "")
  public ClusterMetadataInfo getMetadata() {
    return metadata;
  }

  public void setMetadata(ClusterMetadataInfo metadata) {
    this.metadata = metadata;
  }

  public AppSearchInfo topology(ClusterTopologyInfo topology) {
    this.topology = topology;
    return this;
  }

   /**
   * Get topology
   * @return topology
  **/
  @Schema(required = true, description = "")
  public ClusterTopologyInfo getTopology() {
    return topology;
  }

  public void setTopology(ClusterTopologyInfo topology) {
    this.topology = topology;
  }

  public AppSearchInfo externalLinks(List<ExternalHyperlink> externalLinks) {
    this.externalLinks = externalLinks;
    return this;
  }

  public AppSearchInfo addExternalLinksItem(ExternalHyperlink externalLinksItem) {
    this.externalLinks.add(externalLinksItem);
    return this;
  }

   /**
   * External resources related to the App Search
   * @return externalLinks
  **/
  @Schema(required = true, description = "External resources related to the App Search")
  public List<ExternalHyperlink> getExternalLinks() {
    return externalLinks;
  }

  public void setExternalLinks(List<ExternalHyperlink> externalLinks) {
    this.externalLinks = externalLinks;
  }

  public AppSearchInfo links(Map<String, Hyperlink> links) {
    this.links = links;
    return this;
  }

  public AppSearchInfo putLinksItem(String key, Hyperlink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<String, Hyperlink>();
    }
    this.links.put(key, linksItem);
    return this;
  }

   /**
   * A map of application-specific operations (which map to &#x27;operationId&#x27;s in the Swagger API) to metadata about that operation
   * @return links
  **/
  @Schema(description = "A map of application-specific operations (which map to 'operationId's in the Swagger API) to metadata about that operation")
  public Map<String, Hyperlink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, Hyperlink> links) {
    this.links = links;
  }

  public AppSearchInfo settings(AppSearchSettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @Schema(description = "")
  public AppSearchSettings getSettings() {
    return settings;
  }

  public void setSettings(AppSearchSettings settings) {
    this.settings = settings;
  }

  public AppSearchInfo region(String region) {
    this.region = region;
    return this;
  }

   /**
   * The region that this App Search belongs to. Only populated in SaaS or federated ECE.
   * @return region
  **/
  @Schema(description = "The region that this App Search belongs to. Only populated in SaaS or federated ECE.")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppSearchInfo appSearchInfo = (AppSearchInfo) o;
    return Objects.equals(this.id, appSearchInfo.id) &&
        Objects.equals(this.name, appSearchInfo.name) &&
        Objects.equals(this.elasticsearchCluster, appSearchInfo.elasticsearchCluster) &&
        Objects.equals(this.deploymentId, appSearchInfo.deploymentId) &&
        Objects.equals(this.healthy, appSearchInfo.healthy) &&
        Objects.equals(this.status, appSearchInfo.status) &&
        Objects.equals(this.planInfo, appSearchInfo.planInfo) &&
        Objects.equals(this.metadata, appSearchInfo.metadata) &&
        Objects.equals(this.topology, appSearchInfo.topology) &&
        Objects.equals(this.externalLinks, appSearchInfo.externalLinks) &&
        Objects.equals(this.links, appSearchInfo.links) &&
        Objects.equals(this.settings, appSearchInfo.settings) &&
        Objects.equals(this.region, appSearchInfo.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, elasticsearchCluster, deploymentId, healthy, status, planInfo, metadata, topology, externalLinks, links, settings, region);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppSearchInfo {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    elasticsearchCluster: ").append(toIndentedString(elasticsearchCluster)).append("\n");
    sb.append("    deploymentId: ").append(toIndentedString(deploymentId)).append("\n");
    sb.append("    healthy: ").append(toIndentedString(healthy)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    planInfo: ").append(toIndentedString(planInfo)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    topology: ").append(toIndentedString(topology)).append("\n");
    sb.append("    externalLinks: ").append(toIndentedString(externalLinks)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
