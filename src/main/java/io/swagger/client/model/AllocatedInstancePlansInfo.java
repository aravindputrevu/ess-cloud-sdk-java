/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The plan information for the Elasticsearch cluster associated with the Kibana instance or APM Server.
 */
@Schema(description = "The plan information for the Elasticsearch cluster associated with the Kibana instance or APM Server.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class AllocatedInstancePlansInfo {
  @SerializedName("pending")
  private Boolean pending = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("zone_count")
  private Integer zoneCount = null;

  public AllocatedInstancePlansInfo pending(Boolean pending) {
    this.pending = pending;
    return this;
  }

   /**
   * Whether or not there is a pending plan.
   * @return pending
  **/
  @Schema(required = true, description = "Whether or not there is a pending plan.")
  public Boolean isPending() {
    return pending;
  }

  public void setPending(Boolean pending) {
    this.pending = pending;
  }

  public AllocatedInstancePlansInfo version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the current plan, falling back to that of the pending plan if it exists.
   * @return version
  **/
  @Schema(description = "The version of the current plan, falling back to that of the pending plan if it exists.")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public AllocatedInstancePlansInfo zoneCount(Integer zoneCount) {
    this.zoneCount = zoneCount;
    return this;
  }

   /**
   * The number of zones in the current plan, falling back to that of the pending plan if it exists.
   * @return zoneCount
  **/
  @Schema(description = "The number of zones in the current plan, falling back to that of the pending plan if it exists.")
  public Integer getZoneCount() {
    return zoneCount;
  }

  public void setZoneCount(Integer zoneCount) {
    this.zoneCount = zoneCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllocatedInstancePlansInfo allocatedInstancePlansInfo = (AllocatedInstancePlansInfo) o;
    return Objects.equals(this.pending, allocatedInstancePlansInfo.pending) &&
        Objects.equals(this.version, allocatedInstancePlansInfo.version) &&
        Objects.equals(this.zoneCount, allocatedInstancePlansInfo.zoneCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pending, version, zoneCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllocatedInstancePlansInfo {\n");
    
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    zoneCount: ").append(toIndentedString(zoneCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
