/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ElevatedPermissions;
import io.swagger.client.model.UserSecurityRealm;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A user&#x27;s security information
 */
@Schema(description = "A user's security information")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class UserSecurity {
  @SerializedName("roles")
  private List<String> roles = null;

  @SerializedName("permissions")
  private List<String> permissions = null;

  @SerializedName("elevated_permissions")
  private ElevatedPermissions elevatedPermissions = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("security_realm")
  private UserSecurityRealm securityRealm = null;

  public UserSecurity roles(List<String> roles) {
    this.roles = roles;
    return this;
  }

  public UserSecurity addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<String>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * The set of roles assigned to a user
   * @return roles
  **/
  @Schema(description = "The set of roles assigned to a user")
  public List<String> getRoles() {
    return roles;
  }

  public void setRoles(List<String> roles) {
    this.roles = roles;
  }

  public UserSecurity permissions(List<String> permissions) {
    this.permissions = permissions;
    return this;
  }

  public UserSecurity addPermissionsItem(String permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<String>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * The distinct set of permissions allowed by the user&#x27;s roles. These correspond to operationId values in the OpenAPI definition.
   * @return permissions
  **/
  @Schema(description = "The distinct set of permissions allowed by the user's roles. These correspond to operationId values in the OpenAPI definition.")
  public List<String> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<String> permissions) {
    this.permissions = permissions;
  }

  public UserSecurity elevatedPermissions(ElevatedPermissions elevatedPermissions) {
    this.elevatedPermissions = elevatedPermissions;
    return this;
  }

   /**
   * Get elevatedPermissions
   * @return elevatedPermissions
  **/
  @Schema(description = "")
  public ElevatedPermissions getElevatedPermissions() {
    return elevatedPermissions;
  }

  public void setElevatedPermissions(ElevatedPermissions elevatedPermissions) {
    this.elevatedPermissions = elevatedPermissions;
  }

  public UserSecurity password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The user&#x27;s password. Only used when modifying a user.
   * @return password
  **/
  @Schema(description = "The user's password. Only used when modifying a user.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public UserSecurity enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * True if the user is enabled
   * @return enabled
  **/
  @Schema(description = "True if the user is enabled")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public UserSecurity securityRealm(UserSecurityRealm securityRealm) {
    this.securityRealm = securityRealm;
    return this;
  }

   /**
   * Get securityRealm
   * @return securityRealm
  **/
  @Schema(description = "")
  public UserSecurityRealm getSecurityRealm() {
    return securityRealm;
  }

  public void setSecurityRealm(UserSecurityRealm securityRealm) {
    this.securityRealm = securityRealm;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSecurity userSecurity = (UserSecurity) o;
    return Objects.equals(this.roles, userSecurity.roles) &&
        Objects.equals(this.permissions, userSecurity.permissions) &&
        Objects.equals(this.elevatedPermissions, userSecurity.elevatedPermissions) &&
        Objects.equals(this.password, userSecurity.password) &&
        Objects.equals(this.enabled, userSecurity.enabled) &&
        Objects.equals(this.securityRealm, userSecurity.securityRealm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roles, permissions, elevatedPermissions, password, enabled, securityRealm);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSecurity {\n");
    
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    elevatedPermissions: ").append(toIndentedString(elevatedPermissions)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    securityRealm: ").append(toIndentedString(securityRealm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
