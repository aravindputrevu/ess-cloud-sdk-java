/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ElasticsearchReplicaElement;
import io.swagger.client.model.ElasticsearchShardElement;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Information about the shards and replicas that comprise the Elasticsearch indices.
 */
@Schema(description = "Information about the shards and replicas that comprise the Elasticsearch indices.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-10T16:33:30.970+05:30[Asia/Kolkata]")
public class ElasticsearchShardsInfo {
  @SerializedName("healthy")
  private Boolean healthy = null;

  @SerializedName("available_shards")
  private List<ElasticsearchShardElement> availableShards = new ArrayList<ElasticsearchShardElement>();

  @SerializedName("unavailable_shards")
  private List<ElasticsearchShardElement> unavailableShards = new ArrayList<ElasticsearchShardElement>();

  @SerializedName("unavailable_replicas")
  private List<ElasticsearchReplicaElement> unavailableReplicas = new ArrayList<ElasticsearchReplicaElement>();

  public ElasticsearchShardsInfo healthy(Boolean healthy) {
    this.healthy = healthy;
    return this;
  }

   /**
   * Whether the shard situation is healthy (any unavailable shards is unhealthy)
   * @return healthy
  **/
  @Schema(required = true, description = "Whether the shard situation is healthy (any unavailable shards is unhealthy)")
  public Boolean isHealthy() {
    return healthy;
  }

  public void setHealthy(Boolean healthy) {
    this.healthy = healthy;
  }

  public ElasticsearchShardsInfo availableShards(List<ElasticsearchShardElement> availableShards) {
    this.availableShards = availableShards;
    return this;
  }

  public ElasticsearchShardsInfo addAvailableShardsItem(ElasticsearchShardElement availableShardsItem) {
    this.availableShards.add(availableShardsItem);
    return this;
  }

   /**
   * Get availableShards
   * @return availableShards
  **/
  @Schema(required = true, description = "")
  public List<ElasticsearchShardElement> getAvailableShards() {
    return availableShards;
  }

  public void setAvailableShards(List<ElasticsearchShardElement> availableShards) {
    this.availableShards = availableShards;
  }

  public ElasticsearchShardsInfo unavailableShards(List<ElasticsearchShardElement> unavailableShards) {
    this.unavailableShards = unavailableShards;
    return this;
  }

  public ElasticsearchShardsInfo addUnavailableShardsItem(ElasticsearchShardElement unavailableShardsItem) {
    this.unavailableShards.add(unavailableShardsItem);
    return this;
  }

   /**
   * Get unavailableShards
   * @return unavailableShards
  **/
  @Schema(required = true, description = "")
  public List<ElasticsearchShardElement> getUnavailableShards() {
    return unavailableShards;
  }

  public void setUnavailableShards(List<ElasticsearchShardElement> unavailableShards) {
    this.unavailableShards = unavailableShards;
  }

  public ElasticsearchShardsInfo unavailableReplicas(List<ElasticsearchReplicaElement> unavailableReplicas) {
    this.unavailableReplicas = unavailableReplicas;
    return this;
  }

  public ElasticsearchShardsInfo addUnavailableReplicasItem(ElasticsearchReplicaElement unavailableReplicasItem) {
    this.unavailableReplicas.add(unavailableReplicasItem);
    return this;
  }

   /**
   * Get unavailableReplicas
   * @return unavailableReplicas
  **/
  @Schema(required = true, description = "")
  public List<ElasticsearchReplicaElement> getUnavailableReplicas() {
    return unavailableReplicas;
  }

  public void setUnavailableReplicas(List<ElasticsearchReplicaElement> unavailableReplicas) {
    this.unavailableReplicas = unavailableReplicas;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticsearchShardsInfo elasticsearchShardsInfo = (ElasticsearchShardsInfo) o;
    return Objects.equals(this.healthy, elasticsearchShardsInfo.healthy) &&
        Objects.equals(this.availableShards, elasticsearchShardsInfo.availableShards) &&
        Objects.equals(this.unavailableShards, elasticsearchShardsInfo.unavailableShards) &&
        Objects.equals(this.unavailableReplicas, elasticsearchShardsInfo.unavailableReplicas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthy, availableShards, unavailableShards, unavailableReplicas);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticsearchShardsInfo {\n");
    
    sb.append("    healthy: ").append(toIndentedString(healthy)).append("\n");
    sb.append("    availableShards: ").append(toIndentedString(availableShards)).append("\n");
    sb.append("    unavailableShards: ").append(toIndentedString(unavailableShards)).append("\n");
    sb.append("    unavailableReplicas: ").append(toIndentedString(unavailableReplicas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
