/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.Comment;
import io.swagger.client.model.CommentCreateRequest;
import io.swagger.client.model.CommentUpdateRequest;
import io.swagger.client.model.CommentsWithMetas;
import io.swagger.client.model.EmptyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommentsApi {
    private ApiClient apiClient;

    public CommentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createComment
     * @param body Data for comment creation (required)
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCommentCall(CommentCreateRequest body, String resourceType, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/comments/{resource_type}/{resource_id}"
            .replaceAll("\\{" + "resource_type" + "\\}", apiClient.escapeString(resourceType.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCommentValidateBeforeCall(CommentCreateRequest body, String resourceType, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createComment(Async)");
        }
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling createComment(Async)");
        }
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling createComment(Async)");
        }
        
        com.squareup.okhttp.Call call = createCommentCall(body, resourceType, resourceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Comment
     * Creates a comment for the given Resource.
     * @param body Data for comment creation (required)
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Comment createComment(CommentCreateRequest body, String resourceType, String resourceId) throws ApiException {
        ApiResponse<Comment> resp = createCommentWithHttpInfo(body, resourceType, resourceId);
        return resp.getData();
    }

    /**
     * Create a Comment
     * Creates a comment for the given Resource.
     * @param body Data for comment creation (required)
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Comment> createCommentWithHttpInfo(CommentCreateRequest body, String resourceType, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = createCommentValidateBeforeCall(body, resourceType, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Comment (asynchronously)
     * Creates a comment for the given Resource.
     * @param body Data for comment creation (required)
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCommentAsync(CommentCreateRequest body, String resourceType, String resourceId, final ApiCallback<Comment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCommentValidateBeforeCall(body, resourceType, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteComment
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommentCall(String resourceType, String resourceId, String commentId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/comments/{resource_type}/{resource_id}/{comment_id}"
            .replaceAll("\\{" + "resource_type" + "\\}", apiClient.escapeString(resourceType.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", apiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "comment_id" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommentValidateBeforeCall(String resourceType, String resourceId, String commentId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling deleteComment(Async)");
        }
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling deleteComment(Async)");
        }
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteComment(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteCommentCall(resourceType, resourceId, commentId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Comment
     * Deletes a Comment.
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteComment(String resourceType, String resourceId, String commentId, Integer version) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteCommentWithHttpInfo(resourceType, resourceId, commentId, version);
        return resp.getData();
    }

    /**
     * Delete Comment
     * Deletes a Comment.
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteCommentWithHttpInfo(String resourceType, String resourceId, String commentId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = deleteCommentValidateBeforeCall(resourceType, resourceId, commentId, version, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Comment (asynchronously)
     * Deletes a Comment.
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCommentAsync(String resourceType, String resourceId, String commentId, Integer version, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentValidateBeforeCall(resourceType, resourceId, commentId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComment
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentCall(String resourceType, String resourceId, String commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/comments/{resource_type}/{resource_id}/{comment_id}"
            .replaceAll("\\{" + "resource_type" + "\\}", apiClient.escapeString(resourceType.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", apiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "comment_id" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentValidateBeforeCall(String resourceType, String resourceId, String commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling getComment(Async)");
        }
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getComment(Async)");
        }
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getComment(Async)");
        }
        
        com.squareup.okhttp.Call call = getCommentCall(resourceType, resourceId, commentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Comment
     * Retrieves a Comment.
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Comment getComment(String resourceType, String resourceId, String commentId) throws ApiException {
        ApiResponse<Comment> resp = getCommentWithHttpInfo(resourceType, resourceId, commentId);
        return resp.getData();
    }

    /**
     * Get Comment
     * Retrieves a Comment.
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Comment> getCommentWithHttpInfo(String resourceType, String resourceId, String commentId) throws ApiException {
        com.squareup.okhttp.Call call = getCommentValidateBeforeCall(resourceType, resourceId, commentId, null, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Comment (asynchronously)
     * Retrieves a Comment.
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommentAsync(String resourceType, String resourceId, String commentId, final ApiCallback<Comment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentValidateBeforeCall(resourceType, resourceId, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listComment
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCommentCall(String resourceType, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/comments/{resource_type}/{resource_id}"
            .replaceAll("\\{" + "resource_type" + "\\}", apiClient.escapeString(resourceType.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCommentValidateBeforeCall(String resourceType, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling listComment(Async)");
        }
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling listComment(Async)");
        }
        
        com.squareup.okhttp.Call call = listCommentCall(resourceType, resourceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Comments
     * Retrieves all the comments for a given Resource, in reverse modified time order.
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @return CommentsWithMetas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentsWithMetas listComment(String resourceType, String resourceId) throws ApiException {
        ApiResponse<CommentsWithMetas> resp = listCommentWithHttpInfo(resourceType, resourceId);
        return resp.getData();
    }

    /**
     * List Comments
     * Retrieves all the comments for a given Resource, in reverse modified time order.
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @return ApiResponse&lt;CommentsWithMetas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentsWithMetas> listCommentWithHttpInfo(String resourceType, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = listCommentValidateBeforeCall(resourceType, resourceId, null, null);
        Type localVarReturnType = new TypeToken<CommentsWithMetas>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Comments (asynchronously)
     * Retrieves all the comments for a given Resource, in reverse modified time order.
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCommentAsync(String resourceType, String resourceId, final ApiCallback<CommentsWithMetas> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCommentValidateBeforeCall(resourceType, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentsWithMetas>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateComment
     * @param body The Comment update data. (required)
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCommentCall(CommentUpdateRequest body, String resourceType, String resourceId, String commentId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/comments/{resource_type}/{resource_id}/{comment_id}"
            .replaceAll("\\{" + "resource_type" + "\\}", apiClient.escapeString(resourceType.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", apiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "comment_id" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCommentValidateBeforeCall(CommentUpdateRequest body, String resourceType, String resourceId, String commentId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateComment(Async)");
        }
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling updateComment(Async)");
        }
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling updateComment(Async)");
        }
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateComment(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCommentCall(body, resourceType, resourceId, commentId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Comment
     * Updates a Comment.
     * @param body The Comment update data. (required)
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Comment updateComment(CommentUpdateRequest body, String resourceType, String resourceId, String commentId, Integer version) throws ApiException {
        ApiResponse<Comment> resp = updateCommentWithHttpInfo(body, resourceType, resourceId, commentId, version);
        return resp.getData();
    }

    /**
     * Update Comment
     * Updates a Comment.
     * @param body The Comment update data. (required)
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Comment> updateCommentWithHttpInfo(CommentUpdateRequest body, String resourceType, String resourceId, String commentId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateCommentValidateBeforeCall(body, resourceType, resourceId, commentId, version, null, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Comment (asynchronously)
     * Updates a Comment.
     * @param body The Comment update data. (required)
     * @param resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprisesearch, sitesearch, allocator, constructor, runner, proxy]. (required)
     * @param resourceId Id of the Resource that a Comment belongs to. (required)
     * @param commentId Id of a Comment (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCommentAsync(CommentUpdateRequest body, String resourceType, String resourceId, String commentId, Integer version, final ApiCallback<Comment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCommentValidateBeforeCall(body, resourceType, resourceId, commentId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
