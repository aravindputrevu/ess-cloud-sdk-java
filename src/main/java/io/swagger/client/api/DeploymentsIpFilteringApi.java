/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.FilterAssociation;
import io.swagger.client.model.IpFilterRuleset;
import io.swagger.client.model.IpFilterRulesets;
import io.swagger.client.model.IpFilteringSettings;
import io.swagger.client.model.RuleSetResponse;
import io.swagger.client.model.RulesetAssociations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeploymentsIpFilteringApi {
    private ApiClient apiClient;

    public DeploymentsIpFilteringApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeploymentsIpFilteringApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createIpFilterRuleset
     * @param body The ruleset definition (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIpFilterRulesetCall(IpFilterRuleset body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments/ip-filtering/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIpFilterRulesetValidateBeforeCall(IpFilterRuleset body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createIpFilterRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = createIpFilterRulesetCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a ruleset
     * Creates a ruleset that combines a set of rules.
     * @param body The ruleset definition (required)
     * @return RuleSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleSetResponse createIpFilterRuleset(IpFilterRuleset body) throws ApiException {
        ApiResponse<RuleSetResponse> resp = createIpFilterRulesetWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a ruleset
     * Creates a ruleset that combines a set of rules.
     * @param body The ruleset definition (required)
     * @return ApiResponse&lt;RuleSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleSetResponse> createIpFilterRulesetWithHttpInfo(IpFilterRuleset body) throws ApiException {
        com.squareup.okhttp.Call call = createIpFilterRulesetValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<RuleSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a ruleset (asynchronously)
     * Creates a ruleset that combines a set of rules.
     * @param body The ruleset definition (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIpFilterRulesetAsync(IpFilterRuleset body, final ApiCallback<RuleSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIpFilterRulesetValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createIpFilterRulesetAssociation
     * @param body Mandatory ruleset association description (required)
     * @param rulesetId Mandatory ruleset ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIpFilterRulesetAssociationCall(FilterAssociation body, String rulesetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments/ip-filtering/rulesets/{ruleset_id}/associations"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIpFilterRulesetAssociationValidateBeforeCall(FilterAssociation body, String rulesetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createIpFilterRulesetAssociation(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling createIpFilterRulesetAssociation(Async)");
        }
        
        com.squareup.okhttp.Call call = createIpFilterRulesetAssociationCall(body, rulesetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create ruleset association
     * Applies the ruleset to the specified deployment.
     * @param body Mandatory ruleset association description (required)
     * @param rulesetId Mandatory ruleset ID (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse createIpFilterRulesetAssociation(FilterAssociation body, String rulesetId) throws ApiException {
        ApiResponse<EmptyResponse> resp = createIpFilterRulesetAssociationWithHttpInfo(body, rulesetId);
        return resp.getData();
    }

    /**
     * Create ruleset association
     * Applies the ruleset to the specified deployment.
     * @param body Mandatory ruleset association description (required)
     * @param rulesetId Mandatory ruleset ID (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> createIpFilterRulesetAssociationWithHttpInfo(FilterAssociation body, String rulesetId) throws ApiException {
        com.squareup.okhttp.Call call = createIpFilterRulesetAssociationValidateBeforeCall(body, rulesetId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create ruleset association (asynchronously)
     * Applies the ruleset to the specified deployment.
     * @param body Mandatory ruleset association description (required)
     * @param rulesetId Mandatory ruleset ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIpFilterRulesetAssociationAsync(FilterAssociation body, String rulesetId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIpFilterRulesetAssociationValidateBeforeCall(body, rulesetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteIpFilterRuleset
     * @param rulesetId The mandatory ruleset ID (required)
     * @param ignoreAssociations When true, ignores the associations and deletes the rule set. When false, recognizes the associations, which prevents the deletion of the rule set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIpFilterRulesetCall(String rulesetId, Boolean ignoreAssociations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/ip-filtering/rulesets/{ruleset_id}"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreAssociations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_associations", ignoreAssociations));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIpFilterRulesetValidateBeforeCall(String rulesetId, Boolean ignoreAssociations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling deleteIpFilterRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteIpFilterRulesetCall(rulesetId, ignoreAssociations, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a ruleset
     * Deletes the ruleset by ID.
     * @param rulesetId The mandatory ruleset ID (required)
     * @param ignoreAssociations When true, ignores the associations and deletes the rule set. When false, recognizes the associations, which prevents the deletion of the rule set. (optional)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteIpFilterRuleset(String rulesetId, Boolean ignoreAssociations) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteIpFilterRulesetWithHttpInfo(rulesetId, ignoreAssociations);
        return resp.getData();
    }

    /**
     * Delete a ruleset
     * Deletes the ruleset by ID.
     * @param rulesetId The mandatory ruleset ID (required)
     * @param ignoreAssociations When true, ignores the associations and deletes the rule set. When false, recognizes the associations, which prevents the deletion of the rule set. (optional)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteIpFilterRulesetWithHttpInfo(String rulesetId, Boolean ignoreAssociations) throws ApiException {
        com.squareup.okhttp.Call call = deleteIpFilterRulesetValidateBeforeCall(rulesetId, ignoreAssociations, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a ruleset (asynchronously)
     * Deletes the ruleset by ID.
     * @param rulesetId The mandatory ruleset ID (required)
     * @param ignoreAssociations When true, ignores the associations and deletes the rule set. When false, recognizes the associations, which prevents the deletion of the rule set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIpFilterRulesetAsync(String rulesetId, Boolean ignoreAssociations, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIpFilterRulesetValidateBeforeCall(rulesetId, ignoreAssociations, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteIpFilterRulesetAssociation
     * @param rulesetId Mandatory ruleset ID (required)
     * @param associationType Mandatory association type ID (required)
     * @param associatedEntityId Mandatory associated entity ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIpFilterRulesetAssociationCall(String rulesetId, String associationType, String associatedEntityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/ip-filtering/rulesets/{ruleset_id}/associations/{association_type}/{associated_entity_id}"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "association_type" + "\\}", apiClient.escapeString(associationType.toString()))
            .replaceAll("\\{" + "associated_entity_id" + "\\}", apiClient.escapeString(associatedEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIpFilterRulesetAssociationValidateBeforeCall(String rulesetId, String associationType, String associatedEntityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling deleteIpFilterRulesetAssociation(Async)");
        }
        // verify the required parameter 'associationType' is set
        if (associationType == null) {
            throw new ApiException("Missing the required parameter 'associationType' when calling deleteIpFilterRulesetAssociation(Async)");
        }
        // verify the required parameter 'associatedEntityId' is set
        if (associatedEntityId == null) {
            throw new ApiException("Missing the required parameter 'associatedEntityId' when calling deleteIpFilterRulesetAssociation(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteIpFilterRulesetAssociationCall(rulesetId, associationType, associatedEntityId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete ruleset association
     * Deletes the traffic rules in the ruleset from the deployment.
     * @param rulesetId Mandatory ruleset ID (required)
     * @param associationType Mandatory association type ID (required)
     * @param associatedEntityId Mandatory associated entity ID (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteIpFilterRulesetAssociation(String rulesetId, String associationType, String associatedEntityId) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteIpFilterRulesetAssociationWithHttpInfo(rulesetId, associationType, associatedEntityId);
        return resp.getData();
    }

    /**
     * Delete ruleset association
     * Deletes the traffic rules in the ruleset from the deployment.
     * @param rulesetId Mandatory ruleset ID (required)
     * @param associationType Mandatory association type ID (required)
     * @param associatedEntityId Mandatory associated entity ID (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteIpFilterRulesetAssociationWithHttpInfo(String rulesetId, String associationType, String associatedEntityId) throws ApiException {
        com.squareup.okhttp.Call call = deleteIpFilterRulesetAssociationValidateBeforeCall(rulesetId, associationType, associatedEntityId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete ruleset association (asynchronously)
     * Deletes the traffic rules in the ruleset from the deployment.
     * @param rulesetId Mandatory ruleset ID (required)
     * @param associationType Mandatory association type ID (required)
     * @param associatedEntityId Mandatory associated entity ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIpFilterRulesetAssociationAsync(String rulesetId, String associationType, String associatedEntityId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIpFilterRulesetAssociationValidateBeforeCall(rulesetId, associationType, associatedEntityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIpFilterDeploymentRulesetAssociations
     * @param associationType Mandatory association type ID (required)
     * @param associatedEntityId Mandatory associated entity ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIpFilterDeploymentRulesetAssociationsCall(String associationType, String associatedEntityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/ip-filtering/associations/{association_type}/{associated_entity_id}/rulesets"
            .replaceAll("\\{" + "association_type" + "\\}", apiClient.escapeString(associationType.toString()))
            .replaceAll("\\{" + "associated_entity_id" + "\\}", apiClient.escapeString(associatedEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIpFilterDeploymentRulesetAssociationsValidateBeforeCall(String associationType, String associatedEntityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'associationType' is set
        if (associationType == null) {
            throw new ApiException("Missing the required parameter 'associationType' when calling getIpFilterDeploymentRulesetAssociations(Async)");
        }
        // verify the required parameter 'associatedEntityId' is set
        if (associatedEntityId == null) {
            throw new ApiException("Missing the required parameter 'associatedEntityId' when calling getIpFilterDeploymentRulesetAssociations(Async)");
        }
        
        com.squareup.okhttp.Call call = getIpFilterDeploymentRulesetAssociationsCall(associationType, associatedEntityId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get associated rulesets
     * Retrieves the rulesets associated with a deployment.
     * @param associationType Mandatory association type ID (required)
     * @param associatedEntityId Mandatory associated entity ID (required)
     * @return IpFilteringSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpFilteringSettings getIpFilterDeploymentRulesetAssociations(String associationType, String associatedEntityId) throws ApiException {
        ApiResponse<IpFilteringSettings> resp = getIpFilterDeploymentRulesetAssociationsWithHttpInfo(associationType, associatedEntityId);
        return resp.getData();
    }

    /**
     * Get associated rulesets
     * Retrieves the rulesets associated with a deployment.
     * @param associationType Mandatory association type ID (required)
     * @param associatedEntityId Mandatory associated entity ID (required)
     * @return ApiResponse&lt;IpFilteringSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpFilteringSettings> getIpFilterDeploymentRulesetAssociationsWithHttpInfo(String associationType, String associatedEntityId) throws ApiException {
        com.squareup.okhttp.Call call = getIpFilterDeploymentRulesetAssociationsValidateBeforeCall(associationType, associatedEntityId, null, null);
        Type localVarReturnType = new TypeToken<IpFilteringSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get associated rulesets (asynchronously)
     * Retrieves the rulesets associated with a deployment.
     * @param associationType Mandatory association type ID (required)
     * @param associatedEntityId Mandatory associated entity ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIpFilterDeploymentRulesetAssociationsAsync(String associationType, String associatedEntityId, final ApiCallback<IpFilteringSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIpFilterDeploymentRulesetAssociationsValidateBeforeCall(associationType, associatedEntityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpFilteringSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIpFilterRuleset
     * @param rulesetId The mandatory ruleset ID (required)
     * @param includeAssociations Retrieves a list of resources that are associated to the specified ruleset. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIpFilterRulesetCall(String rulesetId, Boolean includeAssociations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/ip-filtering/rulesets/{ruleset_id}"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeAssociations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_associations", includeAssociations));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIpFilterRulesetValidateBeforeCall(String rulesetId, Boolean includeAssociations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling getIpFilterRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = getIpFilterRulesetCall(rulesetId, includeAssociations, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a ruleset
     * Retrieves the ruleset by ID.
     * @param rulesetId The mandatory ruleset ID (required)
     * @param includeAssociations Retrieves a list of resources that are associated to the specified ruleset. (optional)
     * @return IpFilterRuleset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpFilterRuleset getIpFilterRuleset(String rulesetId, Boolean includeAssociations) throws ApiException {
        ApiResponse<IpFilterRuleset> resp = getIpFilterRulesetWithHttpInfo(rulesetId, includeAssociations);
        return resp.getData();
    }

    /**
     * Get a ruleset
     * Retrieves the ruleset by ID.
     * @param rulesetId The mandatory ruleset ID (required)
     * @param includeAssociations Retrieves a list of resources that are associated to the specified ruleset. (optional)
     * @return ApiResponse&lt;IpFilterRuleset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpFilterRuleset> getIpFilterRulesetWithHttpInfo(String rulesetId, Boolean includeAssociations) throws ApiException {
        com.squareup.okhttp.Call call = getIpFilterRulesetValidateBeforeCall(rulesetId, includeAssociations, null, null);
        Type localVarReturnType = new TypeToken<IpFilterRuleset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a ruleset (asynchronously)
     * Retrieves the ruleset by ID.
     * @param rulesetId The mandatory ruleset ID (required)
     * @param includeAssociations Retrieves a list of resources that are associated to the specified ruleset. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIpFilterRulesetAsync(String rulesetId, Boolean includeAssociations, final ApiCallback<IpFilterRuleset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIpFilterRulesetValidateBeforeCall(rulesetId, includeAssociations, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpFilterRuleset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIpFilterRulesetDeploymentAssociations
     * @param rulesetId Mandatory ruleset ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIpFilterRulesetDeploymentAssociationsCall(String rulesetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/ip-filtering/rulesets/{ruleset_id}/associations"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIpFilterRulesetDeploymentAssociationsValidateBeforeCall(String rulesetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling getIpFilterRulesetDeploymentAssociations(Async)");
        }
        
        com.squareup.okhttp.Call call = getIpFilterRulesetDeploymentAssociationsCall(rulesetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get associated deployments
     * Retrieves a list of deployments that are associated to the specified ruleset.
     * @param rulesetId Mandatory ruleset ID (required)
     * @return RulesetAssociations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetAssociations getIpFilterRulesetDeploymentAssociations(String rulesetId) throws ApiException {
        ApiResponse<RulesetAssociations> resp = getIpFilterRulesetDeploymentAssociationsWithHttpInfo(rulesetId);
        return resp.getData();
    }

    /**
     * Get associated deployments
     * Retrieves a list of deployments that are associated to the specified ruleset.
     * @param rulesetId Mandatory ruleset ID (required)
     * @return ApiResponse&lt;RulesetAssociations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetAssociations> getIpFilterRulesetDeploymentAssociationsWithHttpInfo(String rulesetId) throws ApiException {
        com.squareup.okhttp.Call call = getIpFilterRulesetDeploymentAssociationsValidateBeforeCall(rulesetId, null, null);
        Type localVarReturnType = new TypeToken<RulesetAssociations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get associated deployments (asynchronously)
     * Retrieves a list of deployments that are associated to the specified ruleset.
     * @param rulesetId Mandatory ruleset ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIpFilterRulesetDeploymentAssociationsAsync(String rulesetId, final ApiCallback<RulesetAssociations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIpFilterRulesetDeploymentAssociationsValidateBeforeCall(rulesetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetAssociations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIpFilterRulesets
     * @param includeAssociations Retrieves a list of resources that are associated to the specified ruleset. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIpFilterRulesetsCall(Boolean includeAssociations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/ip-filtering/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeAssociations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_associations", includeAssociations));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIpFilterRulesetsValidateBeforeCall(Boolean includeAssociations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getIpFilterRulesetsCall(includeAssociations, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all rulesets
     * Retrieves all of the user rulesets.
     * @param includeAssociations Retrieves a list of resources that are associated to the specified ruleset. (optional)
     * @return IpFilterRulesets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpFilterRulesets getIpFilterRulesets(Boolean includeAssociations) throws ApiException {
        ApiResponse<IpFilterRulesets> resp = getIpFilterRulesetsWithHttpInfo(includeAssociations);
        return resp.getData();
    }

    /**
     * Get all rulesets
     * Retrieves all of the user rulesets.
     * @param includeAssociations Retrieves a list of resources that are associated to the specified ruleset. (optional)
     * @return ApiResponse&lt;IpFilterRulesets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpFilterRulesets> getIpFilterRulesetsWithHttpInfo(Boolean includeAssociations) throws ApiException {
        com.squareup.okhttp.Call call = getIpFilterRulesetsValidateBeforeCall(includeAssociations, null, null);
        Type localVarReturnType = new TypeToken<IpFilterRulesets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all rulesets (asynchronously)
     * Retrieves all of the user rulesets.
     * @param includeAssociations Retrieves a list of resources that are associated to the specified ruleset. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIpFilterRulesetsAsync(Boolean includeAssociations, final ApiCallback<IpFilterRulesets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIpFilterRulesetsValidateBeforeCall(includeAssociations, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpFilterRulesets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateIpFilterRuleset
     * @param body The ruleset definition (required)
     * @param rulesetId The mandatory ruleset ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateIpFilterRulesetCall(IpFilterRuleset body, String rulesetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments/ip-filtering/rulesets/{ruleset_id}"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateIpFilterRulesetValidateBeforeCall(IpFilterRuleset body, String rulesetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateIpFilterRuleset(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling updateIpFilterRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = updateIpFilterRulesetCall(body, rulesetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a ruleset
     * Updates the ruleset with the definition.
     * @param body The ruleset definition (required)
     * @param rulesetId The mandatory ruleset ID (required)
     * @return RuleSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleSetResponse updateIpFilterRuleset(IpFilterRuleset body, String rulesetId) throws ApiException {
        ApiResponse<RuleSetResponse> resp = updateIpFilterRulesetWithHttpInfo(body, rulesetId);
        return resp.getData();
    }

    /**
     * Updates a ruleset
     * Updates the ruleset with the definition.
     * @param body The ruleset definition (required)
     * @param rulesetId The mandatory ruleset ID (required)
     * @return ApiResponse&lt;RuleSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleSetResponse> updateIpFilterRulesetWithHttpInfo(IpFilterRuleset body, String rulesetId) throws ApiException {
        com.squareup.okhttp.Call call = updateIpFilterRulesetValidateBeforeCall(body, rulesetId, null, null);
        Type localVarReturnType = new TypeToken<RuleSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a ruleset (asynchronously)
     * Updates the ruleset with the definition.
     * @param body The ruleset definition (required)
     * @param rulesetId The mandatory ruleset ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateIpFilterRulesetAsync(IpFilterRuleset body, String rulesetId, final ApiCallback<RuleSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateIpFilterRulesetValidateBeforeCall(body, rulesetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
