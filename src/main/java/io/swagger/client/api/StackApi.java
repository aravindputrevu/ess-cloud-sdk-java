/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.EmptyResponse;
import java.io.File;
import io.swagger.client.model.InstanceTypeResource;
import io.swagger.client.model.StackVersionArchiveProcessingResult;
import io.swagger.client.model.StackVersionConfig;
import io.swagger.client.model.StackVersionConfigPost;
import io.swagger.client.model.StackVersionConfigs;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StackApi {
    private ApiClient apiClient;

    public StackApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StackApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteVersionStack
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVersionStackCall(String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/stack/versions/{version}"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVersionStackValidateBeforeCall(String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteVersionStack(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteVersionStackCall(version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete stack version
     * Uses the &#x60;deleted&#x60; flag, which removes only that version of the Elastic Stack from the list of available versions. To restore the version, send an update request. For more information, see the PUT request.
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteVersionStack(String version) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteVersionStackWithHttpInfo(version);
        return resp.getData();
    }

    /**
     * Delete stack version
     * Uses the &#x60;deleted&#x60; flag, which removes only that version of the Elastic Stack from the list of available versions. To restore the version, send an update request. For more information, see the PUT request.
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteVersionStackWithHttpInfo(String version) throws ApiException {
        com.squareup.okhttp.Call call = deleteVersionStackValidateBeforeCall(version, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete stack version (asynchronously)
     * Uses the &#x60;deleted&#x60; flag, which removes only that version of the Elastic Stack from the list of available versions. To restore the version, send an update request. For more information, see the PUT request.
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVersionStackAsync(String version, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVersionStackValidateBeforeCall(version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInstanceTypes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInstanceTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/stack/instance-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInstanceTypesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getInstanceTypesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get instance types
     * Retrieves a list of all instance types.
     * @return List&lt;InstanceTypeResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InstanceTypeResource> getInstanceTypes() throws ApiException {
        ApiResponse<List<InstanceTypeResource>> resp = getInstanceTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get instance types
     * Retrieves a list of all instance types.
     * @return ApiResponse&lt;List&lt;InstanceTypeResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InstanceTypeResource>> getInstanceTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getInstanceTypesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<InstanceTypeResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get instance types (asynchronously)
     * Retrieves a list of all instance types.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInstanceTypesAsync(final ApiCallback<List<InstanceTypeResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInstanceTypesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InstanceTypeResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionStack
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionStackCall(String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/stack/versions/{version}"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionStackValidateBeforeCall(String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getVersionStack(Async)");
        }
        
        com.squareup.okhttp.Call call = getVersionStackCall(version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get stack version
     * Retrieves the Elastic Stack version and template.
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @return StackVersionConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StackVersionConfig getVersionStack(String version) throws ApiException {
        ApiResponse<StackVersionConfig> resp = getVersionStackWithHttpInfo(version);
        return resp.getData();
    }

    /**
     * Get stack version
     * Retrieves the Elastic Stack version and template.
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @return ApiResponse&lt;StackVersionConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StackVersionConfig> getVersionStackWithHttpInfo(String version) throws ApiException {
        com.squareup.okhttp.Call call = getVersionStackValidateBeforeCall(version, null, null);
        Type localVarReturnType = new TypeToken<StackVersionConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get stack version (asynchronously)
     * Retrieves the Elastic Stack version and template.
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionStackAsync(String version, final ApiCallback<StackVersionConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionStackValidateBeforeCall(version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StackVersionConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionStacks
     * @param showDeleted Whether to show deleted stack versions or not (optional)
     * @param showUnusable Whether to show versions that are unusable by the authenticated user (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionStacksCall(Boolean showDeleted, Boolean showUnusable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/stack/versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showDeleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_deleted", showDeleted));
        if (showUnusable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_unusable", showUnusable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionStacksValidateBeforeCall(Boolean showDeleted, Boolean showUnusable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getVersionStacksCall(showDeleted, showUnusable, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get stack versions
     * By default, retrieves only the available Elastic Stack versions. To retrieve all of the Elastic Stack versions, use the &#x60;show_deleted parameter&#x60;.
     * @param showDeleted Whether to show deleted stack versions or not (optional)
     * @param showUnusable Whether to show versions that are unusable by the authenticated user (optional)
     * @return StackVersionConfigs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StackVersionConfigs getVersionStacks(Boolean showDeleted, Boolean showUnusable) throws ApiException {
        ApiResponse<StackVersionConfigs> resp = getVersionStacksWithHttpInfo(showDeleted, showUnusable);
        return resp.getData();
    }

    /**
     * Get stack versions
     * By default, retrieves only the available Elastic Stack versions. To retrieve all of the Elastic Stack versions, use the &#x60;show_deleted parameter&#x60;.
     * @param showDeleted Whether to show deleted stack versions or not (optional)
     * @param showUnusable Whether to show versions that are unusable by the authenticated user (optional)
     * @return ApiResponse&lt;StackVersionConfigs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StackVersionConfigs> getVersionStacksWithHttpInfo(Boolean showDeleted, Boolean showUnusable) throws ApiException {
        com.squareup.okhttp.Call call = getVersionStacksValidateBeforeCall(showDeleted, showUnusable, null, null);
        Type localVarReturnType = new TypeToken<StackVersionConfigs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get stack versions (asynchronously)
     * By default, retrieves only the available Elastic Stack versions. To retrieve all of the Elastic Stack versions, use the &#x60;show_deleted parameter&#x60;.
     * @param showDeleted Whether to show deleted stack versions or not (optional)
     * @param showUnusable Whether to show versions that are unusable by the authenticated user (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionStacksAsync(Boolean showDeleted, Boolean showUnusable, final ApiCallback<StackVersionConfigs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionStacksValidateBeforeCall(showDeleted, showUnusable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StackVersionConfigs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStackPacks
     * @param file  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStackPacksCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/stack/versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStackPacksValidateBeforeCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling updateStackPacks(Async)");
        }
        
        com.squareup.okhttp.Call call = updateStackPacksCall(file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload stack pack
     * Creates or updates an Elastic Stack pack and template. The endpoint supports &#x60;multipart/form-data&#x60; requests, as well as &#x60;application/zip&#x60; and &#x60;application/octet-stream&#x60; requests with a binary body. The maximum size of the payload is 1Mb. When the archive contains an Elastic Stack configuration that is available through the API, the configuration and template are overwritten.
     * @param file  (required)
     * @return StackVersionArchiveProcessingResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StackVersionArchiveProcessingResult updateStackPacks(File file) throws ApiException {
        ApiResponse<StackVersionArchiveProcessingResult> resp = updateStackPacksWithHttpInfo(file);
        return resp.getData();
    }

    /**
     * Upload stack pack
     * Creates or updates an Elastic Stack pack and template. The endpoint supports &#x60;multipart/form-data&#x60; requests, as well as &#x60;application/zip&#x60; and &#x60;application/octet-stream&#x60; requests with a binary body. The maximum size of the payload is 1Mb. When the archive contains an Elastic Stack configuration that is available through the API, the configuration and template are overwritten.
     * @param file  (required)
     * @return ApiResponse&lt;StackVersionArchiveProcessingResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StackVersionArchiveProcessingResult> updateStackPacksWithHttpInfo(File file) throws ApiException {
        com.squareup.okhttp.Call call = updateStackPacksValidateBeforeCall(file, null, null);
        Type localVarReturnType = new TypeToken<StackVersionArchiveProcessingResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload stack pack (asynchronously)
     * Creates or updates an Elastic Stack pack and template. The endpoint supports &#x60;multipart/form-data&#x60; requests, as well as &#x60;application/zip&#x60; and &#x60;application/octet-stream&#x60; requests with a binary body. The maximum size of the payload is 1Mb. When the archive contains an Elastic Stack configuration that is available through the API, the configuration and template are overwritten.
     * @param file  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStackPacksAsync(File file, final ApiCallback<StackVersionArchiveProcessingResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStackPacksValidateBeforeCall(file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StackVersionArchiveProcessingResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateVersionStack
     * @param body Elastic Stack configuration object (required)
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVersionStackCall(StackVersionConfigPost body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/stack/versions/{version}"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVersionStackValidateBeforeCall(StackVersionConfigPost body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateVersionStack(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateVersionStack(Async)");
        }
        
        com.squareup.okhttp.Call call = updateVersionStackCall(body, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update stack version
     * Updates the Elastic Stack version configuration.
     * @param body Elastic Stack configuration object (required)
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @return StackVersionConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StackVersionConfig updateVersionStack(StackVersionConfigPost body, String version) throws ApiException {
        ApiResponse<StackVersionConfig> resp = updateVersionStackWithHttpInfo(body, version);
        return resp.getData();
    }

    /**
     * Update stack version
     * Updates the Elastic Stack version configuration.
     * @param body Elastic Stack configuration object (required)
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @return ApiResponse&lt;StackVersionConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StackVersionConfig> updateVersionStackWithHttpInfo(StackVersionConfigPost body, String version) throws ApiException {
        com.squareup.okhttp.Call call = updateVersionStackValidateBeforeCall(body, version, null, null);
        Type localVarReturnType = new TypeToken<StackVersionConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update stack version (asynchronously)
     * Updates the Elastic Stack version configuration.
     * @param body Elastic Stack configuration object (required)
     * @param version The Elastic Stack version. For example, &#x60;5.3.1&#x60; or &#x60;5.0.0-RC4&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVersionStackAsync(StackVersionConfigPost body, String version, final ApiCallback<StackVersionConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVersionStackValidateBeforeCall(body, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StackVersionConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
