/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.ClusterCommandResponse;
import io.swagger.client.model.ClusterCrudResponse;
import io.swagger.client.model.ClusterMetadataSettings;
import io.swagger.client.model.ClusterUpgradeInfo;
import io.swagger.client.model.CreateKibanaRequest;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.KibanaClusterInfo;
import io.swagger.client.model.KibanaClusterPlan;
import io.swagger.client.model.KibanaClusterPlansInfo;
import io.swagger.client.model.KibanaClustersInfo;
import io.swagger.client.model.ModelVersionIndexSynchronizationResults;
import io.swagger.client.model.SearchRequest;
import io.swagger.client.model.TransientKibanaPlanConfiguration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClustersKibanaApi {
    private ApiClient apiClient;

    public ClustersKibanaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClustersKibanaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelKibanaClusterPendingPlan
     * @param clusterId The Kibana deployment identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelKibanaClusterPendingPlanCall(String clusterId, Boolean ignoreMissing, Boolean forceDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/plan/pending"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));
        if (forceDelete != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_delete", forceDelete));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelKibanaClusterPendingPlanValidateBeforeCall(String clusterId, Boolean ignoreMissing, Boolean forceDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling cancelKibanaClusterPendingPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelKibanaClusterPendingPlanCall(clusterId, ignoreMissing, forceDelete, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel pending plan
     * Cancels the pending plan of the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse cancelKibanaClusterPendingPlan(String clusterId, Boolean ignoreMissing, Boolean forceDelete) throws ApiException {
        ApiResponse<EmptyResponse> resp = cancelKibanaClusterPendingPlanWithHttpInfo(clusterId, ignoreMissing, forceDelete);
        return resp.getData();
    }

    /**
     * Cancel pending plan
     * Cancels the pending plan of the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> cancelKibanaClusterPendingPlanWithHttpInfo(String clusterId, Boolean ignoreMissing, Boolean forceDelete) throws ApiException {
        com.squareup.okhttp.Call call = cancelKibanaClusterPendingPlanValidateBeforeCall(clusterId, ignoreMissing, forceDelete, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel pending plan (asynchronously)
     * Cancels the pending plan of the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelKibanaClusterPendingPlanAsync(String clusterId, Boolean ignoreMissing, Boolean forceDelete, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelKibanaClusterPendingPlanValidateBeforeCall(clusterId, ignoreMissing, forceDelete, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createKibanaCluster
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createKibanaClusterCall(CreateKibanaRequest body, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createKibanaClusterValidateBeforeCall(CreateKibanaRequest body, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createKibanaCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = createKibanaClusterCall(body, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create cluster
     * Creates a Kibana instance for the Elasticsearch cluster.
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @return ClusterCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCrudResponse createKibanaCluster(CreateKibanaRequest body, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterCrudResponse> resp = createKibanaClusterWithHttpInfo(body, validateOnly);
        return resp.getData();
    }

    /**
     * Create cluster
     * Creates a Kibana instance for the Elasticsearch cluster.
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @return ApiResponse&lt;ClusterCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCrudResponse> createKibanaClusterWithHttpInfo(CreateKibanaRequest body, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = createKibanaClusterValidateBeforeCall(body, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create cluster (asynchronously)
     * Creates a Kibana instance for the Elasticsearch cluster.
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createKibanaClusterAsync(CreateKibanaRequest body, Boolean validateOnly, final ApiCallback<ClusterCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createKibanaClusterValidateBeforeCall(body, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteKibProxyRequests
     * @param clusterId The Kibana deployment identifier (required)
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteKibProxyRequestsCall(String clusterId, String xManagementRequest, String kibanaPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/proxy/{kibana_path}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "kibana_path" + "\\}", apiClient.escapeString(kibanaPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xManagementRequest != null)
        localVarHeaderParams.put("X-Management-Request", apiClient.parameterToString(xManagementRequest));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteKibProxyRequestsValidateBeforeCall(String clusterId, String xManagementRequest, String kibanaPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling deleteKibProxyRequests(Async)");
        }
        // verify the required parameter 'xManagementRequest' is set
        if (xManagementRequest == null) {
            throw new ApiException("Missing the required parameter 'xManagementRequest' when calling deleteKibProxyRequests(Async)");
        }
        // verify the required parameter 'kibanaPath' is set
        if (kibanaPath == null) {
            throw new ApiException("Missing the required parameter 'kibanaPath' when calling deleteKibProxyRequests(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteKibProxyRequestsCall(clusterId, xManagementRequest, kibanaPath, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Proxy HTTP DELETE request
     * Proxies the HTTP DELETE request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param clusterId The Kibana deployment identifier (required)
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteKibProxyRequests(String clusterId, String xManagementRequest, String kibanaPath) throws ApiException {
        deleteKibProxyRequestsWithHttpInfo(clusterId, xManagementRequest, kibanaPath);
    }

    /**
     * Proxy HTTP DELETE request
     * Proxies the HTTP DELETE request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param clusterId The Kibana deployment identifier (required)
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteKibProxyRequestsWithHttpInfo(String clusterId, String xManagementRequest, String kibanaPath) throws ApiException {
        com.squareup.okhttp.Call call = deleteKibProxyRequestsValidateBeforeCall(clusterId, xManagementRequest, kibanaPath, null, null);
        return apiClient.execute(call);
    }

    /**
     * Proxy HTTP DELETE request (asynchronously)
     * Proxies the HTTP DELETE request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param clusterId The Kibana deployment identifier (required)
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteKibProxyRequestsAsync(String clusterId, String xManagementRequest, String kibanaPath, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteKibProxyRequestsValidateBeforeCall(clusterId, xManagementRequest, kibanaPath, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteKibanaCluster
     * @param clusterId The Kibana deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteKibanaClusterCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteKibanaClusterValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling deleteKibanaCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteKibanaClusterCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete cluster
     * Deletes the Kibana instance. Before you delete the Kibana instance, you must first successfully issue a &#x60;_shutdown&#x60; command.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteKibanaCluster(String clusterId) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteKibanaClusterWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Delete cluster
     * Deletes the Kibana instance. Before you delete the Kibana instance, you must first successfully issue a &#x60;_shutdown&#x60; command.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteKibanaClusterWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = deleteKibanaClusterValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete cluster (asynchronously)
     * Deletes the Kibana instance. Before you delete the Kibana instance, you must first successfully issue a &#x60;_shutdown&#x60; command.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteKibanaClusterAsync(String clusterId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteKibanaClusterValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKibProxyRequests
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKibProxyRequestsCall(String clusterId, String kibanaPath, String xManagementRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/proxy/{kibana_path}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "kibana_path" + "\\}", apiClient.escapeString(kibanaPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xManagementRequest != null)
        localVarHeaderParams.put("X-Management-Request", apiClient.parameterToString(xManagementRequest));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKibProxyRequestsValidateBeforeCall(String clusterId, String kibanaPath, String xManagementRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getKibProxyRequests(Async)");
        }
        // verify the required parameter 'kibanaPath' is set
        if (kibanaPath == null) {
            throw new ApiException("Missing the required parameter 'kibanaPath' when calling getKibProxyRequests(Async)");
        }
        // verify the required parameter 'xManagementRequest' is set
        if (xManagementRequest == null) {
            throw new ApiException("Missing the required parameter 'xManagementRequest' when calling getKibProxyRequests(Async)");
        }
        
        com.squareup.okhttp.Call call = getKibProxyRequestsCall(clusterId, kibanaPath, xManagementRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Proxy HTTP GET request
     * Proxies the HTTP GET request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getKibProxyRequests(String clusterId, String kibanaPath, String xManagementRequest) throws ApiException {
        getKibProxyRequestsWithHttpInfo(clusterId, kibanaPath, xManagementRequest);
    }

    /**
     * Proxy HTTP GET request
     * Proxies the HTTP GET request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getKibProxyRequestsWithHttpInfo(String clusterId, String kibanaPath, String xManagementRequest) throws ApiException {
        com.squareup.okhttp.Call call = getKibProxyRequestsValidateBeforeCall(clusterId, kibanaPath, xManagementRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Proxy HTTP GET request (asynchronously)
     * Proxies the HTTP GET request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKibProxyRequestsAsync(String clusterId, String kibanaPath, String xManagementRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKibProxyRequestsValidateBeforeCall(clusterId, kibanaPath, xManagementRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getKibanaCluster
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterCall(String clusterId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean showSettings, Boolean convertLegacyPlans, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKibanaClusterValidateBeforeCall(String clusterId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean showSettings, Boolean convertLegacyPlans, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getKibanaCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = getKibanaClusterCall(clusterId, showMetadata, showPlans, showPlanLogs, showPlanDefaults, showSettings, convertLegacyPlans, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster
     * Retrieves the Kibana instance information.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @return KibanaClusterInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KibanaClusterInfo getKibanaCluster(String clusterId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean showSettings, Boolean convertLegacyPlans) throws ApiException {
        ApiResponse<KibanaClusterInfo> resp = getKibanaClusterWithHttpInfo(clusterId, showMetadata, showPlans, showPlanLogs, showPlanDefaults, showSettings, convertLegacyPlans);
        return resp.getData();
    }

    /**
     * Get cluster
     * Retrieves the Kibana instance information.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @return ApiResponse&lt;KibanaClusterInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KibanaClusterInfo> getKibanaClusterWithHttpInfo(String clusterId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean showSettings, Boolean convertLegacyPlans) throws ApiException {
        com.squareup.okhttp.Call call = getKibanaClusterValidateBeforeCall(clusterId, showMetadata, showPlans, showPlanLogs, showPlanDefaults, showSettings, convertLegacyPlans, null, null);
        Type localVarReturnType = new TypeToken<KibanaClusterInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster (asynchronously)
     * Retrieves the Kibana instance information.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterAsync(String clusterId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean showSettings, Boolean convertLegacyPlans, final ApiCallback<KibanaClusterInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKibanaClusterValidateBeforeCall(clusterId, showMetadata, showPlans, showPlanLogs, showPlanDefaults, showSettings, convertLegacyPlans, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KibanaClusterInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKibanaClusterMetadataRaw
     * @param clusterId The Kibana deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterMetadataRawCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/metadata/raw"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKibanaClusterMetadataRawValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getKibanaClusterMetadataRaw(Async)");
        }
        
        com.squareup.okhttp.Call call = getKibanaClusterMetadataRawCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster metadata
     * Advanced use only. Retrieves the internal metadata, in free-form JSON, for the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getKibanaClusterMetadataRaw(String clusterId) throws ApiException {
        ApiResponse<Object> resp = getKibanaClusterMetadataRawWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get cluster metadata
     * Advanced use only. Retrieves the internal metadata, in free-form JSON, for the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getKibanaClusterMetadataRawWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getKibanaClusterMetadataRawValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster metadata (asynchronously)
     * Advanced use only. Retrieves the internal metadata, in free-form JSON, for the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterMetadataRawAsync(String clusterId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKibanaClusterMetadataRawValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKibanaClusterMetadataSettings
     * @param clusterId The Kibana deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterMetadataSettingsCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/metadata/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKibanaClusterMetadataSettingsValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getKibanaClusterMetadataSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getKibanaClusterMetadataSettingsCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster metadata settings
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ClusterMetadataSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterMetadataSettings getKibanaClusterMetadataSettings(String clusterId) throws ApiException {
        ApiResponse<ClusterMetadataSettings> resp = getKibanaClusterMetadataSettingsWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get cluster metadata settings
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ApiResponse&lt;ClusterMetadataSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterMetadataSettings> getKibanaClusterMetadataSettingsWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getKibanaClusterMetadataSettingsValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster metadata settings (asynchronously)
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterMetadataSettingsAsync(String clusterId, final ApiCallback<ClusterMetadataSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKibanaClusterMetadataSettingsValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKibanaClusterPendingPlan
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterPendingPlanCall(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/plan/pending"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKibanaClusterPendingPlanValidateBeforeCall(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getKibanaClusterPendingPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = getKibanaClusterPendingPlanCall(clusterId, showPlanDefaults, convertLegacyPlans, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get pending plan
     * Retrieves the pending plan of the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @return KibanaClusterPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KibanaClusterPlan getKibanaClusterPendingPlan(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans) throws ApiException {
        ApiResponse<KibanaClusterPlan> resp = getKibanaClusterPendingPlanWithHttpInfo(clusterId, showPlanDefaults, convertLegacyPlans);
        return resp.getData();
    }

    /**
     * Get pending plan
     * Retrieves the pending plan of the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @return ApiResponse&lt;KibanaClusterPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KibanaClusterPlan> getKibanaClusterPendingPlanWithHttpInfo(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans) throws ApiException {
        com.squareup.okhttp.Call call = getKibanaClusterPendingPlanValidateBeforeCall(clusterId, showPlanDefaults, convertLegacyPlans, null, null);
        Type localVarReturnType = new TypeToken<KibanaClusterPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pending plan (asynchronously)
     * Retrieves the pending plan of the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterPendingPlanAsync(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, final ApiCallback<KibanaClusterPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKibanaClusterPendingPlanValidateBeforeCall(clusterId, showPlanDefaults, convertLegacyPlans, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KibanaClusterPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKibanaClusterPlan
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterPlanCall(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/plan"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKibanaClusterPlanValidateBeforeCall(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getKibanaClusterPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = getKibanaClusterPlanCall(clusterId, showPlanDefaults, convertLegacyPlans, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get plan
     * Retrieves the active plan of the Kibana instance. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @return KibanaClusterPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KibanaClusterPlan getKibanaClusterPlan(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans) throws ApiException {
        ApiResponse<KibanaClusterPlan> resp = getKibanaClusterPlanWithHttpInfo(clusterId, showPlanDefaults, convertLegacyPlans);
        return resp.getData();
    }

    /**
     * Get plan
     * Retrieves the active plan of the Kibana instance. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @return ApiResponse&lt;KibanaClusterPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KibanaClusterPlan> getKibanaClusterPlanWithHttpInfo(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans) throws ApiException {
        com.squareup.okhttp.Call call = getKibanaClusterPlanValidateBeforeCall(clusterId, showPlanDefaults, convertLegacyPlans, null, null);
        Type localVarReturnType = new TypeToken<KibanaClusterPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get plan (asynchronously)
     * Retrieves the active plan of the Kibana instance. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterPlanAsync(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, final ApiCallback<KibanaClusterPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKibanaClusterPlanValidateBeforeCall(clusterId, showPlanDefaults, convertLegacyPlans, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KibanaClusterPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKibanaClusterPlanActivity
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterPlanActivityCall(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/plan/activity"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKibanaClusterPlanActivityValidateBeforeCall(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getKibanaClusterPlanActivity(Async)");
        }
        
        com.squareup.okhttp.Call call = getKibanaClusterPlanActivityCall(clusterId, showPlanLogs, showPlanDefaults, convertLegacyPlans, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get plan activity
     * Retrieves the active and historical plan information for the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @return KibanaClusterPlansInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KibanaClusterPlansInfo getKibanaClusterPlanActivity(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans) throws ApiException {
        ApiResponse<KibanaClusterPlansInfo> resp = getKibanaClusterPlanActivityWithHttpInfo(clusterId, showPlanLogs, showPlanDefaults, convertLegacyPlans);
        return resp.getData();
    }

    /**
     * Get plan activity
     * Retrieves the active and historical plan information for the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @return ApiResponse&lt;KibanaClusterPlansInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KibanaClusterPlansInfo> getKibanaClusterPlanActivityWithHttpInfo(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans) throws ApiException {
        com.squareup.okhttp.Call call = getKibanaClusterPlanActivityValidateBeforeCall(clusterId, showPlanLogs, showPlanDefaults, convertLegacyPlans, null, null);
        Type localVarReturnType = new TypeToken<KibanaClusterPlansInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get plan activity (asynchronously)
     * Retrieves the active and historical plan information for the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKibanaClusterPlanActivityAsync(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, final ApiCallback<KibanaClusterPlansInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKibanaClusterPlanActivityValidateBeforeCall(clusterId, showPlanLogs, showPlanDefaults, convertLegacyPlans, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KibanaClusterPlansInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKibanaClusters
     * @param from The number of clusters to skip. (optional)
     * @param size The maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses. (optional)
     * @param q An optional query to filter Kibana clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKibanaClustersCall(Integer from, Integer size, String q, Boolean showMetadata, Boolean showPlans, Boolean showHidden, Boolean showPlanDefaults, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showHidden != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_hidden", showHidden));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKibanaClustersValidateBeforeCall(Integer from, Integer size, String q, Boolean showMetadata, Boolean showPlans, Boolean showHidden, Boolean showPlanDefaults, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getKibanaClustersCall(from, size, q, showMetadata, showPlans, showHidden, showPlanDefaults, showSettings, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get clusters
     * Retrieves the information for all Kibana instances.
     * @param from The number of clusters to skip. (optional)
     * @param size The maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses. (optional)
     * @param q An optional query to filter Kibana clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @return KibanaClustersInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KibanaClustersInfo getKibanaClusters(Integer from, Integer size, String q, Boolean showMetadata, Boolean showPlans, Boolean showHidden, Boolean showPlanDefaults, Boolean showSettings) throws ApiException {
        ApiResponse<KibanaClustersInfo> resp = getKibanaClustersWithHttpInfo(from, size, q, showMetadata, showPlans, showHidden, showPlanDefaults, showSettings);
        return resp.getData();
    }

    /**
     * Get clusters
     * Retrieves the information for all Kibana instances.
     * @param from The number of clusters to skip. (optional)
     * @param size The maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses. (optional)
     * @param q An optional query to filter Kibana clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @return ApiResponse&lt;KibanaClustersInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KibanaClustersInfo> getKibanaClustersWithHttpInfo(Integer from, Integer size, String q, Boolean showMetadata, Boolean showPlans, Boolean showHidden, Boolean showPlanDefaults, Boolean showSettings) throws ApiException {
        com.squareup.okhttp.Call call = getKibanaClustersValidateBeforeCall(from, size, q, showMetadata, showPlans, showHidden, showPlanDefaults, showSettings, null, null);
        Type localVarReturnType = new TypeToken<KibanaClustersInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get clusters (asynchronously)
     * Retrieves the information for all Kibana instances.
     * @param from The number of clusters to skip. (optional)
     * @param size The maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses. (optional)
     * @param q An optional query to filter Kibana clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKibanaClustersAsync(Integer from, Integer size, String q, Boolean showMetadata, Boolean showPlans, Boolean showHidden, Boolean showPlanDefaults, Boolean showSettings, final ApiCallback<KibanaClustersInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKibanaClustersValidateBeforeCall(from, size, q, showMetadata, showPlans, showHidden, showPlanDefaults, showSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KibanaClustersInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveKibanaClusterInstances
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveKibanaClusterInstancesCall(String clusterId, List<String> instanceIds, TransientKibanaPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/instances/{instance_ids}/_move"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));
        if (forceUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_update", forceUpdate));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveKibanaClusterInstancesValidateBeforeCall(String clusterId, List<String> instanceIds, TransientKibanaPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling moveKibanaClusterInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling moveKibanaClusterInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = moveKibanaClusterInstancesCall(clusterId, instanceIds, body, ignoreMissing, forceUpdate, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move instances
     * Moves one or more Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse moveKibanaClusterInstances(String clusterId, List<String> instanceIds, TransientKibanaPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = moveKibanaClusterInstancesWithHttpInfo(clusterId, instanceIds, body, ignoreMissing, forceUpdate, validateOnly);
        return resp.getData();
    }

    /**
     * Move instances
     * Moves one or more Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> moveKibanaClusterInstancesWithHttpInfo(String clusterId, List<String> instanceIds, TransientKibanaPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = moveKibanaClusterInstancesValidateBeforeCall(clusterId, instanceIds, body, ignoreMissing, forceUpdate, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move instances (asynchronously)
     * Moves one or more Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveKibanaClusterInstancesAsync(String clusterId, List<String> instanceIds, TransientKibanaPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean validateOnly, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveKibanaClusterInstancesValidateBeforeCall(clusterId, instanceIds, body, ignoreMissing, forceUpdate, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveKibanaClusterInstancesAdvanced
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveKibanaClusterInstancesAdvancedCall(TransientKibanaPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/instances/_move"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forceUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_update", forceUpdate));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveKibanaClusterInstancesAdvancedValidateBeforeCall(TransientKibanaPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling moveKibanaClusterInstancesAdvanced(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling moveKibanaClusterInstancesAdvanced(Async)");
        }
        
        com.squareup.okhttp.Call call = moveKibanaClusterInstancesAdvancedCall(body, clusterId, forceUpdate, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move instances (advanced)
     * Moves one or more Kibana instances. The custom configuration settings are posted in the body.
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse moveKibanaClusterInstancesAdvanced(TransientKibanaPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = moveKibanaClusterInstancesAdvancedWithHttpInfo(body, clusterId, forceUpdate, validateOnly);
        return resp.getData();
    }

    /**
     * Move instances (advanced)
     * Moves one or more Kibana instances. The custom configuration settings are posted in the body.
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> moveKibanaClusterInstancesAdvancedWithHttpInfo(TransientKibanaPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = moveKibanaClusterInstancesAdvancedValidateBeforeCall(body, clusterId, forceUpdate, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move instances (advanced) (asynchronously)
     * Moves one or more Kibana instances. The custom configuration settings are posted in the body.
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveKibanaClusterInstancesAdvancedAsync(TransientKibanaPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean validateOnly, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveKibanaClusterInstancesAdvancedValidateBeforeCall(body, clusterId, forceUpdate, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postKibProxyRequests
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param body The JSON payload that is used to proxy the Kibana deployment. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postKibProxyRequestsCall(String xManagementRequest, String clusterId, String kibanaPath, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/proxy/{kibana_path}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "kibana_path" + "\\}", apiClient.escapeString(kibanaPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xManagementRequest != null)
        localVarHeaderParams.put("X-Management-Request", apiClient.parameterToString(xManagementRequest));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postKibProxyRequestsValidateBeforeCall(String xManagementRequest, String clusterId, String kibanaPath, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xManagementRequest' is set
        if (xManagementRequest == null) {
            throw new ApiException("Missing the required parameter 'xManagementRequest' when calling postKibProxyRequests(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling postKibProxyRequests(Async)");
        }
        // verify the required parameter 'kibanaPath' is set
        if (kibanaPath == null) {
            throw new ApiException("Missing the required parameter 'kibanaPath' when calling postKibProxyRequests(Async)");
        }
        
        com.squareup.okhttp.Call call = postKibProxyRequestsCall(xManagementRequest, clusterId, kibanaPath, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Proxy HTTP POST request
     * Proxies the HTTP POST request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param body The JSON payload that is used to proxy the Kibana deployment. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postKibProxyRequests(String xManagementRequest, String clusterId, String kibanaPath, String body) throws ApiException {
        postKibProxyRequestsWithHttpInfo(xManagementRequest, clusterId, kibanaPath, body);
    }

    /**
     * Proxy HTTP POST request
     * Proxies the HTTP POST request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param body The JSON payload that is used to proxy the Kibana deployment. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postKibProxyRequestsWithHttpInfo(String xManagementRequest, String clusterId, String kibanaPath, String body) throws ApiException {
        com.squareup.okhttp.Call call = postKibProxyRequestsValidateBeforeCall(xManagementRequest, clusterId, kibanaPath, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Proxy HTTP POST request (asynchronously)
     * Proxies the HTTP POST request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param body The JSON payload that is used to proxy the Kibana deployment. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postKibProxyRequestsAsync(String xManagementRequest, String clusterId, String kibanaPath, String body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postKibProxyRequestsValidateBeforeCall(xManagementRequest, clusterId, kibanaPath, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for putKibProxyRequests
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param body The JSON payload that is used to proxy the Kibana deployment. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putKibProxyRequestsCall(String xManagementRequest, String clusterId, String kibanaPath, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/proxy/{kibana_path}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "kibana_path" + "\\}", apiClient.escapeString(kibanaPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xManagementRequest != null)
        localVarHeaderParams.put("X-Management-Request", apiClient.parameterToString(xManagementRequest));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putKibProxyRequestsValidateBeforeCall(String xManagementRequest, String clusterId, String kibanaPath, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xManagementRequest' is set
        if (xManagementRequest == null) {
            throw new ApiException("Missing the required parameter 'xManagementRequest' when calling putKibProxyRequests(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling putKibProxyRequests(Async)");
        }
        // verify the required parameter 'kibanaPath' is set
        if (kibanaPath == null) {
            throw new ApiException("Missing the required parameter 'kibanaPath' when calling putKibProxyRequests(Async)");
        }
        
        com.squareup.okhttp.Call call = putKibProxyRequestsCall(xManagementRequest, clusterId, kibanaPath, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Proxy HTTP PUT request
     * Proxies the HTTP PUT request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param body The JSON payload that is used to proxy the Kibana deployment. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putKibProxyRequests(String xManagementRequest, String clusterId, String kibanaPath, String body) throws ApiException {
        putKibProxyRequestsWithHttpInfo(xManagementRequest, clusterId, kibanaPath, body);
    }

    /**
     * Proxy HTTP PUT request
     * Proxies the HTTP PUT request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param body The JSON payload that is used to proxy the Kibana deployment. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putKibProxyRequestsWithHttpInfo(String xManagementRequest, String clusterId, String kibanaPath, String body) throws ApiException {
        com.squareup.okhttp.Call call = putKibProxyRequestsValidateBeforeCall(xManagementRequest, clusterId, kibanaPath, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Proxy HTTP PUT request (asynchronously)
     * Proxies the HTTP PUT request to the cluster. You must specify the &#x60;X-Management-Request&#x60; HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
     * @param xManagementRequest When set to &#x60;true&#x60;, includes the X-Management-Request header value. (required)
     * @param clusterId The Kibana deployment identifier (required)
     * @param kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status (required)
     * @param body The JSON payload that is used to proxy the Kibana deployment. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putKibProxyRequestsAsync(String xManagementRequest, String clusterId, String kibanaPath, String body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putKibProxyRequestsValidateBeforeCall(xManagementRequest, clusterId, kibanaPath, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for restartKibanaCluster
     * @param clusterId The Kibana deployment identifier. (required)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restartKibanaClusterCall(String clusterId, Boolean cancelPending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/_restart"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cancelPending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cancel_pending", cancelPending));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restartKibanaClusterValidateBeforeCall(String clusterId, Boolean cancelPending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling restartKibanaCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = restartKibanaClusterCall(clusterId, cancelPending, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Restart cluster
     * Restarts the Kibana instance. When you restart an active instance, the existing plan is used and a &#x60;cluster_reboot&#x60; is applied. A &#x60;cluster_reboot&#x60; issues a Kibana restart command, then waits for the command to complete. When you restart an inactive instance, the most recent successful plan is applied.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse restartKibanaCluster(String clusterId, Boolean cancelPending) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = restartKibanaClusterWithHttpInfo(clusterId, cancelPending);
        return resp.getData();
    }

    /**
     * Restart cluster
     * Restarts the Kibana instance. When you restart an active instance, the existing plan is used and a &#x60;cluster_reboot&#x60; is applied. A &#x60;cluster_reboot&#x60; issues a Kibana restart command, then waits for the command to complete. When you restart an inactive instance, the most recent successful plan is applied.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> restartKibanaClusterWithHttpInfo(String clusterId, Boolean cancelPending) throws ApiException {
        com.squareup.okhttp.Call call = restartKibanaClusterValidateBeforeCall(clusterId, cancelPending, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restart cluster (asynchronously)
     * Restarts the Kibana instance. When you restart an active instance, the existing plan is used and a &#x60;cluster_reboot&#x60; is applied. A &#x60;cluster_reboot&#x60; issues a Kibana restart command, then waits for the command to complete. When you restart an inactive instance, the most recent successful plan is applied.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restartKibanaClusterAsync(String clusterId, Boolean cancelPending, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restartKibanaClusterValidateBeforeCall(clusterId, cancelPending, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncKibanaCluster
     * @param clusterId The Kibana instance identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncKibanaClusterCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/_resync"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncKibanaClusterValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling resyncKibanaCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = resyncKibanaClusterCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize cluster
     * Immediately resynchronizes the search index and cache for the selected Kibana instance.
     * @param clusterId The Kibana instance identifier. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse resyncKibanaCluster(String clusterId) throws ApiException {
        ApiResponse<EmptyResponse> resp = resyncKibanaClusterWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Resynchronize cluster
     * Immediately resynchronizes the search index and cache for the selected Kibana instance.
     * @param clusterId The Kibana instance identifier. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> resyncKibanaClusterWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = resyncKibanaClusterValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize cluster (asynchronously)
     * Immediately resynchronizes the search index and cache for the selected Kibana instance.
     * @param clusterId The Kibana instance identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncKibanaClusterAsync(String clusterId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncKibanaClusterValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncKibanaClusters
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncKibanaClustersCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/_resync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skipMatchingVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_matching_version", skipMatchingVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncKibanaClustersValidateBeforeCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = resyncKibanaClustersCall(skipMatchingVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize clusters
     * Asynchronously resynchronizes the search index for all Kibana instances.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ModelVersionIndexSynchronizationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelVersionIndexSynchronizationResults resyncKibanaClusters(Boolean skipMatchingVersion) throws ApiException {
        ApiResponse<ModelVersionIndexSynchronizationResults> resp = resyncKibanaClustersWithHttpInfo(skipMatchingVersion);
        return resp.getData();
    }

    /**
     * Resynchronize clusters
     * Asynchronously resynchronizes the search index for all Kibana instances.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ApiResponse&lt;ModelVersionIndexSynchronizationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelVersionIndexSynchronizationResults> resyncKibanaClustersWithHttpInfo(Boolean skipMatchingVersion) throws ApiException {
        com.squareup.okhttp.Call call = resyncKibanaClustersValidateBeforeCall(skipMatchingVersion, null, null);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize clusters (asynchronously)
     * Asynchronously resynchronizes the search index for all Kibana instances.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncKibanaClustersAsync(Boolean skipMatchingVersion, final ApiCallback<ModelVersionIndexSynchronizationResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncKibanaClustersValidateBeforeCall(skipMatchingVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchKibanaClusters
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchKibanaClustersCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchKibanaClustersValidateBeforeCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchKibanaClustersCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search clusters
     * Retrieves the information for all of the Kibana instances that match the specified query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @return KibanaClustersInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KibanaClustersInfo searchKibanaClusters(SearchRequest body) throws ApiException {
        ApiResponse<KibanaClustersInfo> resp = searchKibanaClustersWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Search clusters
     * Retrieves the information for all of the Kibana instances that match the specified query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @return ApiResponse&lt;KibanaClustersInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KibanaClustersInfo> searchKibanaClustersWithHttpInfo(SearchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = searchKibanaClustersValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<KibanaClustersInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search clusters (asynchronously)
     * Retrieves the information for all of the Kibana instances that match the specified query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchKibanaClustersAsync(SearchRequest body, final ApiCallback<KibanaClustersInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchKibanaClustersValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KibanaClustersInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setKibanaClusterMetadataRaw
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setKibanaClusterMetadataRawCall(String body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/metadata/raw"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setKibanaClusterMetadataRawValidateBeforeCall(String body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setKibanaClusterMetadataRaw(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setKibanaClusterMetadataRaw(Async)");
        }
        
        com.squareup.okhttp.Call call = setKibanaClusterMetadataRawCall(body, clusterId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cluster metadata
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the Kibana instance. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object setKibanaClusterMetadataRaw(String body, String clusterId, Integer version) throws ApiException {
        ApiResponse<Object> resp = setKibanaClusterMetadataRawWithHttpInfo(body, clusterId, version);
        return resp.getData();
    }

    /**
     * Set cluster metadata
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the Kibana instance. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> setKibanaClusterMetadataRawWithHttpInfo(String body, String clusterId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = setKibanaClusterMetadataRawValidateBeforeCall(body, clusterId, version, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cluster metadata (asynchronously)
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the Kibana instance. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setKibanaClusterMetadataRawAsync(String body, String clusterId, Integer version, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setKibanaClusterMetadataRawValidateBeforeCall(body, clusterId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setKibanaClusterName
     * @param clusterId The Kibana deployment identifier. (required)
     * @param newName The new name for the cluster. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setKibanaClusterNameCall(String clusterId, String newName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/metadata/name/{new_name}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "new_name" + "\\}", apiClient.escapeString(newName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setKibanaClusterNameValidateBeforeCall(String clusterId, String newName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setKibanaClusterName(Async)");
        }
        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling setKibanaClusterName(Async)");
        }
        
        com.squareup.okhttp.Call call = setKibanaClusterNameCall(clusterId, newName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cluster name
     * Assigns a name to the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param newName The new name for the cluster. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse setKibanaClusterName(String clusterId, String newName) throws ApiException {
        ApiResponse<EmptyResponse> resp = setKibanaClusterNameWithHttpInfo(clusterId, newName);
        return resp.getData();
    }

    /**
     * Set cluster name
     * Assigns a name to the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param newName The new name for the cluster. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> setKibanaClusterNameWithHttpInfo(String clusterId, String newName) throws ApiException {
        com.squareup.okhttp.Call call = setKibanaClusterNameValidateBeforeCall(clusterId, newName, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cluster name (asynchronously)
     * Assigns a name to the Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param newName The new name for the cluster. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setKibanaClusterNameAsync(String clusterId, String newName, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setKibanaClusterNameValidateBeforeCall(clusterId, newName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shutdownKibanaCluster
     * @param clusterId The Kibana deployment identifier. (required)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shutdownKibanaClusterCall(String clusterId, Boolean hide, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/_shutdown"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hide != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hide", hide));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shutdownKibanaClusterValidateBeforeCall(String clusterId, Boolean hide, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling shutdownKibanaCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = shutdownKibanaClusterCall(clusterId, hide, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Shut down cluster
     * Shuts down the active Kibana instance and removes all of the instance nodes. The instance definition is retained. WARNING: To avoid data loss, save the snapshot repository before you shut down the instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse shutdownKibanaCluster(String clusterId, Boolean hide) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = shutdownKibanaClusterWithHttpInfo(clusterId, hide);
        return resp.getData();
    }

    /**
     * Shut down cluster
     * Shuts down the active Kibana instance and removes all of the instance nodes. The instance definition is retained. WARNING: To avoid data loss, save the snapshot repository before you shut down the instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> shutdownKibanaClusterWithHttpInfo(String clusterId, Boolean hide) throws ApiException {
        com.squareup.okhttp.Call call = shutdownKibanaClusterValidateBeforeCall(clusterId, hide, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Shut down cluster (asynchronously)
     * Shuts down the active Kibana instance and removes all of the instance nodes. The instance definition is retained. WARNING: To avoid data loss, save the snapshot repository before you shut down the instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shutdownKibanaClusterAsync(String clusterId, Boolean hide, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shutdownKibanaClusterValidateBeforeCall(clusterId, hide, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startKibanaClusterInstances
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startKibanaClusterInstancesCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/instances/{instance_ids}/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startKibanaClusterInstancesValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startKibanaClusterInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling startKibanaClusterInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = startKibanaClusterInstancesCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start instances
     * Starts the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startKibanaClusterInstances(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startKibanaClusterInstancesWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Start instances
     * Starts the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startKibanaClusterInstancesWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = startKibanaClusterInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start instances (asynchronously)
     * Starts the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startKibanaClusterInstancesAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startKibanaClusterInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startKibanaClusterInstancesAll
     * @param clusterId The Kibana deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startKibanaClusterInstancesAllCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/instances/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startKibanaClusterInstancesAllValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startKibanaClusterInstancesAll(Async)");
        }
        
        com.squareup.okhttp.Call call = startKibanaClusterInstancesAllCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start all instances
     * Starts all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startKibanaClusterInstancesAll(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startKibanaClusterInstancesAllWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Start all instances
     * Starts all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startKibanaClusterInstancesAllWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = startKibanaClusterInstancesAllValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start all instances (asynchronously)
     * Starts all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startKibanaClusterInstancesAllAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startKibanaClusterInstancesAllValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startKibanaClusterInstancesAllMaintenanceMode
     * @param clusterId The Kibana deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startKibanaClusterInstancesAllMaintenanceModeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/instances/maintenance-mode/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startKibanaClusterInstancesAllMaintenanceModeValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startKibanaClusterInstancesAllMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = startKibanaClusterInstancesAllMaintenanceModeCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start maintenance mode all instances
     * Starts maintenance mode on all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startKibanaClusterInstancesAllMaintenanceMode(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startKibanaClusterInstancesAllMaintenanceModeWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Start maintenance mode all instances
     * Starts maintenance mode on all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startKibanaClusterInstancesAllMaintenanceModeWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = startKibanaClusterInstancesAllMaintenanceModeValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start maintenance mode all instances (asynchronously)
     * Starts maintenance mode on all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startKibanaClusterInstancesAllMaintenanceModeAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startKibanaClusterInstancesAllMaintenanceModeValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startKibanaClusterMaintenanceMode
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startKibanaClusterMaintenanceModeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/instances/{instance_ids}/maintenance-mode/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startKibanaClusterMaintenanceModeValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startKibanaClusterMaintenanceMode(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling startKibanaClusterMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = startKibanaClusterMaintenanceModeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start maintenance mode
     * Starts maintenance mode on the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startKibanaClusterMaintenanceMode(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startKibanaClusterMaintenanceModeWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Start maintenance mode
     * Starts maintenance mode on the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startKibanaClusterMaintenanceModeWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = startKibanaClusterMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start maintenance mode (asynchronously)
     * Starts maintenance mode on the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startKibanaClusterMaintenanceModeAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startKibanaClusterMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopKibanaClusterInstances
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopKibanaClusterInstancesCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/instances/{instance_ids}/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopKibanaClusterInstancesValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopKibanaClusterInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling stopKibanaClusterInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = stopKibanaClusterInstancesCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop instances
     * Stops the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopKibanaClusterInstances(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopKibanaClusterInstancesWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Stop instances
     * Stops the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopKibanaClusterInstancesWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = stopKibanaClusterInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop instances (asynchronously)
     * Stops the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopKibanaClusterInstancesAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopKibanaClusterInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopKibanaClusterInstancesAll
     * @param clusterId The Kibana deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopKibanaClusterInstancesAllCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/instances/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopKibanaClusterInstancesAllValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopKibanaClusterInstancesAll(Async)");
        }
        
        com.squareup.okhttp.Call call = stopKibanaClusterInstancesAllCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop all instances
     * Stops all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopKibanaClusterInstancesAll(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopKibanaClusterInstancesAllWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Stop all instances
     * Stops all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopKibanaClusterInstancesAllWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = stopKibanaClusterInstancesAllValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop all instances (asynchronously)
     * Stops all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopKibanaClusterInstancesAllAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopKibanaClusterInstancesAllValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopKibanaClusterInstancesAllMaintenanceMode
     * @param clusterId The Kibana deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopKibanaClusterInstancesAllMaintenanceModeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/instances/maintenance-mode/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopKibanaClusterInstancesAllMaintenanceModeValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopKibanaClusterInstancesAllMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = stopKibanaClusterInstancesAllMaintenanceModeCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop maintenance mode all instances
     * Stops maintenance mode on all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopKibanaClusterInstancesAllMaintenanceMode(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopKibanaClusterInstancesAllMaintenanceModeWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Stop maintenance mode all instances
     * Stops maintenance mode on all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopKibanaClusterInstancesAllMaintenanceModeWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = stopKibanaClusterInstancesAllMaintenanceModeValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop maintenance mode all instances (asynchronously)
     * Stops maintenance mode on all of the Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopKibanaClusterInstancesAllMaintenanceModeAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopKibanaClusterInstancesAllMaintenanceModeValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopKibanaClusterMaintenanceMode
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopKibanaClusterMaintenanceModeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/instances/{instance_ids}/maintenance-mode/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopKibanaClusterMaintenanceModeValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopKibanaClusterMaintenanceMode(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling stopKibanaClusterMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = stopKibanaClusterMaintenanceModeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop maintenance mode
     * Stops maintenance mode on the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopKibanaClusterMaintenanceMode(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopKibanaClusterMaintenanceModeWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Stop maintenance mode
     * Stops maintenance mode on the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopKibanaClusterMaintenanceModeWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = stopKibanaClusterMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop maintenance mode (asynchronously)
     * Stops maintenance mode on the specified Kibana instances.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopKibanaClusterMaintenanceModeAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopKibanaClusterMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateKibanaClusterMetadataSettings
     * @param body The cluster settings including updated values (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateKibanaClusterMetadataSettingsCall(ClusterMetadataSettings body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/metadata/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateKibanaClusterMetadataSettingsValidateBeforeCall(ClusterMetadataSettings body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateKibanaClusterMetadataSettings(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling updateKibanaClusterMetadataSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = updateKibanaClusterMetadataSettingsCall(body, clusterId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cluster metadata settings
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied. Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     * @param body The cluster settings including updated values (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ClusterMetadataSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterMetadataSettings updateKibanaClusterMetadataSettings(ClusterMetadataSettings body, String clusterId, Integer version) throws ApiException {
        ApiResponse<ClusterMetadataSettings> resp = updateKibanaClusterMetadataSettingsWithHttpInfo(body, clusterId, version);
        return resp.getData();
    }

    /**
     * Update cluster metadata settings
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied. Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     * @param body The cluster settings including updated values (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;ClusterMetadataSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterMetadataSettings> updateKibanaClusterMetadataSettingsWithHttpInfo(ClusterMetadataSettings body, String clusterId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateKibanaClusterMetadataSettingsValidateBeforeCall(body, clusterId, version, null, null);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cluster metadata settings (asynchronously)
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied. Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     * @param body The cluster settings including updated values (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateKibanaClusterMetadataSettingsAsync(ClusterMetadataSettings body, String clusterId, Integer version, final ApiCallback<ClusterMetadataSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateKibanaClusterMetadataSettingsValidateBeforeCall(body, clusterId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateKibanaClusterPlan
     * @param body The update plan definition (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateKibanaClusterPlanCall(KibanaClusterPlan body, String clusterId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/plan"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateKibanaClusterPlanValidateBeforeCall(KibanaClusterPlan body, String clusterId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateKibanaClusterPlan(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling updateKibanaClusterPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = updateKibanaClusterPlanCall(body, clusterId, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update plan
     * Updates the configuration of the Kibana instance.
     * @param body The update plan definition (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @return ClusterCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCrudResponse updateKibanaClusterPlan(KibanaClusterPlan body, String clusterId, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterCrudResponse> resp = updateKibanaClusterPlanWithHttpInfo(body, clusterId, validateOnly);
        return resp.getData();
    }

    /**
     * Update plan
     * Updates the configuration of the Kibana instance.
     * @param body The update plan definition (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @return ApiResponse&lt;ClusterCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCrudResponse> updateKibanaClusterPlanWithHttpInfo(KibanaClusterPlan body, String clusterId, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = updateKibanaClusterPlanValidateBeforeCall(body, clusterId, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update plan (asynchronously)
     * Updates the configuration of the Kibana instance.
     * @param body The update plan definition (required)
     * @param clusterId The Kibana deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateKibanaClusterPlanAsync(KibanaClusterPlan body, String clusterId, Boolean validateOnly, final ApiCallback<ClusterCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateKibanaClusterPlanValidateBeforeCall(body, clusterId, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for upgradeKibanaCluster
     * @param clusterId The Kibana deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call upgradeKibanaClusterCall(String clusterId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/kibana/{cluster_id}/_upgrade"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call upgradeKibanaClusterValidateBeforeCall(String clusterId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling upgradeKibanaCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = upgradeKibanaClusterCall(clusterId, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upgrade cluster
     * Upgrades an active Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @return ClusterUpgradeInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterUpgradeInfo upgradeKibanaCluster(String clusterId, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterUpgradeInfo> resp = upgradeKibanaClusterWithHttpInfo(clusterId, validateOnly);
        return resp.getData();
    }

    /**
     * Upgrade cluster
     * Upgrades an active Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @return ApiResponse&lt;ClusterUpgradeInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterUpgradeInfo> upgradeKibanaClusterWithHttpInfo(String clusterId, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = upgradeKibanaClusterValidateBeforeCall(clusterId, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterUpgradeInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upgrade cluster (asynchronously)
     * Upgrades an active Kibana instance.
     * @param clusterId The Kibana deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call upgradeKibanaClusterAsync(String clusterId, Boolean validateOnly, final ApiCallback<ClusterUpgradeInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = upgradeKibanaClusterValidateBeforeCall(clusterId, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterUpgradeInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
