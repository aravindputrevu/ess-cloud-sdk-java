/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApmCrudResponse;
import io.swagger.client.model.ApmInfo;
import io.swagger.client.model.ApmPlan;
import io.swagger.client.model.ApmPlansInfo;
import io.swagger.client.model.ApmsInfo;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.ClusterCommandResponse;
import io.swagger.client.model.ClusterMetadataSettings;
import io.swagger.client.model.ClusterUpgradeInfo;
import io.swagger.client.model.CreateApmRequest;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.ModelVersionIndexSynchronizationResults;
import io.swagger.client.model.SearchRequest;
import io.swagger.client.model.TransientApmPlanConfiguration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClustersApmApi {
    private ApiClient apiClient;

    public ClustersApmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClustersApmApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelApmPendingPlan
     * @param clusterId The APM deployment identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelApmPendingPlanCall(String clusterId, Boolean ignoreMissing, Boolean forceDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/plan/pending"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));
        if (forceDelete != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_delete", forceDelete));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelApmPendingPlanValidateBeforeCall(String clusterId, Boolean ignoreMissing, Boolean forceDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling cancelApmPendingPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelApmPendingPlanCall(clusterId, ignoreMissing, forceDelete, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel pending plan
     * Cancels the pending plan of an APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @return ApmCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmCrudResponse cancelApmPendingPlan(String clusterId, Boolean ignoreMissing, Boolean forceDelete) throws ApiException {
        ApiResponse<ApmCrudResponse> resp = cancelApmPendingPlanWithHttpInfo(clusterId, ignoreMissing, forceDelete);
        return resp.getData();
    }

    /**
     * Cancel pending plan
     * Cancels the pending plan of an APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @return ApiResponse&lt;ApmCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmCrudResponse> cancelApmPendingPlanWithHttpInfo(String clusterId, Boolean ignoreMissing, Boolean forceDelete) throws ApiException {
        com.squareup.okhttp.Call call = cancelApmPendingPlanValidateBeforeCall(clusterId, ignoreMissing, forceDelete, null, null);
        Type localVarReturnType = new TypeToken<ApmCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel pending plan (asynchronously)
     * Cancels the pending plan of an APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelApmPendingPlanAsync(String clusterId, Boolean ignoreMissing, Boolean forceDelete, final ApiCallback<ApmCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelApmPendingPlanValidateBeforeCall(clusterId, ignoreMissing, forceDelete, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createApm
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createApmCall(CreateApmRequest body, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/apm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createApmValidateBeforeCall(CreateApmRequest body, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createApm(Async)");
        }
        
        com.squareup.okhttp.Call call = createApmCall(body, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create cluster
     * Creates an APM cluster for a given Elasticsearch cluster.
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @return ApmCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmCrudResponse createApm(CreateApmRequest body, Boolean validateOnly) throws ApiException {
        ApiResponse<ApmCrudResponse> resp = createApmWithHttpInfo(body, validateOnly);
        return resp.getData();
    }

    /**
     * Create cluster
     * Creates an APM cluster for a given Elasticsearch cluster.
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @return ApiResponse&lt;ApmCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmCrudResponse> createApmWithHttpInfo(CreateApmRequest body, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = createApmValidateBeforeCall(body, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ApmCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create cluster (asynchronously)
     * Creates an APM cluster for a given Elasticsearch cluster.
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createApmAsync(CreateApmRequest body, Boolean validateOnly, final ApiCallback<ApmCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createApmValidateBeforeCall(body, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteApm
     * @param clusterId The APM deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteApmCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteApmValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling deleteApm(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteApmCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete cluster
     * Deletes an APM cluster. Requires that you have already successfully issued &#x60;_shutdown&#x60; command against the cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteApm(String clusterId) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteApmWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Delete cluster
     * Deletes an APM cluster. Requires that you have already successfully issued &#x60;_shutdown&#x60; command against the cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteApmWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = deleteApmValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete cluster (asynchronously)
     * Deletes an APM cluster. Requires that you have already successfully issued &#x60;_shutdown&#x60; command against the cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteApmAsync(String clusterId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteApmValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApmCluster
     * @param clusterId The APM deployment identifier. (required)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApmClusterCall(String clusterId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApmClusterValidateBeforeCall(String clusterId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getApmCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = getApmClusterCall(clusterId, showMetadata, showPlans, showPlanLogs, showPlanDefaults, showSettings, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster
     * Retrieves cluster information for a APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @return ApmInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmInfo getApmCluster(String clusterId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean showSettings) throws ApiException {
        ApiResponse<ApmInfo> resp = getApmClusterWithHttpInfo(clusterId, showMetadata, showPlans, showPlanLogs, showPlanDefaults, showSettings);
        return resp.getData();
    }

    /**
     * Get cluster
     * Retrieves cluster information for a APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @return ApiResponse&lt;ApmInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmInfo> getApmClusterWithHttpInfo(String clusterId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean showSettings) throws ApiException {
        com.squareup.okhttp.Call call = getApmClusterValidateBeforeCall(clusterId, showMetadata, showPlans, showPlanLogs, showPlanDefaults, showSettings, null, null);
        Type localVarReturnType = new TypeToken<ApmInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster (asynchronously)
     * Retrieves cluster information for a APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApmClusterAsync(String clusterId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean showSettings, final ApiCallback<ApmInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApmClusterValidateBeforeCall(clusterId, showMetadata, showPlans, showPlanLogs, showPlanDefaults, showSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApmClusterPlanActivity
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApmClusterPlanActivityCall(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/plan/activity"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApmClusterPlanActivityValidateBeforeCall(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getApmClusterPlanActivity(Async)");
        }
        
        com.squareup.okhttp.Call call = getApmClusterPlanActivityCall(clusterId, showPlanLogs, showPlanDefaults, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get plan activity
     * Retrieves the current and historical plan information for a APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @return ApmPlansInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmPlansInfo getApmClusterPlanActivity(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults) throws ApiException {
        ApiResponse<ApmPlansInfo> resp = getApmClusterPlanActivityWithHttpInfo(clusterId, showPlanLogs, showPlanDefaults);
        return resp.getData();
    }

    /**
     * Get plan activity
     * Retrieves the current and historical plan information for a APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @return ApiResponse&lt;ApmPlansInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmPlansInfo> getApmClusterPlanActivityWithHttpInfo(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults) throws ApiException {
        com.squareup.okhttp.Call call = getApmClusterPlanActivityValidateBeforeCall(clusterId, showPlanLogs, showPlanDefaults, null, null);
        Type localVarReturnType = new TypeToken<ApmPlansInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get plan activity (asynchronously)
     * Retrieves the current and historical plan information for a APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApmClusterPlanActivityAsync(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, final ApiCallback<ApmPlansInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApmClusterPlanActivityValidateBeforeCall(clusterId, showPlanLogs, showPlanDefaults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmPlansInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApmClusters
     * @param from The number of clusters to skip. (optional)
     * @param size The maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses. (optional)
     * @param q An optional query to filter APM clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApmClustersCall(Integer from, Integer size, String q, Boolean showMetadata, Boolean showPlans, Boolean showHidden, Boolean showPlanDefaults, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showHidden != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_hidden", showHidden));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApmClustersValidateBeforeCall(Integer from, Integer size, String q, Boolean showMetadata, Boolean showPlans, Boolean showHidden, Boolean showPlanDefaults, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getApmClustersCall(from, size, q, showMetadata, showPlans, showHidden, showPlanDefaults, showSettings, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get clusters
     * Retrieves cluster information for all APM clusters.
     * @param from The number of clusters to skip. (optional)
     * @param size The maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses. (optional)
     * @param q An optional query to filter APM clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @return ApmsInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmsInfo getApmClusters(Integer from, Integer size, String q, Boolean showMetadata, Boolean showPlans, Boolean showHidden, Boolean showPlanDefaults, Boolean showSettings) throws ApiException {
        ApiResponse<ApmsInfo> resp = getApmClustersWithHttpInfo(from, size, q, showMetadata, showPlans, showHidden, showPlanDefaults, showSettings);
        return resp.getData();
    }

    /**
     * Get clusters
     * Retrieves cluster information for all APM clusters.
     * @param from The number of clusters to skip. (optional)
     * @param size The maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses. (optional)
     * @param q An optional query to filter APM clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @return ApiResponse&lt;ApmsInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmsInfo> getApmClustersWithHttpInfo(Integer from, Integer size, String q, Boolean showMetadata, Boolean showPlans, Boolean showHidden, Boolean showPlanDefaults, Boolean showSettings) throws ApiException {
        com.squareup.okhttp.Call call = getApmClustersValidateBeforeCall(from, size, q, showMetadata, showPlans, showHidden, showPlanDefaults, showSettings, null, null);
        Type localVarReturnType = new TypeToken<ApmsInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get clusters (asynchronously)
     * Retrieves cluster information for all APM clusters.
     * @param from The number of clusters to skip. (optional)
     * @param size The maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses. (optional)
     * @param q An optional query to filter APM clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApmClustersAsync(Integer from, Integer size, String q, Boolean showMetadata, Boolean showPlans, Boolean showHidden, Boolean showPlanDefaults, Boolean showSettings, final ApiCallback<ApmsInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApmClustersValidateBeforeCall(from, size, q, showMetadata, showPlans, showHidden, showPlanDefaults, showSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmsInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApmMetadataRaw
     * @param clusterId The APM deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApmMetadataRawCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/metadata/raw"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApmMetadataRawValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getApmMetadataRaw(Async)");
        }
        
        com.squareup.okhttp.Call call = getApmMetadataRawCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster metadata
     * Advanced use only. Retrieves the internal metadata, in free-form JSON, for the APM instance.
     * @param clusterId The APM deployment identifier. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getApmMetadataRaw(String clusterId) throws ApiException {
        ApiResponse<Object> resp = getApmMetadataRawWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get cluster metadata
     * Advanced use only. Retrieves the internal metadata, in free-form JSON, for the APM instance.
     * @param clusterId The APM deployment identifier. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getApmMetadataRawWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getApmMetadataRawValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster metadata (asynchronously)
     * Advanced use only. Retrieves the internal metadata, in free-form JSON, for the APM instance.
     * @param clusterId The APM deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApmMetadataRawAsync(String clusterId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApmMetadataRawValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApmMetadataSettings
     * @param clusterId The APM deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApmMetadataSettingsCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/metadata/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApmMetadataSettingsValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getApmMetadataSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getApmMetadataSettingsCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster metadata settings
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     * @param clusterId The APM deployment identifier. (required)
     * @return ClusterMetadataSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterMetadataSettings getApmMetadataSettings(String clusterId) throws ApiException {
        ApiResponse<ClusterMetadataSettings> resp = getApmMetadataSettingsWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get cluster metadata settings
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     * @param clusterId The APM deployment identifier. (required)
     * @return ApiResponse&lt;ClusterMetadataSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterMetadataSettings> getApmMetadataSettingsWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getApmMetadataSettingsValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster metadata settings (asynchronously)
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     * @param clusterId The APM deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApmMetadataSettingsAsync(String clusterId, final ApiCallback<ClusterMetadataSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApmMetadataSettingsValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApmPendingPlan
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApmPendingPlanCall(String clusterId, Boolean showPlanDefaults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/plan/pending"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApmPendingPlanValidateBeforeCall(String clusterId, Boolean showPlanDefaults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getApmPendingPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = getApmPendingPlanCall(clusterId, showPlanDefaults, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get pending plan
     * Retrieves the pending plan of an APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @return ApmPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmPlan getApmPendingPlan(String clusterId, Boolean showPlanDefaults) throws ApiException {
        ApiResponse<ApmPlan> resp = getApmPendingPlanWithHttpInfo(clusterId, showPlanDefaults);
        return resp.getData();
    }

    /**
     * Get pending plan
     * Retrieves the pending plan of an APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @return ApiResponse&lt;ApmPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmPlan> getApmPendingPlanWithHttpInfo(String clusterId, Boolean showPlanDefaults) throws ApiException {
        com.squareup.okhttp.Call call = getApmPendingPlanValidateBeforeCall(clusterId, showPlanDefaults, null, null);
        Type localVarReturnType = new TypeToken<ApmPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pending plan (asynchronously)
     * Retrieves the pending plan of an APM cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApmPendingPlanAsync(String clusterId, Boolean showPlanDefaults, final ApiCallback<ApmPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApmPendingPlanValidateBeforeCall(clusterId, showPlanDefaults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApmPlan
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApmPlanCall(String clusterId, Boolean showPlanDefaults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/plan"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApmPlanValidateBeforeCall(String clusterId, Boolean showPlanDefaults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getApmPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = getApmPlanCall(clusterId, showPlanDefaults, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get plan
     * Retrieves the active plan of an APM cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @return ApmPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmPlan getApmPlan(String clusterId, Boolean showPlanDefaults) throws ApiException {
        ApiResponse<ApmPlan> resp = getApmPlanWithHttpInfo(clusterId, showPlanDefaults);
        return resp.getData();
    }

    /**
     * Get plan
     * Retrieves the active plan of an APM cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @return ApiResponse&lt;ApmPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmPlan> getApmPlanWithHttpInfo(String clusterId, Boolean showPlanDefaults) throws ApiException {
        com.squareup.okhttp.Call call = getApmPlanValidateBeforeCall(clusterId, showPlanDefaults, null, null);
        Type localVarReturnType = new TypeToken<ApmPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get plan (asynchronously)
     * Retrieves the active plan of an APM cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     * @param clusterId The APM deployment identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApmPlanAsync(String clusterId, Boolean showPlanDefaults, final ApiCallback<ApmPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApmPlanValidateBeforeCall(clusterId, showPlanDefaults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveApmInstances
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveApmInstancesCall(String clusterId, List<String> instanceIds, TransientApmPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/instances/{instance_ids}/_move"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));
        if (forceUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_update", forceUpdate));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveApmInstancesValidateBeforeCall(String clusterId, List<String> instanceIds, TransientApmPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling moveApmInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling moveApmInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = moveApmInstancesCall(clusterId, instanceIds, body, ignoreMissing, forceUpdate, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move instances
     * Moves one or more instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse moveApmInstances(String clusterId, List<String> instanceIds, TransientApmPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = moveApmInstancesWithHttpInfo(clusterId, instanceIds, body, ignoreMissing, forceUpdate, validateOnly);
        return resp.getData();
    }

    /**
     * Move instances
     * Moves one or more instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> moveApmInstancesWithHttpInfo(String clusterId, List<String> instanceIds, TransientApmPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = moveApmInstancesValidateBeforeCall(clusterId, instanceIds, body, ignoreMissing, forceUpdate, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move instances (asynchronously)
     * Moves one or more instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveApmInstancesAsync(String clusterId, List<String> instanceIds, TransientApmPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean validateOnly, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveApmInstancesValidateBeforeCall(clusterId, instanceIds, body, ignoreMissing, forceUpdate, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveApmInstancesAdvanced
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveApmInstancesAdvancedCall(TransientApmPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/instances/_move"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forceUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_update", forceUpdate));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveApmInstancesAdvancedValidateBeforeCall(TransientApmPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling moveApmInstancesAdvanced(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling moveApmInstancesAdvanced(Async)");
        }
        
        com.squareup.okhttp.Call call = moveApmInstancesAdvancedCall(body, clusterId, forceUpdate, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move instances (advanced)
     * Moves instances belonging to a Apm cluster, with custom configuration posted in the body.
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse moveApmInstancesAdvanced(TransientApmPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = moveApmInstancesAdvancedWithHttpInfo(body, clusterId, forceUpdate, validateOnly);
        return resp.getData();
    }

    /**
     * Move instances (advanced)
     * Moves instances belonging to a Apm cluster, with custom configuration posted in the body.
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> moveApmInstancesAdvancedWithHttpInfo(TransientApmPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = moveApmInstancesAdvancedValidateBeforeCall(body, clusterId, forceUpdate, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move instances (advanced) (asynchronously)
     * Moves instances belonging to a Apm cluster, with custom configuration posted in the body.
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveApmInstancesAdvancedAsync(TransientApmPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean validateOnly, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveApmInstancesAdvancedValidateBeforeCall(body, clusterId, forceUpdate, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resetApmSecretToken
     * @param clusterId APM instance identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetApmSecretTokenCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/_reset-token"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetApmSecretTokenValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling resetApmSecretToken(Async)");
        }
        
        com.squareup.okhttp.Call call = resetApmSecretTokenCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reset token
     * Resets the secret token for a given APM cluster.
     * @param clusterId APM instance identifier (required)
     * @return ApmCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmCrudResponse resetApmSecretToken(String clusterId) throws ApiException {
        ApiResponse<ApmCrudResponse> resp = resetApmSecretTokenWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Reset token
     * Resets the secret token for a given APM cluster.
     * @param clusterId APM instance identifier (required)
     * @return ApiResponse&lt;ApmCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmCrudResponse> resetApmSecretTokenWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = resetApmSecretTokenValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ApmCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reset token (asynchronously)
     * Resets the secret token for a given APM cluster.
     * @param clusterId APM instance identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetApmSecretTokenAsync(String clusterId, final ApiCallback<ApmCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetApmSecretTokenValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restartApm
     * @param clusterId The APM deployment identifier. (required)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restartApmCall(String clusterId, Boolean cancelPending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/_restart"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cancelPending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cancel_pending", cancelPending));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restartApmValidateBeforeCall(String clusterId, Boolean cancelPending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling restartApm(Async)");
        }
        
        com.squareup.okhttp.Call call = restartApmCall(clusterId, cancelPending, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Restart cluster
     * Restarts a Apm cluster. If a cluster is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a Apm restart command and waits for it to complete. If a cluster is inactive: this command starts it up with the most recent successful plan.
     * @param clusterId The APM deployment identifier. (required)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse restartApm(String clusterId, Boolean cancelPending) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = restartApmWithHttpInfo(clusterId, cancelPending);
        return resp.getData();
    }

    /**
     * Restart cluster
     * Restarts a Apm cluster. If a cluster is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a Apm restart command and waits for it to complete. If a cluster is inactive: this command starts it up with the most recent successful plan.
     * @param clusterId The APM deployment identifier. (required)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> restartApmWithHttpInfo(String clusterId, Boolean cancelPending) throws ApiException {
        com.squareup.okhttp.Call call = restartApmValidateBeforeCall(clusterId, cancelPending, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restart cluster (asynchronously)
     * Restarts a Apm cluster. If a cluster is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a Apm restart command and waits for it to complete. If a cluster is inactive: this command starts it up with the most recent successful plan.
     * @param clusterId The APM deployment identifier. (required)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restartApmAsync(String clusterId, Boolean cancelPending, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restartApmValidateBeforeCall(clusterId, cancelPending, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncApmCluster
     * @param clusterId The APM cluster identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncApmClusterCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/_resync"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncApmClusterValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling resyncApmCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = resyncApmClusterCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize cluster
     * Immediately resynchronizes the search index and cache for the selected APM cluster.
     * @param clusterId The APM cluster identifier. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse resyncApmCluster(String clusterId) throws ApiException {
        ApiResponse<EmptyResponse> resp = resyncApmClusterWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Resynchronize cluster
     * Immediately resynchronizes the search index and cache for the selected APM cluster.
     * @param clusterId The APM cluster identifier. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> resyncApmClusterWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = resyncApmClusterValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize cluster (asynchronously)
     * Immediately resynchronizes the search index and cache for the selected APM cluster.
     * @param clusterId The APM cluster identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncApmClusterAsync(String clusterId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncApmClusterValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncApmClusters
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncApmClustersCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/_resync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skipMatchingVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_matching_version", skipMatchingVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncApmClustersValidateBeforeCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = resyncApmClustersCall(skipMatchingVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize clusters
     * Asynchronously resynchronizes the search index for all APM clusters.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ModelVersionIndexSynchronizationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelVersionIndexSynchronizationResults resyncApmClusters(Boolean skipMatchingVersion) throws ApiException {
        ApiResponse<ModelVersionIndexSynchronizationResults> resp = resyncApmClustersWithHttpInfo(skipMatchingVersion);
        return resp.getData();
    }

    /**
     * Resynchronize clusters
     * Asynchronously resynchronizes the search index for all APM clusters.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ApiResponse&lt;ModelVersionIndexSynchronizationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelVersionIndexSynchronizationResults> resyncApmClustersWithHttpInfo(Boolean skipMatchingVersion) throws ApiException {
        com.squareup.okhttp.Call call = resyncApmClustersValidateBeforeCall(skipMatchingVersion, null, null);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize clusters (asynchronously)
     * Asynchronously resynchronizes the search index for all APM clusters.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncApmClustersAsync(Boolean skipMatchingVersion, final ApiCallback<ModelVersionIndexSynchronizationResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncApmClustersValidateBeforeCall(skipMatchingVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchApms
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchApmsCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchApmsValidateBeforeCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchApmsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search clusters
     * Retrieves cluster information for all Apm clusters that match a given query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @return ApmsInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmsInfo searchApms(SearchRequest body) throws ApiException {
        ApiResponse<ApmsInfo> resp = searchApmsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Search clusters
     * Retrieves cluster information for all Apm clusters that match a given query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @return ApiResponse&lt;ApmsInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmsInfo> searchApmsWithHttpInfo(SearchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = searchApmsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ApmsInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search clusters (asynchronously)
     * Retrieves cluster information for all Apm clusters that match a given query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchApmsAsync(SearchRequest body, final ApiCallback<ApmsInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchApmsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmsInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setApmMetadataRaw
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setApmMetadataRawCall(String body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/metadata/raw"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setApmMetadataRawValidateBeforeCall(String body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setApmMetadataRaw(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setApmMetadataRaw(Async)");
        }
        
        com.squareup.okhttp.Call call = setApmMetadataRawCall(body, clusterId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cluster metadata
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the APM instance. Only use the parameters to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object setApmMetadataRaw(String body, String clusterId, Integer version) throws ApiException {
        ApiResponse<Object> resp = setApmMetadataRawWithHttpInfo(body, clusterId, version);
        return resp.getData();
    }

    /**
     * Set cluster metadata
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the APM instance. Only use the parameters to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> setApmMetadataRawWithHttpInfo(String body, String clusterId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = setApmMetadataRawValidateBeforeCall(body, clusterId, version, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cluster metadata (asynchronously)
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the APM instance. Only use the parameters to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setApmMetadataRawAsync(String body, String clusterId, Integer version, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setApmMetadataRawValidateBeforeCall(body, clusterId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setApmName
     * @param clusterId The APM deployment identifier. (required)
     * @param newName The new name for the cluster. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setApmNameCall(String clusterId, String newName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/metadata/name/{new_name}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "new_name" + "\\}", apiClient.escapeString(newName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setApmNameValidateBeforeCall(String clusterId, String newName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setApmName(Async)");
        }
        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling setApmName(Async)");
        }
        
        com.squareup.okhttp.Call call = setApmNameCall(clusterId, newName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cluster name
     * Assigns a name to the APM instance.
     * @param clusterId The APM deployment identifier. (required)
     * @param newName The new name for the cluster. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse setApmName(String clusterId, String newName) throws ApiException {
        ApiResponse<EmptyResponse> resp = setApmNameWithHttpInfo(clusterId, newName);
        return resp.getData();
    }

    /**
     * Set cluster name
     * Assigns a name to the APM instance.
     * @param clusterId The APM deployment identifier. (required)
     * @param newName The new name for the cluster. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> setApmNameWithHttpInfo(String clusterId, String newName) throws ApiException {
        com.squareup.okhttp.Call call = setApmNameValidateBeforeCall(clusterId, newName, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cluster name (asynchronously)
     * Assigns a name to the APM instance.
     * @param clusterId The APM deployment identifier. (required)
     * @param newName The new name for the cluster. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setApmNameAsync(String clusterId, String newName, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setApmNameValidateBeforeCall(clusterId, newName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shutdownApm
     * @param clusterId The APM deployment identifier. (required)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shutdownApmCall(String clusterId, Boolean hide, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/_shutdown"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hide != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hide", hide));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shutdownApmValidateBeforeCall(String clusterId, Boolean hide, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling shutdownApm(Async)");
        }
        
        com.squareup.okhttp.Call call = shutdownApmCall(clusterId, hide, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Shut down cluster
     * Shuts down a running cluster and removes all nodes belonging to the cluster. The cluster definition is retained. Warning: this will lose all cluster data that is not saved in a snapshot repository.
     * @param clusterId The APM deployment identifier. (required)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse shutdownApm(String clusterId, Boolean hide) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = shutdownApmWithHttpInfo(clusterId, hide);
        return resp.getData();
    }

    /**
     * Shut down cluster
     * Shuts down a running cluster and removes all nodes belonging to the cluster. The cluster definition is retained. Warning: this will lose all cluster data that is not saved in a snapshot repository.
     * @param clusterId The APM deployment identifier. (required)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> shutdownApmWithHttpInfo(String clusterId, Boolean hide) throws ApiException {
        com.squareup.okhttp.Call call = shutdownApmValidateBeforeCall(clusterId, hide, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Shut down cluster (asynchronously)
     * Shuts down a running cluster and removes all nodes belonging to the cluster. The cluster definition is retained. Warning: this will lose all cluster data that is not saved in a snapshot repository.
     * @param clusterId The APM deployment identifier. (required)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shutdownApmAsync(String clusterId, Boolean hide, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shutdownApmValidateBeforeCall(clusterId, hide, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startApmInstances
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startApmInstancesCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/instances/{instance_ids}/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startApmInstancesValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startApmInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling startApmInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = startApmInstancesCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start instances
     * Starts the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startApmInstances(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startApmInstancesWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Start instances
     * Starts the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startApmInstancesWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = startApmInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start instances (asynchronously)
     * Starts the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startApmInstancesAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startApmInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startApmInstancesAll
     * @param clusterId The APM deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startApmInstancesAllCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/instances/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startApmInstancesAllValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startApmInstancesAll(Async)");
        }
        
        com.squareup.okhttp.Call call = startApmInstancesAllCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start all instances
     * Starts all the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startApmInstancesAll(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startApmInstancesAllWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Start all instances
     * Starts all the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startApmInstancesAllWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = startApmInstancesAllValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start all instances (asynchronously)
     * Starts all the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startApmInstancesAllAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startApmInstancesAllValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startApmInstancesAllMaintenanceMode
     * @param clusterId The APM deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startApmInstancesAllMaintenanceModeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/instances/maintenance-mode/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startApmInstancesAllMaintenanceModeValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startApmInstancesAllMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = startApmInstancesAllMaintenanceModeCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start maintenance mode all instances
     * Starts maintenance mode of all instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startApmInstancesAllMaintenanceMode(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startApmInstancesAllMaintenanceModeWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Start maintenance mode all instances
     * Starts maintenance mode of all instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startApmInstancesAllMaintenanceModeWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = startApmInstancesAllMaintenanceModeValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start maintenance mode all instances (asynchronously)
     * Starts maintenance mode of all instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startApmInstancesAllMaintenanceModeAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startApmInstancesAllMaintenanceModeValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startApmMaintenanceMode
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startApmMaintenanceModeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/instances/{instance_ids}/maintenance-mode/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startApmMaintenanceModeValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startApmMaintenanceMode(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling startApmMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = startApmMaintenanceModeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start maintenance mode
     * Starts maintenance mode of instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startApmMaintenanceMode(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startApmMaintenanceModeWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Start maintenance mode
     * Starts maintenance mode of instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startApmMaintenanceModeWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = startApmMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start maintenance mode (asynchronously)
     * Starts maintenance mode of instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startApmMaintenanceModeAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startApmMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopApmInstances
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopApmInstancesCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/instances/{instance_ids}/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopApmInstancesValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopApmInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling stopApmInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = stopApmInstancesCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop instances
     * Stops the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopApmInstances(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopApmInstancesWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Stop instances
     * Stops the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopApmInstancesWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = stopApmInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop instances (asynchronously)
     * Stops the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopApmInstancesAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopApmInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopApmInstancesAll
     * @param clusterId The APM deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopApmInstancesAllCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/instances/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopApmInstancesAllValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopApmInstancesAll(Async)");
        }
        
        com.squareup.okhttp.Call call = stopApmInstancesAllCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop all instances
     * Stops all the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopApmInstancesAll(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopApmInstancesAllWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Stop all instances
     * Stops all the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopApmInstancesAllWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = stopApmInstancesAllValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop all instances (asynchronously)
     * Stops all the instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopApmInstancesAllAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopApmInstancesAllValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopApmInstancesAllMaintenanceMode
     * @param clusterId The APM deployment identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopApmInstancesAllMaintenanceModeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/instances/maintenance-mode/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopApmInstancesAllMaintenanceModeValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopApmInstancesAllMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = stopApmInstancesAllMaintenanceModeCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop maintenance mode all instances
     * Stops maintenance mode of all instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopApmInstancesAllMaintenanceMode(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopApmInstancesAllMaintenanceModeWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Stop maintenance mode all instances
     * Stops maintenance mode of all instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopApmInstancesAllMaintenanceModeWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = stopApmInstancesAllMaintenanceModeValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop maintenance mode all instances (asynchronously)
     * Stops maintenance mode of all instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopApmInstancesAllMaintenanceModeAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopApmInstancesAllMaintenanceModeValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopApmMaintenanceMode
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopApmMaintenanceModeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/instances/{instance_ids}/maintenance-mode/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopApmMaintenanceModeValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopApmMaintenanceMode(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling stopApmMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = stopApmMaintenanceModeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop maintenance mode
     * Stops maintenance mode of instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopApmMaintenanceMode(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopApmMaintenanceModeWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Stop maintenance mode
     * Stops maintenance mode of instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopApmMaintenanceModeWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = stopApmMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop maintenance mode (asynchronously)
     * Stops maintenance mode of instances belonging to a Apm cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopApmMaintenanceModeAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopApmMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateApmMetadataSettings
     * @param body The cluster settings including updated values (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateApmMetadataSettingsCall(ClusterMetadataSettings body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/metadata/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateApmMetadataSettingsValidateBeforeCall(ClusterMetadataSettings body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateApmMetadataSettings(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling updateApmMetadataSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = updateApmMetadataSettingsCall(body, clusterId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cluster metadata settings
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied.Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     * @param body The cluster settings including updated values (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ClusterMetadataSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterMetadataSettings updateApmMetadataSettings(ClusterMetadataSettings body, String clusterId, Integer version) throws ApiException {
        ApiResponse<ClusterMetadataSettings> resp = updateApmMetadataSettingsWithHttpInfo(body, clusterId, version);
        return resp.getData();
    }

    /**
     * Update cluster metadata settings
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied.Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     * @param body The cluster settings including updated values (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;ClusterMetadataSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterMetadataSettings> updateApmMetadataSettingsWithHttpInfo(ClusterMetadataSettings body, String clusterId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateApmMetadataSettingsValidateBeforeCall(body, clusterId, version, null, null);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cluster metadata settings (asynchronously)
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied.Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     * @param body The cluster settings including updated values (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateApmMetadataSettingsAsync(ClusterMetadataSettings body, String clusterId, Integer version, final ApiCallback<ClusterMetadataSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateApmMetadataSettingsValidateBeforeCall(body, clusterId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateApmPlan
     * @param body The update plan definition (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateApmPlanCall(ApmPlan body, String clusterId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/plan"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateApmPlanValidateBeforeCall(ApmPlan body, String clusterId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateApmPlan(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling updateApmPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = updateApmPlanCall(body, clusterId, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update plan
     * Updates the configuration of an existing Apm cluster.
     * @param body The update plan definition (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @return ApmCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmCrudResponse updateApmPlan(ApmPlan body, String clusterId, Boolean validateOnly) throws ApiException {
        ApiResponse<ApmCrudResponse> resp = updateApmPlanWithHttpInfo(body, clusterId, validateOnly);
        return resp.getData();
    }

    /**
     * Update plan
     * Updates the configuration of an existing Apm cluster.
     * @param body The update plan definition (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @return ApiResponse&lt;ApmCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmCrudResponse> updateApmPlanWithHttpInfo(ApmPlan body, String clusterId, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = updateApmPlanValidateBeforeCall(body, clusterId, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ApmCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update plan (asynchronously)
     * Updates the configuration of an existing Apm cluster.
     * @param body The update plan definition (required)
     * @param clusterId The APM deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateApmPlanAsync(ApmPlan body, String clusterId, Boolean validateOnly, final ApiCallback<ApmCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateApmPlanValidateBeforeCall(body, clusterId, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for upgradeApm
     * @param clusterId The APM deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call upgradeApmCall(String clusterId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/apm/{cluster_id}/_upgrade"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call upgradeApmValidateBeforeCall(String clusterId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling upgradeApm(Async)");
        }
        
        com.squareup.okhttp.Call call = upgradeApmCall(clusterId, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upgrade cluster
     * Upgrades a running cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @return ClusterUpgradeInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterUpgradeInfo upgradeApm(String clusterId, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterUpgradeInfo> resp = upgradeApmWithHttpInfo(clusterId, validateOnly);
        return resp.getData();
    }

    /**
     * Upgrade cluster
     * Upgrades a running cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @return ApiResponse&lt;ClusterUpgradeInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterUpgradeInfo> upgradeApmWithHttpInfo(String clusterId, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = upgradeApmValidateBeforeCall(clusterId, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterUpgradeInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upgrade cluster (asynchronously)
     * Upgrades a running cluster.
     * @param clusterId The APM deployment identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call upgradeApmAsync(String clusterId, Boolean validateOnly, final ApiCallback<ClusterUpgradeInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = upgradeApmValidateBeforeCall(clusterId, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterUpgradeInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
