/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApmResourceInfo;
import io.swagger.client.model.AppSearchResourceInfo;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.DeploymentCreateRequest;
import io.swagger.client.model.DeploymentCreateResponse;
import io.swagger.client.model.DeploymentDeleteResponse;
import io.swagger.client.model.DeploymentGetResponse;
import io.swagger.client.model.DeploymentResourceCommandResponse;
import io.swagger.client.model.DeploymentResourceCrudResponse;
import io.swagger.client.model.DeploymentResourceUpgradeResponse;
import io.swagger.client.model.DeploymentRestoreResponse;
import io.swagger.client.model.DeploymentShutdownResponse;
import io.swagger.client.model.DeploymentUpdateRequest;
import io.swagger.client.model.DeploymentUpdateResponse;
import io.swagger.client.model.DeploymentsListResponse;
import io.swagger.client.model.DeploymentsSearchResponse;
import io.swagger.client.model.ElasticsearchResourceInfo;
import io.swagger.client.model.IndexSynchronizationResults;
import io.swagger.client.model.KibanaResourceInfo;
import io.swagger.client.model.Note;
import io.swagger.client.model.Notes;
import io.swagger.client.model.SearchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeploymentsApi {
    private ApiClient apiClient;

    public DeploymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeploymentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelDeploymentResourcePendingPlan
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are missing. The default is &#x60;false&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelDeploymentResourcePendingPlanCall(String deploymentId, String resourceKind, String refId, Boolean forceDelete, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/plan/pending"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forceDelete != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_delete", forceDelete));
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelDeploymentResourcePendingPlanValidateBeforeCall(String deploymentId, String resourceKind, String refId, Boolean forceDelete, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling cancelDeploymentResourcePendingPlan(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling cancelDeploymentResourcePendingPlan(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling cancelDeploymentResourcePendingPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelDeploymentResourcePendingPlanCall(deploymentId, resourceKind, refId, forceDelete, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel resource pending plan
     * Cancels the pending plan of a Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are missing. The default is &#x60;false&#x60;. (optional)
     * @return DeploymentResourceCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCrudResponse cancelDeploymentResourcePendingPlan(String deploymentId, String resourceKind, String refId, Boolean forceDelete, Boolean ignoreMissing) throws ApiException {
        ApiResponse<DeploymentResourceCrudResponse> resp = cancelDeploymentResourcePendingPlanWithHttpInfo(deploymentId, resourceKind, refId, forceDelete, ignoreMissing);
        return resp.getData();
    }

    /**
     * Cancel resource pending plan
     * Cancels the pending plan of a Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are missing. The default is &#x60;false&#x60;. (optional)
     * @return ApiResponse&lt;DeploymentResourceCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCrudResponse> cancelDeploymentResourcePendingPlanWithHttpInfo(String deploymentId, String resourceKind, String refId, Boolean forceDelete, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = cancelDeploymentResourcePendingPlanValidateBeforeCall(deploymentId, resourceKind, refId, forceDelete, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel resource pending plan (asynchronously)
     * Cancels the pending plan of a Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param forceDelete When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are missing. The default is &#x60;false&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelDeploymentResourcePendingPlanAsync(String deploymentId, String resourceKind, String refId, Boolean forceDelete, Boolean ignoreMissing, final ApiCallback<DeploymentResourceCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelDeploymentResourcePendingPlanValidateBeforeCall(deploymentId, resourceKind, refId, forceDelete, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDeployment
     * @param body The deployment definition (required)
     * @param requestId An optional idempotency token - if two create requests share the same request_id token (min size 32 characters, max 128) then only one deployment will be created, the second request will return the info of that deployment (in the same format described below, but with blanks for auth-related fields) (optional)
     * @param validateOnly If true, will just validate the Deployment definition but will not perform the creation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDeploymentCall(DeploymentCreateRequest body, String requestId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("request_id", requestId));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDeploymentValidateBeforeCall(DeploymentCreateRequest body, String requestId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = createDeploymentCall(body, requestId, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Deployment
     * Creates a Deployment.
     * @param body The deployment definition (required)
     * @param requestId An optional idempotency token - if two create requests share the same request_id token (min size 32 characters, max 128) then only one deployment will be created, the second request will return the info of that deployment (in the same format described below, but with blanks for auth-related fields) (optional)
     * @param validateOnly If true, will just validate the Deployment definition but will not perform the creation (optional)
     * @return DeploymentCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentCreateResponse createDeployment(DeploymentCreateRequest body, String requestId, Boolean validateOnly) throws ApiException {
        ApiResponse<DeploymentCreateResponse> resp = createDeploymentWithHttpInfo(body, requestId, validateOnly);
        return resp.getData();
    }

    /**
     * Create Deployment
     * Creates a Deployment.
     * @param body The deployment definition (required)
     * @param requestId An optional idempotency token - if two create requests share the same request_id token (min size 32 characters, max 128) then only one deployment will be created, the second request will return the info of that deployment (in the same format described below, but with blanks for auth-related fields) (optional)
     * @param validateOnly If true, will just validate the Deployment definition but will not perform the creation (optional)
     * @return ApiResponse&lt;DeploymentCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentCreateResponse> createDeploymentWithHttpInfo(DeploymentCreateRequest body, String requestId, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = createDeploymentValidateBeforeCall(body, requestId, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<DeploymentCreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Deployment (asynchronously)
     * Creates a Deployment.
     * @param body The deployment definition (required)
     * @param requestId An optional idempotency token - if two create requests share the same request_id token (min size 32 characters, max 128) then only one deployment will be created, the second request will return the info of that deployment (in the same format described below, but with blanks for auth-related fields) (optional)
     * @param validateOnly If true, will just validate the Deployment definition but will not perform the creation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDeploymentAsync(DeploymentCreateRequest body, String requestId, Boolean validateOnly, final ApiCallback<DeploymentCreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDeploymentValidateBeforeCall(body, requestId, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentCreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDeploymentNote
     * @param body New deployment note (required)
     * @param deploymentId Identifier for the deployment (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDeploymentNoteCall(Note body, String deploymentId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/notes"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDeploymentNoteValidateBeforeCall(Note body, String deploymentId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDeploymentNote(Async)");
        }
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling createDeploymentNote(Async)");
        }
        
        com.squareup.okhttp.Call call = createDeploymentNoteCall(body, deploymentId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create deployment note
     * Create note for the running deployment.
     * @param body New deployment note (required)
     * @param deploymentId Identifier for the deployment (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @return Notes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Notes createDeploymentNote(Note body, String deploymentId, Integer version) throws ApiException {
        ApiResponse<Notes> resp = createDeploymentNoteWithHttpInfo(body, deploymentId, version);
        return resp.getData();
    }

    /**
     * Create deployment note
     * Create note for the running deployment.
     * @param body New deployment note (required)
     * @param deploymentId Identifier for the deployment (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @return ApiResponse&lt;Notes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Notes> createDeploymentNoteWithHttpInfo(Note body, String deploymentId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = createDeploymentNoteValidateBeforeCall(body, deploymentId, version, null, null);
        Type localVarReturnType = new TypeToken<Notes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create deployment note (asynchronously)
     * Create note for the running deployment.
     * @param body New deployment note (required)
     * @param deploymentId Identifier for the deployment (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDeploymentNoteAsync(Note body, String deploymentId, Integer version, final ApiCallback<Notes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDeploymentNoteValidateBeforeCall(body, deploymentId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Notes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDeployment
     * @param deploymentId Identifier for the Deployment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDeploymentCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDeploymentValidateBeforeCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deleteDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDeploymentCall(deploymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Deployment
     * Deletes a Deployment and all its resources.
     * @param deploymentId Identifier for the Deployment (required)
     * @return DeploymentDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentDeleteResponse deleteDeployment(String deploymentId) throws ApiException {
        ApiResponse<DeploymentDeleteResponse> resp = deleteDeploymentWithHttpInfo(deploymentId);
        return resp.getData();
    }

    /**
     * Delete Deployment
     * Deletes a Deployment and all its resources.
     * @param deploymentId Identifier for the Deployment (required)
     * @return ApiResponse&lt;DeploymentDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentDeleteResponse> deleteDeploymentWithHttpInfo(String deploymentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDeploymentValidateBeforeCall(deploymentId, null, null);
        Type localVarReturnType = new TypeToken<DeploymentDeleteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Deployment (asynchronously)
     * Deletes a Deployment and all its resources.
     * @param deploymentId Identifier for the Deployment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDeploymentAsync(String deploymentId, final ApiCallback<DeploymentDeleteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDeploymentValidateBeforeCall(deploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentDeleteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDeploymentNote
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be deleted (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDeploymentNoteCall(String deploymentId, String noteId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/notes/{note_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDeploymentNoteValidateBeforeCall(String deploymentId, String noteId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deleteDeploymentNote(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteDeploymentNote(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDeploymentNoteCall(deploymentId, noteId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete deployment note
     * Delete note for the running deployment.
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be deleted (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @return Notes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Notes deleteDeploymentNote(String deploymentId, String noteId, Integer version) throws ApiException {
        ApiResponse<Notes> resp = deleteDeploymentNoteWithHttpInfo(deploymentId, noteId, version);
        return resp.getData();
    }

    /**
     * Delete deployment note
     * Delete note for the running deployment.
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be deleted (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @return ApiResponse&lt;Notes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Notes> deleteDeploymentNoteWithHttpInfo(String deploymentId, String noteId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = deleteDeploymentNoteValidateBeforeCall(deploymentId, noteId, version, null, null);
        Type localVarReturnType = new TypeToken<Notes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete deployment note (asynchronously)
     * Delete note for the running deployment.
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be deleted (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDeploymentNoteAsync(String deploymentId, String noteId, Integer version, final ApiCallback<Notes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDeploymentNoteValidateBeforeCall(deploymentId, noteId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Notes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDeploymentStatelessResource
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDeploymentStatelessResourceCall(String deploymentId, String statelessResourceKind, String refId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "stateless_resource_kind" + "\\}", apiClient.escapeString(statelessResourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDeploymentStatelessResourceValidateBeforeCall(String deploymentId, String statelessResourceKind, String refId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deleteDeploymentStatelessResource(Async)");
        }
        // verify the required parameter 'statelessResourceKind' is set
        if (statelessResourceKind == null) {
            throw new ApiException("Missing the required parameter 'statelessResourceKind' when calling deleteDeploymentStatelessResource(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling deleteDeploymentStatelessResource(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDeploymentStatelessResourceCall(deploymentId, statelessResourceKind, refId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Stateless Resource from Deployment
     * Delete Stateless Resource belonging to a given Deployment. Deployment must be shutdown already.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @return DeploymentResourceCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCrudResponse deleteDeploymentStatelessResource(String deploymentId, String statelessResourceKind, String refId) throws ApiException {
        ApiResponse<DeploymentResourceCrudResponse> resp = deleteDeploymentStatelessResourceWithHttpInfo(deploymentId, statelessResourceKind, refId);
        return resp.getData();
    }

    /**
     * Delete Stateless Resource from Deployment
     * Delete Stateless Resource belonging to a given Deployment. Deployment must be shutdown already.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @return ApiResponse&lt;DeploymentResourceCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCrudResponse> deleteDeploymentStatelessResourceWithHttpInfo(String deploymentId, String statelessResourceKind, String refId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDeploymentStatelessResourceValidateBeforeCall(deploymentId, statelessResourceKind, refId, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Stateless Resource from Deployment (asynchronously)
     * Delete Stateless Resource belonging to a given Deployment. Deployment must be shutdown already.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDeploymentStatelessResourceAsync(String deploymentId, String statelessResourceKind, String refId, final ApiCallback<DeploymentResourceCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDeploymentStatelessResourceValidateBeforeCall(deploymentId, statelessResourceKind, refId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeployment
     * @param deploymentId Identifier for the Deployment (required)
     * @param showSecurity Whether to include the Elasticsearch 2.x security information in the response - can be large per cluster and also include credentials (optional)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSystemAlerts Number of system alerts (such as forced restarts due to memory limits) to be included in the response - can be large per cluster. Negative numbers or 0 will not return field. (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param enrichWithTemplate If showing plans, whether to enrich the plan by including the missing elements from the deployment template it is based on (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeploymentCall(String deploymentId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showSecurity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_security", showSecurity));
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanHistory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_history", showPlanHistory));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));
        if (showSystemAlerts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_system_alerts", showSystemAlerts));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));
        if (enrichWithTemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enrich_with_template", enrichWithTemplate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeploymentValidateBeforeCall(String deploymentId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = getDeploymentCall(deploymentId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Deployment
     * Retrieves information about a Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param showSecurity Whether to include the Elasticsearch 2.x security information in the response - can be large per cluster and also include credentials (optional)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSystemAlerts Number of system alerts (such as forced restarts due to memory limits) to be included in the response - can be large per cluster. Negative numbers or 0 will not return field. (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param enrichWithTemplate If showing plans, whether to enrich the plan by including the missing elements from the deployment template it is based on (optional)
     * @return DeploymentGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentGetResponse getDeployment(String deploymentId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate) throws ApiException {
        ApiResponse<DeploymentGetResponse> resp = getDeploymentWithHttpInfo(deploymentId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate);
        return resp.getData();
    }

    /**
     * Get Deployment
     * Retrieves information about a Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param showSecurity Whether to include the Elasticsearch 2.x security information in the response - can be large per cluster and also include credentials (optional)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSystemAlerts Number of system alerts (such as forced restarts due to memory limits) to be included in the response - can be large per cluster. Negative numbers or 0 will not return field. (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param enrichWithTemplate If showing plans, whether to enrich the plan by including the missing elements from the deployment template it is based on (optional)
     * @return ApiResponse&lt;DeploymentGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentGetResponse> getDeploymentWithHttpInfo(String deploymentId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate) throws ApiException {
        com.squareup.okhttp.Call call = getDeploymentValidateBeforeCall(deploymentId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate, null, null);
        Type localVarReturnType = new TypeToken<DeploymentGetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Deployment (asynchronously)
     * Retrieves information about a Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param showSecurity Whether to include the Elasticsearch 2.x security information in the response - can be large per cluster and also include credentials (optional)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSystemAlerts Number of system alerts (such as forced restarts due to memory limits) to be included in the response - can be large per cluster. Negative numbers or 0 will not return field. (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param enrichWithTemplate If showing plans, whether to enrich the plan by including the missing elements from the deployment template it is based on (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeploymentAsync(String deploymentId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate, final ApiCallback<DeploymentGetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeploymentValidateBeforeCall(deploymentId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentGetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeploymentApmResourceInfo
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeploymentApmResourceInfoCall(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/apm/{ref_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanHistory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_history", showPlanHistory));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeploymentApmResourceInfoValidateBeforeCall(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getDeploymentApmResourceInfo(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling getDeploymentApmResourceInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getDeploymentApmResourceInfoCall(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, showSettings, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Deployment APM Resource Info
     * Get info about an APM Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @return ApmResourceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApmResourceInfo getDeploymentApmResourceInfo(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean showSettings) throws ApiException {
        ApiResponse<ApmResourceInfo> resp = getDeploymentApmResourceInfoWithHttpInfo(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, showSettings);
        return resp.getData();
    }

    /**
     * Get Deployment APM Resource Info
     * Get info about an APM Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @return ApiResponse&lt;ApmResourceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApmResourceInfo> getDeploymentApmResourceInfoWithHttpInfo(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean showSettings) throws ApiException {
        com.squareup.okhttp.Call call = getDeploymentApmResourceInfoValidateBeforeCall(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, showSettings, null, null);
        Type localVarReturnType = new TypeToken<ApmResourceInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Deployment APM Resource Info (asynchronously)
     * Get info about an APM Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeploymentApmResourceInfoAsync(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean showSettings, final ApiCallback<ApmResourceInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeploymentApmResourceInfoValidateBeforeCall(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, showSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApmResourceInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeploymentAppsearchResourceInfo
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeploymentAppsearchResourceInfoCall(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/appsearch/{ref_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanHistory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_history", showPlanHistory));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeploymentAppsearchResourceInfoValidateBeforeCall(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getDeploymentAppsearchResourceInfo(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling getDeploymentAppsearchResourceInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getDeploymentAppsearchResourceInfoCall(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, showSettings, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Deployment App Search Resource Info
     * Get info about an App Search Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @return AppSearchResourceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppSearchResourceInfo getDeploymentAppsearchResourceInfo(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean showSettings) throws ApiException {
        ApiResponse<AppSearchResourceInfo> resp = getDeploymentAppsearchResourceInfoWithHttpInfo(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, showSettings);
        return resp.getData();
    }

    /**
     * Get Deployment App Search Resource Info
     * Get info about an App Search Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @return ApiResponse&lt;AppSearchResourceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppSearchResourceInfo> getDeploymentAppsearchResourceInfoWithHttpInfo(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean showSettings) throws ApiException {
        com.squareup.okhttp.Call call = getDeploymentAppsearchResourceInfoValidateBeforeCall(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, showSettings, null, null);
        Type localVarReturnType = new TypeToken<AppSearchResourceInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Deployment App Search Resource Info (asynchronously)
     * Get info about an App Search Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeploymentAppsearchResourceInfoAsync(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean showSettings, final ApiCallback<AppSearchResourceInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeploymentAppsearchResourceInfoValidateBeforeCall(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, showSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppSearchResourceInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeploymentEsResourceInfo
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showSecurity Whether to include the Elasticsearch 2.x security information in the response - can be large per cluster and also include credentials (optional)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSystemAlerts Number of system alerts (such as forced restarts due to memory limits) to be included in the response - can be large per cluster. Negative numbers or 0 will not return field. (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param enrichWithTemplate If showing plans, whether to enrich the plan by including the missing elements from the deployment template it is based on (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeploymentEsResourceInfoCall(String deploymentId, String refId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/elasticsearch/{ref_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showSecurity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_security", showSecurity));
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanHistory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_history", showPlanHistory));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));
        if (showSystemAlerts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_system_alerts", showSystemAlerts));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));
        if (enrichWithTemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enrich_with_template", enrichWithTemplate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeploymentEsResourceInfoValidateBeforeCall(String deploymentId, String refId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getDeploymentEsResourceInfo(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling getDeploymentEsResourceInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getDeploymentEsResourceInfoCall(deploymentId, refId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Deployment Elasticsearch Resource Info
     * Get info about an Elasticsearch Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showSecurity Whether to include the Elasticsearch 2.x security information in the response - can be large per cluster and also include credentials (optional)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSystemAlerts Number of system alerts (such as forced restarts due to memory limits) to be included in the response - can be large per cluster. Negative numbers or 0 will not return field. (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param enrichWithTemplate If showing plans, whether to enrich the plan by including the missing elements from the deployment template it is based on (optional)
     * @return ElasticsearchResourceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElasticsearchResourceInfo getDeploymentEsResourceInfo(String deploymentId, String refId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate) throws ApiException {
        ApiResponse<ElasticsearchResourceInfo> resp = getDeploymentEsResourceInfoWithHttpInfo(deploymentId, refId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate);
        return resp.getData();
    }

    /**
     * Get Deployment Elasticsearch Resource Info
     * Get info about an Elasticsearch Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showSecurity Whether to include the Elasticsearch 2.x security information in the response - can be large per cluster and also include credentials (optional)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSystemAlerts Number of system alerts (such as forced restarts due to memory limits) to be included in the response - can be large per cluster. Negative numbers or 0 will not return field. (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param enrichWithTemplate If showing plans, whether to enrich the plan by including the missing elements from the deployment template it is based on (optional)
     * @return ApiResponse&lt;ElasticsearchResourceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElasticsearchResourceInfo> getDeploymentEsResourceInfoWithHttpInfo(String deploymentId, String refId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate) throws ApiException {
        com.squareup.okhttp.Call call = getDeploymentEsResourceInfoValidateBeforeCall(deploymentId, refId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate, null, null);
        Type localVarReturnType = new TypeToken<ElasticsearchResourceInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Deployment Elasticsearch Resource Info (asynchronously)
     * Get info about an Elasticsearch Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showSecurity Whether to include the Elasticsearch 2.x security information in the response - can be large per cluster and also include credentials (optional)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSystemAlerts Number of system alerts (such as forced restarts due to memory limits) to be included in the response - can be large per cluster. Negative numbers or 0 will not return field. (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param enrichWithTemplate If showing plans, whether to enrich the plan by including the missing elements from the deployment template it is based on (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeploymentEsResourceInfoAsync(String deploymentId, String refId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate, final ApiCallback<ElasticsearchResourceInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeploymentEsResourceInfoValidateBeforeCall(deploymentId, refId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElasticsearchResourceInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeploymentKibResourceInfo
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeploymentKibResourceInfoCall(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/kibana/{ref_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanHistory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_history", showPlanHistory));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeploymentKibResourceInfoValidateBeforeCall(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getDeploymentKibResourceInfo(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling getDeploymentKibResourceInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getDeploymentKibResourceInfoCall(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSettings, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Deployment Kibana Resource Info
     * Get info about an Kibana Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @return KibanaResourceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KibanaResourceInfo getDeploymentKibResourceInfo(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean showSettings) throws ApiException {
        ApiResponse<KibanaResourceInfo> resp = getDeploymentKibResourceInfoWithHttpInfo(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSettings);
        return resp.getData();
    }

    /**
     * Get Deployment Kibana Resource Info
     * Get info about an Kibana Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @return ApiResponse&lt;KibanaResourceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KibanaResourceInfo> getDeploymentKibResourceInfoWithHttpInfo(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean showSettings) throws ApiException {
        com.squareup.okhttp.Call call = getDeploymentKibResourceInfoValidateBeforeCall(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSettings, null, null);
        Type localVarReturnType = new TypeToken<KibanaResourceInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Deployment Kibana Resource Info (asynchronously)
     * Get info about an Kibana Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials (optional)
     * @param showPlans Whether to include the full current and pending plan information in the response - can be large per cluster (optional)
     * @param showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster (optional)
     * @param showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster (optional)
     * @param showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative) (optional)
     * @param convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if &#x27;true&#x27;) (optional)
     * @param showSettings Whether to show cluster settings in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeploymentKibResourceInfoAsync(String deploymentId, String refId, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanHistory, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean showSettings, final ApiCallback<KibanaResourceInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeploymentKibResourceInfoValidateBeforeCall(deploymentId, refId, showMetadata, showPlans, showPlanLogs, showPlanHistory, showPlanDefaults, convertLegacyPlans, showSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KibanaResourceInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeploymentNote
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeploymentNoteCall(String deploymentId, String noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/notes/{note_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeploymentNoteValidateBeforeCall(String deploymentId, String noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getDeploymentNote(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getDeploymentNote(Async)");
        }
        
        com.squareup.okhttp.Call call = getDeploymentNoteCall(deploymentId, noteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a deployment note
     * Gets a deployment note.
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be fetched (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note getDeploymentNote(String deploymentId, String noteId) throws ApiException {
        ApiResponse<Note> resp = getDeploymentNoteWithHttpInfo(deploymentId, noteId);
        return resp.getData();
    }

    /**
     * Get a deployment note
     * Gets a deployment note.
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be fetched (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> getDeploymentNoteWithHttpInfo(String deploymentId, String noteId) throws ApiException {
        com.squareup.okhttp.Call call = getDeploymentNoteValidateBeforeCall(deploymentId, noteId, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a deployment note (asynchronously)
     * Gets a deployment note.
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeploymentNoteAsync(String deploymentId, String noteId, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeploymentNoteValidateBeforeCall(deploymentId, noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeploymentNotes
     * @param deploymentId Identifier for the deployment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeploymentNotesCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/notes"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeploymentNotesValidateBeforeCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getDeploymentNotes(Async)");
        }
        
        com.squareup.okhttp.Call call = getDeploymentNotesCall(deploymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get deployment notes
     * Get deployment notes.
     * @param deploymentId Identifier for the deployment (required)
     * @return Notes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Notes getDeploymentNotes(String deploymentId) throws ApiException {
        ApiResponse<Notes> resp = getDeploymentNotesWithHttpInfo(deploymentId);
        return resp.getData();
    }

    /**
     * Get deployment notes
     * Get deployment notes.
     * @param deploymentId Identifier for the deployment (required)
     * @return ApiResponse&lt;Notes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Notes> getDeploymentNotesWithHttpInfo(String deploymentId) throws ApiException {
        com.squareup.okhttp.Call call = getDeploymentNotesValidateBeforeCall(deploymentId, null, null);
        Type localVarReturnType = new TypeToken<Notes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get deployment notes (asynchronously)
     * Get deployment notes.
     * @param deploymentId Identifier for the deployment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeploymentNotesAsync(String deploymentId, final ApiCallback<Notes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeploymentNotesValidateBeforeCall(deploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Notes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeployments
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeploymentsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeploymentsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDeploymentsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Deployments
     * List Deployments.
     * @return DeploymentsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentsListResponse listDeployments() throws ApiException {
        ApiResponse<DeploymentsListResponse> resp = listDeploymentsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List Deployments
     * List Deployments.
     * @return ApiResponse&lt;DeploymentsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentsListResponse> listDeploymentsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listDeploymentsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<DeploymentsListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Deployments (asynchronously)
     * List Deployments.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeploymentsAsync(final ApiCallback<DeploymentsListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeploymentsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentsListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restartDeploymentEsResource
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param restoreSnapshot If restoring from shutdown and true (the default), then will restore the cluster from the last snapshot (if available) (optional)
     * @param skipSnapshot If true, will not take a snapshot of the cluster before restarting (optional)
     * @param cancelPending If true, will cancel any pending plans before restarting (else will error) (optional)
     * @param groupAttribute Indicates the property or properties used to divide the list of instances to restart in groups. Valid options are: &#x27;\\_\\_all\\_\\_&#x27; (restart all at once), &#x27;\\_\\_zone\\_\\_&#x27; by logical zone, &#x27;\\_\\_name\\_\\_&#x27; one instance at the time, or a comma-separated list of attributes of the instances (optional)
     * @param shardInitWaitTime The time, in seconds, to wait for shards that show no progress of initializing, before rolling the next group (default: 10 minutes) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restartDeploymentEsResourceCall(String deploymentId, String refId, Boolean restoreSnapshot, Boolean skipSnapshot, Boolean cancelPending, String groupAttribute, Long shardInitWaitTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/elasticsearch/{ref_id}/_restart"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (restoreSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("restore_snapshot", restoreSnapshot));
        if (skipSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_snapshot", skipSnapshot));
        if (cancelPending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cancel_pending", cancelPending));
        if (groupAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group_attribute", groupAttribute));
        if (shardInitWaitTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shard_init_wait_time", shardInitWaitTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restartDeploymentEsResourceValidateBeforeCall(String deploymentId, String refId, Boolean restoreSnapshot, Boolean skipSnapshot, Boolean cancelPending, String groupAttribute, Long shardInitWaitTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling restartDeploymentEsResource(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling restartDeploymentEsResource(Async)");
        }
        
        com.squareup.okhttp.Call call = restartDeploymentEsResourceCall(deploymentId, refId, restoreSnapshot, skipSnapshot, cancelPending, groupAttribute, shardInitWaitTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Restart Deployment Elasticsearch Resource
     * Restarts an Elasticsearch Resource. If a Resource is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param restoreSnapshot If restoring from shutdown and true (the default), then will restore the cluster from the last snapshot (if available) (optional)
     * @param skipSnapshot If true, will not take a snapshot of the cluster before restarting (optional)
     * @param cancelPending If true, will cancel any pending plans before restarting (else will error) (optional)
     * @param groupAttribute Indicates the property or properties used to divide the list of instances to restart in groups. Valid options are: &#x27;\\_\\_all\\_\\_&#x27; (restart all at once), &#x27;\\_\\_zone\\_\\_&#x27; by logical zone, &#x27;\\_\\_name\\_\\_&#x27; one instance at the time, or a comma-separated list of attributes of the instances (optional)
     * @param shardInitWaitTime The time, in seconds, to wait for shards that show no progress of initializing, before rolling the next group (default: 10 minutes) (optional)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse restartDeploymentEsResource(String deploymentId, String refId, Boolean restoreSnapshot, Boolean skipSnapshot, Boolean cancelPending, String groupAttribute, Long shardInitWaitTime) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = restartDeploymentEsResourceWithHttpInfo(deploymentId, refId, restoreSnapshot, skipSnapshot, cancelPending, groupAttribute, shardInitWaitTime);
        return resp.getData();
    }

    /**
     * Restart Deployment Elasticsearch Resource
     * Restarts an Elasticsearch Resource. If a Resource is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param restoreSnapshot If restoring from shutdown and true (the default), then will restore the cluster from the last snapshot (if available) (optional)
     * @param skipSnapshot If true, will not take a snapshot of the cluster before restarting (optional)
     * @param cancelPending If true, will cancel any pending plans before restarting (else will error) (optional)
     * @param groupAttribute Indicates the property or properties used to divide the list of instances to restart in groups. Valid options are: &#x27;\\_\\_all\\_\\_&#x27; (restart all at once), &#x27;\\_\\_zone\\_\\_&#x27; by logical zone, &#x27;\\_\\_name\\_\\_&#x27; one instance at the time, or a comma-separated list of attributes of the instances (optional)
     * @param shardInitWaitTime The time, in seconds, to wait for shards that show no progress of initializing, before rolling the next group (default: 10 minutes) (optional)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> restartDeploymentEsResourceWithHttpInfo(String deploymentId, String refId, Boolean restoreSnapshot, Boolean skipSnapshot, Boolean cancelPending, String groupAttribute, Long shardInitWaitTime) throws ApiException {
        com.squareup.okhttp.Call call = restartDeploymentEsResourceValidateBeforeCall(deploymentId, refId, restoreSnapshot, skipSnapshot, cancelPending, groupAttribute, shardInitWaitTime, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restart Deployment Elasticsearch Resource (asynchronously)
     * Restarts an Elasticsearch Resource. If a Resource is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param restoreSnapshot If restoring from shutdown and true (the default), then will restore the cluster from the last snapshot (if available) (optional)
     * @param skipSnapshot If true, will not take a snapshot of the cluster before restarting (optional)
     * @param cancelPending If true, will cancel any pending plans before restarting (else will error) (optional)
     * @param groupAttribute Indicates the property or properties used to divide the list of instances to restart in groups. Valid options are: &#x27;\\_\\_all\\_\\_&#x27; (restart all at once), &#x27;\\_\\_zone\\_\\_&#x27; by logical zone, &#x27;\\_\\_name\\_\\_&#x27; one instance at the time, or a comma-separated list of attributes of the instances (optional)
     * @param shardInitWaitTime The time, in seconds, to wait for shards that show no progress of initializing, before rolling the next group (default: 10 minutes) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restartDeploymentEsResourceAsync(String deploymentId, String refId, Boolean restoreSnapshot, Boolean skipSnapshot, Boolean cancelPending, String groupAttribute, Long shardInitWaitTime, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restartDeploymentEsResourceValidateBeforeCall(deploymentId, refId, restoreSnapshot, skipSnapshot, cancelPending, groupAttribute, shardInitWaitTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restartDeploymentStatelessResource
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param cancelPending If true, will cancel any pending plans before restarting (else will error) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restartDeploymentStatelessResourceCall(String deploymentId, String statelessResourceKind, String refId, Boolean cancelPending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_restart"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "stateless_resource_kind" + "\\}", apiClient.escapeString(statelessResourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cancelPending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cancel_pending", cancelPending));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restartDeploymentStatelessResourceValidateBeforeCall(String deploymentId, String statelessResourceKind, String refId, Boolean cancelPending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling restartDeploymentStatelessResource(Async)");
        }
        // verify the required parameter 'statelessResourceKind' is set
        if (statelessResourceKind == null) {
            throw new ApiException("Missing the required parameter 'statelessResourceKind' when calling restartDeploymentStatelessResource(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling restartDeploymentStatelessResource(Async)");
        }
        
        com.squareup.okhttp.Call call = restartDeploymentStatelessResourceCall(deploymentId, statelessResourceKind, refId, cancelPending, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Restart Deployment Stateless Resource
     * Restarts an Stateless Resource. If a Resource is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param cancelPending If true, will cancel any pending plans before restarting (else will error) (optional)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse restartDeploymentStatelessResource(String deploymentId, String statelessResourceKind, String refId, Boolean cancelPending) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = restartDeploymentStatelessResourceWithHttpInfo(deploymentId, statelessResourceKind, refId, cancelPending);
        return resp.getData();
    }

    /**
     * Restart Deployment Stateless Resource
     * Restarts an Stateless Resource. If a Resource is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param cancelPending If true, will cancel any pending plans before restarting (else will error) (optional)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> restartDeploymentStatelessResourceWithHttpInfo(String deploymentId, String statelessResourceKind, String refId, Boolean cancelPending) throws ApiException {
        com.squareup.okhttp.Call call = restartDeploymentStatelessResourceValidateBeforeCall(deploymentId, statelessResourceKind, refId, cancelPending, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restart Deployment Stateless Resource (asynchronously)
     * Restarts an Stateless Resource. If a Resource is active: this command re-applies the existing plan but applies a \&quot;cluster_reboot\&quot;, which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param cancelPending If true, will cancel any pending plans before restarting (else will error) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restartDeploymentStatelessResourceAsync(String deploymentId, String statelessResourceKind, String refId, Boolean cancelPending, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restartDeploymentStatelessResourceValidateBeforeCall(deploymentId, statelessResourceKind, refId, cancelPending, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restoreDeployment
     * @param deploymentId Identifier for the Deployment (required)
     * @param restoreSnapshot Whether or not to restore a snapshot for those resources that allow it. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restoreDeploymentCall(String deploymentId, Boolean restoreSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/_restore"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (restoreSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("restore_snapshot", restoreSnapshot));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restoreDeploymentValidateBeforeCall(String deploymentId, Boolean restoreSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling restoreDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = restoreDeploymentCall(deploymentId, restoreSnapshot, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Restores a shutdown Deployment
     * Restores all resources in a Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param restoreSnapshot Whether or not to restore a snapshot for those resources that allow it. (optional)
     * @return DeploymentRestoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentRestoreResponse restoreDeployment(String deploymentId, Boolean restoreSnapshot) throws ApiException {
        ApiResponse<DeploymentRestoreResponse> resp = restoreDeploymentWithHttpInfo(deploymentId, restoreSnapshot);
        return resp.getData();
    }

    /**
     * Restores a shutdown Deployment
     * Restores all resources in a Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param restoreSnapshot Whether or not to restore a snapshot for those resources that allow it. (optional)
     * @return ApiResponse&lt;DeploymentRestoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentRestoreResponse> restoreDeploymentWithHttpInfo(String deploymentId, Boolean restoreSnapshot) throws ApiException {
        com.squareup.okhttp.Call call = restoreDeploymentValidateBeforeCall(deploymentId, restoreSnapshot, null, null);
        Type localVarReturnType = new TypeToken<DeploymentRestoreResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restores a shutdown Deployment (asynchronously)
     * Restores all resources in a Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param restoreSnapshot Whether or not to restore a snapshot for those resources that allow it. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restoreDeploymentAsync(String deploymentId, Boolean restoreSnapshot, final ApiCallback<DeploymentRestoreResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restoreDeploymentValidateBeforeCall(deploymentId, restoreSnapshot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentRestoreResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restoreDeploymentResource
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param restoreSnapshot Whether or not to restore a snapshot for those resources that allow it. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restoreDeploymentResourceCall(String deploymentId, String resourceKind, String refId, Boolean restoreSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/_restore"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (restoreSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("restore_snapshot", restoreSnapshot));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restoreDeploymentResourceValidateBeforeCall(String deploymentId, String resourceKind, String refId, Boolean restoreSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling restoreDeploymentResource(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling restoreDeploymentResource(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling restoreDeploymentResource(Async)");
        }
        
        com.squareup.okhttp.Call call = restoreDeploymentResourceCall(deploymentId, resourceKind, refId, restoreSnapshot, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Restores a shutdown resource
     * Restores a shutdown resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param restoreSnapshot Whether or not to restore a snapshot for those resources that allow it. (optional)
     * @return DeploymentResourceCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCrudResponse restoreDeploymentResource(String deploymentId, String resourceKind, String refId, Boolean restoreSnapshot) throws ApiException {
        ApiResponse<DeploymentResourceCrudResponse> resp = restoreDeploymentResourceWithHttpInfo(deploymentId, resourceKind, refId, restoreSnapshot);
        return resp.getData();
    }

    /**
     * Restores a shutdown resource
     * Restores a shutdown resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param restoreSnapshot Whether or not to restore a snapshot for those resources that allow it. (optional)
     * @return ApiResponse&lt;DeploymentResourceCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCrudResponse> restoreDeploymentResourceWithHttpInfo(String deploymentId, String resourceKind, String refId, Boolean restoreSnapshot) throws ApiException {
        com.squareup.okhttp.Call call = restoreDeploymentResourceValidateBeforeCall(deploymentId, resourceKind, refId, restoreSnapshot, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restores a shutdown resource (asynchronously)
     * Restores a shutdown resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param restoreSnapshot Whether or not to restore a snapshot for those resources that allow it. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restoreDeploymentResourceAsync(String deploymentId, String resourceKind, String refId, Boolean restoreSnapshot, final ApiCallback<DeploymentResourceCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restoreDeploymentResourceValidateBeforeCall(deploymentId, resourceKind, refId, restoreSnapshot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncDeployment
     * @param deploymentId Identifier for the deployment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncDeploymentCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/_resync"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncDeploymentValidateBeforeCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling resyncDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = resyncDeploymentCall(deploymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize Deployment
     * Immediately resynchronizes the search index for the selected deployment.
     * @param deploymentId Identifier for the deployment (required)
     * @return IndexSynchronizationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IndexSynchronizationResults resyncDeployment(String deploymentId) throws ApiException {
        ApiResponse<IndexSynchronizationResults> resp = resyncDeploymentWithHttpInfo(deploymentId);
        return resp.getData();
    }

    /**
     * Resynchronize Deployment
     * Immediately resynchronizes the search index for the selected deployment.
     * @param deploymentId Identifier for the deployment (required)
     * @return ApiResponse&lt;IndexSynchronizationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IndexSynchronizationResults> resyncDeploymentWithHttpInfo(String deploymentId) throws ApiException {
        com.squareup.okhttp.Call call = resyncDeploymentValidateBeforeCall(deploymentId, null, null);
        Type localVarReturnType = new TypeToken<IndexSynchronizationResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize Deployment (asynchronously)
     * Immediately resynchronizes the search index for the selected deployment.
     * @param deploymentId Identifier for the deployment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncDeploymentAsync(String deploymentId, final ApiCallback<IndexSynchronizationResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncDeploymentValidateBeforeCall(deploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IndexSynchronizationResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncDeployments
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncDeploymentsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/_resync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncDeploymentsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = resyncDeploymentsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize Deployments
     * Resynchronizes the search index for all the deployments.
     * @return IndexSynchronizationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IndexSynchronizationResults resyncDeployments() throws ApiException {
        ApiResponse<IndexSynchronizationResults> resp = resyncDeploymentsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Resynchronize Deployments
     * Resynchronizes the search index for all the deployments.
     * @return ApiResponse&lt;IndexSynchronizationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IndexSynchronizationResults> resyncDeploymentsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = resyncDeploymentsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<IndexSynchronizationResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize Deployments (asynchronously)
     * Resynchronizes the search index for all the deployments.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncDeploymentsAsync(final ApiCallback<IndexSynchronizationResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncDeploymentsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IndexSynchronizationResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchDeployments
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the deployments are matched. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchDeploymentsCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments/_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchDeploymentsValidateBeforeCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchDeploymentsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search Deployments
     * Retrieves the information for all of the Deployments that match the specified query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the deployments are matched. (optional)
     * @return DeploymentsSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentsSearchResponse searchDeployments(SearchRequest body) throws ApiException {
        ApiResponse<DeploymentsSearchResponse> resp = searchDeploymentsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Search Deployments
     * Retrieves the information for all of the Deployments that match the specified query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the deployments are matched. (optional)
     * @return ApiResponse&lt;DeploymentsSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentsSearchResponse> searchDeploymentsWithHttpInfo(SearchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = searchDeploymentsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DeploymentsSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Deployments (asynchronously)
     * Retrieves the information for all of the Deployments that match the specified query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the deployments are matched. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchDeploymentsAsync(SearchRequest body, final ApiCallback<DeploymentsSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchDeploymentsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentsSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setDeploymentResourceRawMetadata
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param version If specified, checks for conflicts against the metadata version (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setDeploymentResourceRawMetadataCall(String body, String deploymentId, String resourceKind, String refId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/metadata/raw"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setDeploymentResourceRawMetadataValidateBeforeCall(String body, String deploymentId, String resourceKind, String refId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setDeploymentResourceRawMetadata(Async)");
        }
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling setDeploymentResourceRawMetadata(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling setDeploymentResourceRawMetadata(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling setDeploymentResourceRawMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = setDeploymentResourceRawMetadataCall(body, deploymentId, resourceKind, refId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set a Deployment&#x27;s resource metadata
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the resource. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param version If specified, checks for conflicts against the metadata version (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setDeploymentResourceRawMetadata(String body, String deploymentId, String resourceKind, String refId, Integer version) throws ApiException {
        ApiResponse<String> resp = setDeploymentResourceRawMetadataWithHttpInfo(body, deploymentId, resourceKind, refId, version);
        return resp.getData();
    }

    /**
     * Set a Deployment&#x27;s resource metadata
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the resource. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param version If specified, checks for conflicts against the metadata version (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setDeploymentResourceRawMetadataWithHttpInfo(String body, String deploymentId, String resourceKind, String refId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = setDeploymentResourceRawMetadataValidateBeforeCall(body, deploymentId, resourceKind, refId, version, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set a Deployment&#x27;s resource metadata (asynchronously)
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the resource. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param version If specified, checks for conflicts against the metadata version (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDeploymentResourceRawMetadataAsync(String body, String deploymentId, String resourceKind, String refId, Integer version, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDeploymentResourceRawMetadataValidateBeforeCall(body, deploymentId, resourceKind, refId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shutdownDeployment
     * @param deploymentId Identifier for the Deployment (required)
     * @param hide Whether or not to hide the deployment and its resources (optional)
     * @param skipSnapshot Whether or not to skip snapshots before shutting down the resources (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shutdownDeploymentCall(String deploymentId, Boolean hide, Boolean skipSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/_shutdown"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hide != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hide", hide));
        if (skipSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_snapshot", skipSnapshot));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shutdownDeploymentValidateBeforeCall(String deploymentId, Boolean hide, Boolean skipSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling shutdownDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = shutdownDeploymentCall(deploymentId, hide, skipSnapshot, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Shuts down Deployment
     * Shuts down all resources in a Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param hide Whether or not to hide the deployment and its resources (optional)
     * @param skipSnapshot Whether or not to skip snapshots before shutting down the resources (optional)
     * @return DeploymentShutdownResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentShutdownResponse shutdownDeployment(String deploymentId, Boolean hide, Boolean skipSnapshot) throws ApiException {
        ApiResponse<DeploymentShutdownResponse> resp = shutdownDeploymentWithHttpInfo(deploymentId, hide, skipSnapshot);
        return resp.getData();
    }

    /**
     * Shuts down Deployment
     * Shuts down all resources in a Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param hide Whether or not to hide the deployment and its resources (optional)
     * @param skipSnapshot Whether or not to skip snapshots before shutting down the resources (optional)
     * @return ApiResponse&lt;DeploymentShutdownResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentShutdownResponse> shutdownDeploymentWithHttpInfo(String deploymentId, Boolean hide, Boolean skipSnapshot) throws ApiException {
        com.squareup.okhttp.Call call = shutdownDeploymentValidateBeforeCall(deploymentId, hide, skipSnapshot, null, null);
        Type localVarReturnType = new TypeToken<DeploymentShutdownResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Shuts down Deployment (asynchronously)
     * Shuts down all resources in a Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param hide Whether or not to hide the deployment and its resources (optional)
     * @param skipSnapshot Whether or not to skip snapshots before shutting down the resources (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shutdownDeploymentAsync(String deploymentId, Boolean hide, Boolean skipSnapshot, final ApiCallback<DeploymentShutdownResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shutdownDeploymentValidateBeforeCall(deploymentId, hide, skipSnapshot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentShutdownResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shutdownDeploymentEsResource
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param hide Hide cluster on shutdown. Hidden clusters are not listed by default (optional)
     * @param skipSnapshot If true, will skip taking a snapshot of the cluster before shutting the cluster down (if even possible) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shutdownDeploymentEsResourceCall(String deploymentId, String refId, Boolean hide, Boolean skipSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/elasticsearch/{ref_id}/_shutdown"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hide != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hide", hide));
        if (skipSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_snapshot", skipSnapshot));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shutdownDeploymentEsResourceValidateBeforeCall(String deploymentId, String refId, Boolean hide, Boolean skipSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling shutdownDeploymentEsResource(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling shutdownDeploymentEsResource(Async)");
        }
        
        com.squareup.okhttp.Call call = shutdownDeploymentEsResourceCall(deploymentId, refId, hide, skipSnapshot, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Shutdown Deployment Elasticsearch Resource
     * Shutdown Elasticsearch Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param hide Hide cluster on shutdown. Hidden clusters are not listed by default (optional)
     * @param skipSnapshot If true, will skip taking a snapshot of the cluster before shutting the cluster down (if even possible) (optional)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse shutdownDeploymentEsResource(String deploymentId, String refId, Boolean hide, Boolean skipSnapshot) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = shutdownDeploymentEsResourceWithHttpInfo(deploymentId, refId, hide, skipSnapshot);
        return resp.getData();
    }

    /**
     * Shutdown Deployment Elasticsearch Resource
     * Shutdown Elasticsearch Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param hide Hide cluster on shutdown. Hidden clusters are not listed by default (optional)
     * @param skipSnapshot If true, will skip taking a snapshot of the cluster before shutting the cluster down (if even possible) (optional)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> shutdownDeploymentEsResourceWithHttpInfo(String deploymentId, String refId, Boolean hide, Boolean skipSnapshot) throws ApiException {
        com.squareup.okhttp.Call call = shutdownDeploymentEsResourceValidateBeforeCall(deploymentId, refId, hide, skipSnapshot, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Shutdown Deployment Elasticsearch Resource (asynchronously)
     * Shutdown Elasticsearch Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param hide Hide cluster on shutdown. Hidden clusters are not listed by default (optional)
     * @param skipSnapshot If true, will skip taking a snapshot of the cluster before shutting the cluster down (if even possible) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shutdownDeploymentEsResourceAsync(String deploymentId, String refId, Boolean hide, Boolean skipSnapshot, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shutdownDeploymentEsResourceValidateBeforeCall(deploymentId, refId, hide, skipSnapshot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shutdownDeploymentStatelessResource
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param hide Hide cluster on shutdown. Hidden clusters are not listed by default (optional)
     * @param skipSnapshot If true, will skip taking a snapshot of the cluster before shutting the cluster down (if even possible) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shutdownDeploymentStatelessResourceCall(String deploymentId, String statelessResourceKind, String refId, Boolean hide, Boolean skipSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_shutdown"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "stateless_resource_kind" + "\\}", apiClient.escapeString(statelessResourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hide != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hide", hide));
        if (skipSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_snapshot", skipSnapshot));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shutdownDeploymentStatelessResourceValidateBeforeCall(String deploymentId, String statelessResourceKind, String refId, Boolean hide, Boolean skipSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling shutdownDeploymentStatelessResource(Async)");
        }
        // verify the required parameter 'statelessResourceKind' is set
        if (statelessResourceKind == null) {
            throw new ApiException("Missing the required parameter 'statelessResourceKind' when calling shutdownDeploymentStatelessResource(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling shutdownDeploymentStatelessResource(Async)");
        }
        
        com.squareup.okhttp.Call call = shutdownDeploymentStatelessResourceCall(deploymentId, statelessResourceKind, refId, hide, skipSnapshot, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Shutdown Deployment Stateless Resource
     * Shutdown Stateless Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param hide Hide cluster on shutdown. Hidden clusters are not listed by default (optional)
     * @param skipSnapshot If true, will skip taking a snapshot of the cluster before shutting the cluster down (if even possible) (optional)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse shutdownDeploymentStatelessResource(String deploymentId, String statelessResourceKind, String refId, Boolean hide, Boolean skipSnapshot) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = shutdownDeploymentStatelessResourceWithHttpInfo(deploymentId, statelessResourceKind, refId, hide, skipSnapshot);
        return resp.getData();
    }

    /**
     * Shutdown Deployment Stateless Resource
     * Shutdown Stateless Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param hide Hide cluster on shutdown. Hidden clusters are not listed by default (optional)
     * @param skipSnapshot If true, will skip taking a snapshot of the cluster before shutting the cluster down (if even possible) (optional)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> shutdownDeploymentStatelessResourceWithHttpInfo(String deploymentId, String statelessResourceKind, String refId, Boolean hide, Boolean skipSnapshot) throws ApiException {
        com.squareup.okhttp.Call call = shutdownDeploymentStatelessResourceValidateBeforeCall(deploymentId, statelessResourceKind, refId, hide, skipSnapshot, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Shutdown Deployment Stateless Resource (asynchronously)
     * Shutdown Stateless Resource belonging to a given Deployment.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param hide Hide cluster on shutdown. Hidden clusters are not listed by default (optional)
     * @param skipSnapshot If true, will skip taking a snapshot of the cluster before shutting the cluster down (if even possible) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shutdownDeploymentStatelessResourceAsync(String deploymentId, String statelessResourceKind, String refId, Boolean hide, Boolean skipSnapshot, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shutdownDeploymentStatelessResourceValidateBeforeCall(deploymentId, statelessResourceKind, refId, hide, skipSnapshot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startDeploymentResourceInstances
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startDeploymentResourceInstancesCall(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/_start"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startDeploymentResourceInstancesValidateBeforeCall(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling startDeploymentResourceInstances(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling startDeploymentResourceInstances(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling startDeploymentResourceInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling startDeploymentResourceInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = startDeploymentResourceInstancesCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start instances
     * Starts instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse startDeploymentResourceInstances(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = startDeploymentResourceInstancesWithHttpInfo(deploymentId, resourceKind, refId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Start instances
     * Starts instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> startDeploymentResourceInstancesWithHttpInfo(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = startDeploymentResourceInstancesValidateBeforeCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start instances (asynchronously)
     * Starts instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startDeploymentResourceInstancesAsync(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startDeploymentResourceInstancesValidateBeforeCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startDeploymentResourceInstancesAll
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startDeploymentResourceInstancesAllCall(String deploymentId, String resourceKind, String refId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_start"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startDeploymentResourceInstancesAllValidateBeforeCall(String deploymentId, String resourceKind, String refId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling startDeploymentResourceInstancesAll(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling startDeploymentResourceInstancesAll(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling startDeploymentResourceInstancesAll(Async)");
        }
        
        com.squareup.okhttp.Call call = startDeploymentResourceInstancesAllCall(deploymentId, resourceKind, refId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start all instances
     * Starts all instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse startDeploymentResourceInstancesAll(String deploymentId, String resourceKind, String refId) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = startDeploymentResourceInstancesAllWithHttpInfo(deploymentId, resourceKind, refId);
        return resp.getData();
    }

    /**
     * Start all instances
     * Starts all instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> startDeploymentResourceInstancesAllWithHttpInfo(String deploymentId, String resourceKind, String refId) throws ApiException {
        com.squareup.okhttp.Call call = startDeploymentResourceInstancesAllValidateBeforeCall(deploymentId, resourceKind, refId, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start all instances (asynchronously)
     * Starts all instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startDeploymentResourceInstancesAllAsync(String deploymentId, String resourceKind, String refId, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startDeploymentResourceInstancesAllValidateBeforeCall(deploymentId, resourceKind, refId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startDeploymentResourceInstancesAllMaintenanceMode
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startDeploymentResourceInstancesAllMaintenanceModeCall(String deploymentId, String resourceKind, String refId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/maintenance-mode/_start"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startDeploymentResourceInstancesAllMaintenanceModeValidateBeforeCall(String deploymentId, String resourceKind, String refId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling startDeploymentResourceInstancesAllMaintenanceMode(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling startDeploymentResourceInstancesAllMaintenanceMode(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling startDeploymentResourceInstancesAllMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = startDeploymentResourceInstancesAllMaintenanceModeCall(deploymentId, resourceKind, refId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start maintenance mode (all instances)
     * Starts maintenance mode of all instances belonging to a Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse startDeploymentResourceInstancesAllMaintenanceMode(String deploymentId, String resourceKind, String refId) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = startDeploymentResourceInstancesAllMaintenanceModeWithHttpInfo(deploymentId, resourceKind, refId);
        return resp.getData();
    }

    /**
     * Start maintenance mode (all instances)
     * Starts maintenance mode of all instances belonging to a Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> startDeploymentResourceInstancesAllMaintenanceModeWithHttpInfo(String deploymentId, String resourceKind, String refId) throws ApiException {
        com.squareup.okhttp.Call call = startDeploymentResourceInstancesAllMaintenanceModeValidateBeforeCall(deploymentId, resourceKind, refId, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start maintenance mode (all instances) (asynchronously)
     * Starts maintenance mode of all instances belonging to a Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startDeploymentResourceInstancesAllMaintenanceModeAsync(String deploymentId, String resourceKind, String refId, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startDeploymentResourceInstancesAllMaintenanceModeValidateBeforeCall(deploymentId, resourceKind, refId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startDeploymentResourceMaintenanceMode
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startDeploymentResourceMaintenanceModeCall(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/maintenance-mode/_start"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startDeploymentResourceMaintenanceModeValidateBeforeCall(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling startDeploymentResourceMaintenanceMode(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling startDeploymentResourceMaintenanceMode(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling startDeploymentResourceMaintenanceMode(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling startDeploymentResourceMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = startDeploymentResourceMaintenanceModeCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start maintenance mode
     * Starts maintenance mode of instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse startDeploymentResourceMaintenanceMode(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = startDeploymentResourceMaintenanceModeWithHttpInfo(deploymentId, resourceKind, refId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Start maintenance mode
     * Starts maintenance mode of instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> startDeploymentResourceMaintenanceModeWithHttpInfo(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = startDeploymentResourceMaintenanceModeValidateBeforeCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start maintenance mode (asynchronously)
     * Starts maintenance mode of instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startDeploymentResourceMaintenanceModeAsync(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startDeploymentResourceMaintenanceModeValidateBeforeCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopDeploymentResourceInstances
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopDeploymentResourceInstancesCall(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/_stop"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopDeploymentResourceInstancesValidateBeforeCall(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling stopDeploymentResourceInstances(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling stopDeploymentResourceInstances(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling stopDeploymentResourceInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling stopDeploymentResourceInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = stopDeploymentResourceInstancesCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop of instances
     * Stops instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse stopDeploymentResourceInstances(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = stopDeploymentResourceInstancesWithHttpInfo(deploymentId, resourceKind, refId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Stop of instances
     * Stops instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> stopDeploymentResourceInstancesWithHttpInfo(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = stopDeploymentResourceInstancesValidateBeforeCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop of instances (asynchronously)
     * Stops instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopDeploymentResourceInstancesAsync(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopDeploymentResourceInstancesValidateBeforeCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopDeploymentResourceInstancesAll
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopDeploymentResourceInstancesAllCall(String deploymentId, String resourceKind, String refId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_stop"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopDeploymentResourceInstancesAllValidateBeforeCall(String deploymentId, String resourceKind, String refId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling stopDeploymentResourceInstancesAll(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling stopDeploymentResourceInstancesAll(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling stopDeploymentResourceInstancesAll(Async)");
        }
        
        com.squareup.okhttp.Call call = stopDeploymentResourceInstancesAllCall(deploymentId, resourceKind, refId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop all instances
     * Stops all instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse stopDeploymentResourceInstancesAll(String deploymentId, String resourceKind, String refId) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = stopDeploymentResourceInstancesAllWithHttpInfo(deploymentId, resourceKind, refId);
        return resp.getData();
    }

    /**
     * Stop all instances
     * Stops all instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> stopDeploymentResourceInstancesAllWithHttpInfo(String deploymentId, String resourceKind, String refId) throws ApiException {
        com.squareup.okhttp.Call call = stopDeploymentResourceInstancesAllValidateBeforeCall(deploymentId, resourceKind, refId, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop all instances (asynchronously)
     * Stops all instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopDeploymentResourceInstancesAllAsync(String deploymentId, String resourceKind, String refId, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopDeploymentResourceInstancesAllValidateBeforeCall(deploymentId, resourceKind, refId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopDeploymentResourceInstancesAllMaintenanceMode
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopDeploymentResourceInstancesAllMaintenanceModeCall(String deploymentId, String resourceKind, String refId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/maintenance-mode/_stop"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopDeploymentResourceInstancesAllMaintenanceModeValidateBeforeCall(String deploymentId, String resourceKind, String refId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling stopDeploymentResourceInstancesAllMaintenanceMode(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling stopDeploymentResourceInstancesAllMaintenanceMode(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling stopDeploymentResourceInstancesAllMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = stopDeploymentResourceInstancesAllMaintenanceModeCall(deploymentId, resourceKind, refId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop maintenance mode (all instances)
     * Stops maintenance mode of all instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse stopDeploymentResourceInstancesAllMaintenanceMode(String deploymentId, String resourceKind, String refId) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = stopDeploymentResourceInstancesAllMaintenanceModeWithHttpInfo(deploymentId, resourceKind, refId);
        return resp.getData();
    }

    /**
     * Stop maintenance mode (all instances)
     * Stops maintenance mode of all instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> stopDeploymentResourceInstancesAllMaintenanceModeWithHttpInfo(String deploymentId, String resourceKind, String refId) throws ApiException {
        com.squareup.okhttp.Call call = stopDeploymentResourceInstancesAllMaintenanceModeValidateBeforeCall(deploymentId, resourceKind, refId, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop maintenance mode (all instances) (asynchronously)
     * Stops maintenance mode of all instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopDeploymentResourceInstancesAllMaintenanceModeAsync(String deploymentId, String resourceKind, String refId, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopDeploymentResourceInstancesAllMaintenanceModeValidateBeforeCall(deploymentId, resourceKind, refId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopDeploymentResourceMaintenanceMode
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopDeploymentResourceMaintenanceModeCall(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/maintenance-mode/_stop"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "resource_kind" + "\\}", apiClient.escapeString(resourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopDeploymentResourceMaintenanceModeValidateBeforeCall(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling stopDeploymentResourceMaintenanceMode(Async)");
        }
        // verify the required parameter 'resourceKind' is set
        if (resourceKind == null) {
            throw new ApiException("Missing the required parameter 'resourceKind' when calling stopDeploymentResourceMaintenanceMode(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling stopDeploymentResourceMaintenanceMode(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling stopDeploymentResourceMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = stopDeploymentResourceMaintenanceModeCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop maintenance mode
     * Stops maintenance mode of instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @return DeploymentResourceCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceCommandResponse stopDeploymentResourceMaintenanceMode(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<DeploymentResourceCommandResponse> resp = stopDeploymentResourceMaintenanceModeWithHttpInfo(deploymentId, resourceKind, refId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Stop maintenance mode
     * Stops maintenance mode of instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @return ApiResponse&lt;DeploymentResourceCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceCommandResponse> stopDeploymentResourceMaintenanceModeWithHttpInfo(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = stopDeploymentResourceMaintenanceModeValidateBeforeCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop maintenance mode (asynchronously)
     * Stops maintenance mode of instances belonging to a Deployment Resource.
     * @param deploymentId Identifier for the Deployment (required)
     * @param resourceKind The kind of resource (one of elasticsearch, kibana or apm) (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param instanceIds Comma-delimited list of instance identifiers of the Resource (required)
     * @param ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopDeploymentResourceMaintenanceModeAsync(String deploymentId, String resourceKind, String refId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<DeploymentResourceCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopDeploymentResourceMaintenanceModeValidateBeforeCall(deploymentId, resourceKind, refId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDeployment
     * @param body The deployment definition (required)
     * @param deploymentId Identifier for the Deployment (required)
     * @param hidePrunedOrphans Whether or not to hide orphaned resources that were shut down (relevant if prune on the request is true) (optional)
     * @param skipSnapshot Whether or not to skip snapshots before shutting down orphaned resources (relevant if prune on the request is true) (optional)
     * @param validateOnly If true, will just validate the Deployment definition but will not perform the update (optional)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDeploymentCall(DeploymentUpdateRequest body, String deploymentId, Boolean hidePrunedOrphans, Boolean skipSnapshot, Boolean validateOnly, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hidePrunedOrphans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hide_pruned_orphans", hidePrunedOrphans));
        if (skipSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_snapshot", skipSnapshot));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDeploymentValidateBeforeCall(DeploymentUpdateRequest body, String deploymentId, Boolean hidePrunedOrphans, Boolean skipSnapshot, Boolean validateOnly, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDeployment(Async)");
        }
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling updateDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDeploymentCall(body, deploymentId, hidePrunedOrphans, skipSnapshot, validateOnly, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Deployment
     * Updates a Deployment.
     * @param body The deployment definition (required)
     * @param deploymentId Identifier for the Deployment (required)
     * @param hidePrunedOrphans Whether or not to hide orphaned resources that were shut down (relevant if prune on the request is true) (optional)
     * @param skipSnapshot Whether or not to skip snapshots before shutting down orphaned resources (relevant if prune on the request is true) (optional)
     * @param validateOnly If true, will just validate the Deployment definition but will not perform the update (optional)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return DeploymentUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentUpdateResponse updateDeployment(DeploymentUpdateRequest body, String deploymentId, Boolean hidePrunedOrphans, Boolean skipSnapshot, Boolean validateOnly, Integer version) throws ApiException {
        ApiResponse<DeploymentUpdateResponse> resp = updateDeploymentWithHttpInfo(body, deploymentId, hidePrunedOrphans, skipSnapshot, validateOnly, version);
        return resp.getData();
    }

    /**
     * Update Deployment
     * Updates a Deployment.
     * @param body The deployment definition (required)
     * @param deploymentId Identifier for the Deployment (required)
     * @param hidePrunedOrphans Whether or not to hide orphaned resources that were shut down (relevant if prune on the request is true) (optional)
     * @param skipSnapshot Whether or not to skip snapshots before shutting down orphaned resources (relevant if prune on the request is true) (optional)
     * @param validateOnly If true, will just validate the Deployment definition but will not perform the update (optional)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;DeploymentUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentUpdateResponse> updateDeploymentWithHttpInfo(DeploymentUpdateRequest body, String deploymentId, Boolean hidePrunedOrphans, Boolean skipSnapshot, Boolean validateOnly, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateDeploymentValidateBeforeCall(body, deploymentId, hidePrunedOrphans, skipSnapshot, validateOnly, version, null, null);
        Type localVarReturnType = new TypeToken<DeploymentUpdateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Deployment (asynchronously)
     * Updates a Deployment.
     * @param body The deployment definition (required)
     * @param deploymentId Identifier for the Deployment (required)
     * @param hidePrunedOrphans Whether or not to hide orphaned resources that were shut down (relevant if prune on the request is true) (optional)
     * @param skipSnapshot Whether or not to skip snapshots before shutting down orphaned resources (relevant if prune on the request is true) (optional)
     * @param validateOnly If true, will just validate the Deployment definition but will not perform the update (optional)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDeploymentAsync(DeploymentUpdateRequest body, String deploymentId, Boolean hidePrunedOrphans, Boolean skipSnapshot, Boolean validateOnly, Integer version, final ApiCallback<DeploymentUpdateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDeploymentValidateBeforeCall(body, deploymentId, hidePrunedOrphans, skipSnapshot, validateOnly, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentUpdateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDeploymentNote
     * @param body New content for deployment note (required)
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be updated (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDeploymentNoteCall(Note body, String deploymentId, String noteId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/notes/{note_id}"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDeploymentNoteValidateBeforeCall(Note body, String deploymentId, String noteId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDeploymentNote(Async)");
        }
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling updateDeploymentNote(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling updateDeploymentNote(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDeploymentNoteCall(body, deploymentId, noteId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update deployment note
     * Update note for the running deployment.
     * @param body New content for deployment note (required)
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be updated (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note updateDeploymentNote(Note body, String deploymentId, String noteId, Integer version) throws ApiException {
        ApiResponse<Note> resp = updateDeploymentNoteWithHttpInfo(body, deploymentId, noteId, version);
        return resp.getData();
    }

    /**
     * Update deployment note
     * Update note for the running deployment.
     * @param body New content for deployment note (required)
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be updated (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> updateDeploymentNoteWithHttpInfo(Note body, String deploymentId, String noteId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateDeploymentNoteValidateBeforeCall(body, deploymentId, noteId, version, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update deployment note (asynchronously)
     * Update note for the running deployment.
     * @param body New content for deployment note (required)
     * @param deploymentId Identifier for the deployment (required)
     * @param noteId Identifier of the note to be updated (required)
     * @param version If specified then checks for conflicts against the version of the deployment note (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDeploymentNoteAsync(Note body, String deploymentId, String noteId, Integer version, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDeploymentNoteValidateBeforeCall(body, deploymentId, noteId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for upgradeDeploymentStatelessResource
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call upgradeDeploymentStatelessResourceCall(String deploymentId, String statelessResourceKind, String refId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_upgrade"
            .replaceAll("\\{" + "deployment_id" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "stateless_resource_kind" + "\\}", apiClient.escapeString(statelessResourceKind.toString()))
            .replaceAll("\\{" + "ref_id" + "\\}", apiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call upgradeDeploymentStatelessResourceValidateBeforeCall(String deploymentId, String statelessResourceKind, String refId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling upgradeDeploymentStatelessResource(Async)");
        }
        // verify the required parameter 'statelessResourceKind' is set
        if (statelessResourceKind == null) {
            throw new ApiException("Missing the required parameter 'statelessResourceKind' when calling upgradeDeploymentStatelessResource(Async)");
        }
        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling upgradeDeploymentStatelessResource(Async)");
        }
        
        com.squareup.okhttp.Call call = upgradeDeploymentStatelessResourceCall(deploymentId, statelessResourceKind, refId, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upgrade Kibana, APM, AppSearch inside Deployment
     * Upgrades a running cluster.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @return DeploymentResourceUpgradeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResourceUpgradeResponse upgradeDeploymentStatelessResource(String deploymentId, String statelessResourceKind, String refId, Boolean validateOnly) throws ApiException {
        ApiResponse<DeploymentResourceUpgradeResponse> resp = upgradeDeploymentStatelessResourceWithHttpInfo(deploymentId, statelessResourceKind, refId, validateOnly);
        return resp.getData();
    }

    /**
     * Upgrade Kibana, APM, AppSearch inside Deployment
     * Upgrades a running cluster.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @return ApiResponse&lt;DeploymentResourceUpgradeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResourceUpgradeResponse> upgradeDeploymentStatelessResourceWithHttpInfo(String deploymentId, String statelessResourceKind, String refId, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = upgradeDeploymentStatelessResourceValidateBeforeCall(deploymentId, statelessResourceKind, refId, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResourceUpgradeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upgrade Kibana, APM, AppSearch inside Deployment (asynchronously)
     * Upgrades a running cluster.
     * @param deploymentId Identifier for the Deployment (required)
     * @param statelessResourceKind The kind of stateless resource (required)
     * @param refId User-specified RefId for the Resource (required)
     * @param validateOnly When &#x60;true&#x60;, returns the update version without performing the upgrade (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call upgradeDeploymentStatelessResourceAsync(String deploymentId, String statelessResourceKind, String refId, Boolean validateOnly, final ApiCallback<DeploymentResourceUpgradeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = upgradeDeploymentStatelessResourceValidateBeforeCall(deploymentId, statelessResourceKind, refId, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResourceUpgradeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
