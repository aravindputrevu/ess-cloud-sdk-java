/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AllocatorInfo;
import io.swagger.client.model.AllocatorOverview;
import io.swagger.client.model.AllocatorSettings;
import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.Blessing;
import io.swagger.client.model.Blessings;
import io.swagger.client.model.ConfigStoreOption;
import io.swagger.client.model.ConfigStoreOptionData;
import io.swagger.client.model.ConfigStoreOptionList;
import io.swagger.client.model.ConstructorInfo;
import io.swagger.client.model.ConstructorOverview;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.LicenseObject;
import io.swagger.client.model.MetadataItem;
import io.swagger.client.model.MetadataItemValue;
import io.swagger.client.model.MetadataItems;
import io.swagger.client.model.ModelVersionIndexSynchronizationResults;
import io.swagger.client.model.MoveClustersCommandResponse;
import io.swagger.client.model.MoveClustersRequest;
import io.swagger.client.model.ProxiesFilteredGroup;
import io.swagger.client.model.ProxiesFilteredGroupHealth;
import io.swagger.client.model.ProxiesHealth;
import io.swagger.client.model.ProxiesSettings;
import io.swagger.client.model.ProxyInfo;
import io.swagger.client.model.ProxyOverview;
import io.swagger.client.model.Role;
import io.swagger.client.model.RoleAggregate;
import io.swagger.client.model.RoleAggregateCreateData;
import io.swagger.client.model.RoleAggregates;
import io.swagger.client.model.RunnerInfo;
import io.swagger.client.model.RunnerOverview;
import io.swagger.client.model.RunnerRolesInfo;
import io.swagger.client.model.SearchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlatformInfrastructureApi {
    private ApiClient apiClient;

    public PlatformInfrastructureApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlatformInfrastructureApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addBlueprinterBlessing
     * @param body The blessing to add. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param runnerId Runner ID for a blessing associated with a role. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBlueprinterBlessingCall(Blessing body, String blueprinterRoleId, String runnerId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}/blessings/{runner_id}"
            .replaceAll("\\{" + "blueprinter_role_id" + "\\}", apiClient.escapeString(blueprinterRoleId.toString()))
            .replaceAll("\\{" + "runner_id" + "\\}", apiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBlueprinterBlessingValidateBeforeCall(Blessing body, String blueprinterRoleId, String runnerId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBlueprinterBlessing(Async)");
        }
        // verify the required parameter 'blueprinterRoleId' is set
        if (blueprinterRoleId == null) {
            throw new ApiException("Missing the required parameter 'blueprinterRoleId' when calling addBlueprinterBlessing(Async)");
        }
        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling addBlueprinterBlessing(Async)");
        }
        
        com.squareup.okhttp.Call call = addBlueprinterBlessingCall(body, blueprinterRoleId, runnerId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Blessing
     * Add a Blessing for a runner to a role.
     * @param body The blessing to add. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param runnerId Runner ID for a blessing associated with a role. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return RoleAggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoleAggregate addBlueprinterBlessing(Blessing body, String blueprinterRoleId, String runnerId, Integer version) throws ApiException {
        ApiResponse<RoleAggregate> resp = addBlueprinterBlessingWithHttpInfo(body, blueprinterRoleId, runnerId, version);
        return resp.getData();
    }

    /**
     * Add Blessing
     * Add a Blessing for a runner to a role.
     * @param body The blessing to add. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param runnerId Runner ID for a blessing associated with a role. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;RoleAggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoleAggregate> addBlueprinterBlessingWithHttpInfo(Blessing body, String blueprinterRoleId, String runnerId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = addBlueprinterBlessingValidateBeforeCall(body, blueprinterRoleId, runnerId, version, null, null);
        Type localVarReturnType = new TypeToken<RoleAggregate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Blessing (asynchronously)
     * Add a Blessing for a runner to a role.
     * @param body The blessing to add. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param runnerId Runner ID for a blessing associated with a role. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBlueprinterBlessingAsync(Blessing body, String blueprinterRoleId, String runnerId, Integer version, final ApiCallback<RoleAggregate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBlueprinterBlessingValidateBeforeCall(body, blueprinterRoleId, runnerId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoleAggregate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBlueprinterRole
     * @param body The data you want to use for creating a role. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBlueprinterRoleCall(RoleAggregateCreateData body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/blueprinter/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBlueprinterRoleValidateBeforeCall(RoleAggregateCreateData body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBlueprinterRole(Async)");
        }
        
        com.squareup.okhttp.Call call = createBlueprinterRoleCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a role
     * Create a Blueprinter role.
     * @param body The data you want to use for creating a role. (required)
     * @return RoleAggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoleAggregate createBlueprinterRole(RoleAggregateCreateData body) throws ApiException {
        ApiResponse<RoleAggregate> resp = createBlueprinterRoleWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a role
     * Create a Blueprinter role.
     * @param body The data you want to use for creating a role. (required)
     * @return ApiResponse&lt;RoleAggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoleAggregate> createBlueprinterRoleWithHttpInfo(RoleAggregateCreateData body) throws ApiException {
        com.squareup.okhttp.Call call = createBlueprinterRoleValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<RoleAggregate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a role (asynchronously)
     * Create a Blueprinter role.
     * @param body The data you want to use for creating a role. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBlueprinterRoleAsync(RoleAggregateCreateData body, final ApiCallback<RoleAggregate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBlueprinterRoleValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoleAggregate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createConfigStoreOption
     * @param body The Config Store Option definition (required)
     * @param configOptionId Name of the Config Store Option that you would like to create (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createConfigStoreOptionCall(ConfigStoreOptionData body, String configOptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/configuration/store/{config_option_id}"
            .replaceAll("\\{" + "config_option_id" + "\\}", apiClient.escapeString(configOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createConfigStoreOptionValidateBeforeCall(ConfigStoreOptionData body, String configOptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createConfigStoreOption(Async)");
        }
        // verify the required parameter 'configOptionId' is set
        if (configOptionId == null) {
            throw new ApiException("Missing the required parameter 'configOptionId' when calling createConfigStoreOption(Async)");
        }
        
        com.squareup.okhttp.Call call = createConfigStoreOptionCall(body, configOptionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Config Store Option
     * Inserts new Config Store Option.
     * @param body The Config Store Option definition (required)
     * @param configOptionId Name of the Config Store Option that you would like to create (required)
     * @return ConfigStoreOption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigStoreOption createConfigStoreOption(ConfigStoreOptionData body, String configOptionId) throws ApiException {
        ApiResponse<ConfigStoreOption> resp = createConfigStoreOptionWithHttpInfo(body, configOptionId);
        return resp.getData();
    }

    /**
     * Create Config Store Option
     * Inserts new Config Store Option.
     * @param body The Config Store Option definition (required)
     * @param configOptionId Name of the Config Store Option that you would like to create (required)
     * @return ApiResponse&lt;ConfigStoreOption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigStoreOption> createConfigStoreOptionWithHttpInfo(ConfigStoreOptionData body, String configOptionId) throws ApiException {
        com.squareup.okhttp.Call call = createConfigStoreOptionValidateBeforeCall(body, configOptionId, null, null);
        Type localVarReturnType = new TypeToken<ConfigStoreOption>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Config Store Option (asynchronously)
     * Inserts new Config Store Option.
     * @param body The Config Store Option definition (required)
     * @param configOptionId Name of the Config Store Option that you would like to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createConfigStoreOptionAsync(ConfigStoreOptionData body, String configOptionId, final ApiCallback<ConfigStoreOption> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createConfigStoreOptionValidateBeforeCall(body, configOptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigStoreOption>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProxiesFilteredGroup
     * @param body Data for the filtered group of proxies to create (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProxiesFilteredGroupCall(ProxiesFilteredGroup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies/filtered-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProxiesFilteredGroupValidateBeforeCall(ProxiesFilteredGroup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createProxiesFilteredGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createProxiesFilteredGroupCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create filtered group of proxies
     * Create the settings for a filtered group of proxies.
     * @param body Data for the filtered group of proxies to create (required)
     * @return ProxiesFilteredGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProxiesFilteredGroup createProxiesFilteredGroup(ProxiesFilteredGroup body) throws ApiException {
        ApiResponse<ProxiesFilteredGroup> resp = createProxiesFilteredGroupWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create filtered group of proxies
     * Create the settings for a filtered group of proxies.
     * @param body Data for the filtered group of proxies to create (required)
     * @return ApiResponse&lt;ProxiesFilteredGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProxiesFilteredGroup> createProxiesFilteredGroupWithHttpInfo(ProxiesFilteredGroup body) throws ApiException {
        com.squareup.okhttp.Call call = createProxiesFilteredGroupValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ProxiesFilteredGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create filtered group of proxies (asynchronously)
     * Create the settings for a filtered group of proxies.
     * @param body Data for the filtered group of proxies to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProxiesFilteredGroupAsync(ProxiesFilteredGroup body, final ApiCallback<ProxiesFilteredGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProxiesFilteredGroupValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProxiesFilteredGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAllocator
     * @param allocatorId The allocator identifier. (required)
     * @param removeInstances Removes the instances from the deleted allocator. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllocatorCall(String allocatorId, Boolean removeInstances, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (removeInstances != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("remove_instances", removeInstances));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllocatorValidateBeforeCall(String allocatorId, Boolean removeInstances, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling deleteAllocator(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAllocatorCall(allocatorId, removeInstances, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete allocator
     * Deletes the allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param removeInstances Removes the instances from the deleted allocator. (optional)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteAllocator(String allocatorId, Boolean removeInstances) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteAllocatorWithHttpInfo(allocatorId, removeInstances);
        return resp.getData();
    }

    /**
     * Delete allocator
     * Deletes the allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param removeInstances Removes the instances from the deleted allocator. (optional)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteAllocatorWithHttpInfo(String allocatorId, Boolean removeInstances) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllocatorValidateBeforeCall(allocatorId, removeInstances, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete allocator (asynchronously)
     * Deletes the allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param removeInstances Removes the instances from the deleted allocator. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllocatorAsync(String allocatorId, Boolean removeInstances, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllocatorValidateBeforeCall(allocatorId, removeInstances, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAllocatorMetadataItem
     * @param allocatorId The allocator identifier. (required)
     * @param key The metadata item key. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllocatorMetadataItemCall(String allocatorId, String key, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/metadata/{key}"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllocatorMetadataItemValidateBeforeCall(String allocatorId, String key, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling deleteAllocatorMetadataItem(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteAllocatorMetadataItem(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAllocatorMetadataItemCall(allocatorId, key, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete allocator metadata item
     * Removes a single item from the allocator metadata.
     * @param allocatorId The allocator identifier. (required)
     * @param key The metadata item key. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return List&lt;MetadataItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MetadataItem> deleteAllocatorMetadataItem(String allocatorId, String key, Integer version) throws ApiException {
        ApiResponse<List<MetadataItem>> resp = deleteAllocatorMetadataItemWithHttpInfo(allocatorId, key, version);
        return resp.getData();
    }

    /**
     * Delete allocator metadata item
     * Removes a single item from the allocator metadata.
     * @param allocatorId The allocator identifier. (required)
     * @param key The metadata item key. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;List&lt;MetadataItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MetadataItem>> deleteAllocatorMetadataItemWithHttpInfo(String allocatorId, String key, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllocatorMetadataItemValidateBeforeCall(allocatorId, key, version, null, null);
        Type localVarReturnType = new TypeToken<List<MetadataItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete allocator metadata item (asynchronously)
     * Removes a single item from the allocator metadata.
     * @param allocatorId The allocator identifier. (required)
     * @param key The metadata item key. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllocatorMetadataItemAsync(String allocatorId, String key, Integer version, final ApiCallback<List<MetadataItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllocatorMetadataItemValidateBeforeCall(allocatorId, key, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MetadataItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBlueprinterRole
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBlueprinterRoleCall(String blueprinterRoleId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}"
            .replaceAll("\\{" + "blueprinter_role_id" + "\\}", apiClient.escapeString(blueprinterRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBlueprinterRoleValidateBeforeCall(String blueprinterRoleId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blueprinterRoleId' is set
        if (blueprinterRoleId == null) {
            throw new ApiException("Missing the required parameter 'blueprinterRoleId' when calling deleteBlueprinterRole(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBlueprinterRoleCall(blueprinterRoleId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete role
     * Delete a role.
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteBlueprinterRole(String blueprinterRoleId, Integer version) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteBlueprinterRoleWithHttpInfo(blueprinterRoleId, version);
        return resp.getData();
    }

    /**
     * Delete role
     * Delete a role.
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteBlueprinterRoleWithHttpInfo(String blueprinterRoleId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = deleteBlueprinterRoleValidateBeforeCall(blueprinterRoleId, version, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete role (asynchronously)
     * Delete a role.
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBlueprinterRoleAsync(String blueprinterRoleId, Integer version, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBlueprinterRoleValidateBeforeCall(blueprinterRoleId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteConfigStoreOption
     * @param configOptionId Name of the Config Store Option that you would like to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteConfigStoreOptionCall(String configOptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/configuration/store/{config_option_id}"
            .replaceAll("\\{" + "config_option_id" + "\\}", apiClient.escapeString(configOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteConfigStoreOptionValidateBeforeCall(String configOptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'configOptionId' is set
        if (configOptionId == null) {
            throw new ApiException("Missing the required parameter 'configOptionId' when calling deleteConfigStoreOption(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteConfigStoreOptionCall(configOptionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Config Store Option by name
     * Delete Config Store Option by name.
     * @param configOptionId Name of the Config Store Option that you would like to delete (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteConfigStoreOption(String configOptionId) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteConfigStoreOptionWithHttpInfo(configOptionId);
        return resp.getData();
    }

    /**
     * Delete Config Store Option by name
     * Delete Config Store Option by name.
     * @param configOptionId Name of the Config Store Option that you would like to delete (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteConfigStoreOptionWithHttpInfo(String configOptionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteConfigStoreOptionValidateBeforeCall(configOptionId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Config Store Option by name (asynchronously)
     * Delete Config Store Option by name.
     * @param configOptionId Name of the Config Store Option that you would like to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteConfigStoreOptionAsync(String configOptionId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteConfigStoreOptionValidateBeforeCall(configOptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLicense
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLicenseCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLicenseValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = deleteLicenseCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete license
     * Deletes the license.
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteLicense() throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteLicenseWithHttpInfo();
        return resp.getData();
    }

    /**
     * Delete license
     * Deletes the license.
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteLicenseWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteLicenseValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete license (asynchronously)
     * Deletes the license.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLicenseAsync(final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLicenseValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteProxiesFilteredGroup
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProxiesFilteredGroupCall(String proxiesFilteredGroupId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}"
            .replaceAll("\\{" + "proxies_filtered_group_id" + "\\}", apiClient.escapeString(proxiesFilteredGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProxiesFilteredGroupValidateBeforeCall(String proxiesFilteredGroupId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'proxiesFilteredGroupId' is set
        if (proxiesFilteredGroupId == null) {
            throw new ApiException("Missing the required parameter 'proxiesFilteredGroupId' when calling deleteProxiesFilteredGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteProxiesFilteredGroupCall(proxiesFilteredGroupId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete filtered group of proxies
     * Deletes a filtered group of proxies by ID.
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteProxiesFilteredGroup(String proxiesFilteredGroupId, Integer version) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteProxiesFilteredGroupWithHttpInfo(proxiesFilteredGroupId, version);
        return resp.getData();
    }

    /**
     * Delete filtered group of proxies
     * Deletes a filtered group of proxies by ID.
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteProxiesFilteredGroupWithHttpInfo(String proxiesFilteredGroupId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = deleteProxiesFilteredGroupValidateBeforeCall(proxiesFilteredGroupId, version, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete filtered group of proxies (asynchronously)
     * Deletes a filtered group of proxies by ID.
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProxiesFilteredGroupAsync(String proxiesFilteredGroupId, Integer version, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProxiesFilteredGroupValidateBeforeCall(proxiesFilteredGroupId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRunner
     * @param runnerId The identifier for the runner (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRunnerCall(String runnerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/runners/{runner_id}"
            .replaceAll("\\{" + "runner_id" + "\\}", apiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRunnerValidateBeforeCall(String runnerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling deleteRunner(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRunnerCall(runnerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete runner
     * Delete a runner by id.
     * @param runnerId The identifier for the runner (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteRunner(String runnerId) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteRunnerWithHttpInfo(runnerId);
        return resp.getData();
    }

    /**
     * Delete runner
     * Delete a runner by id.
     * @param runnerId The identifier for the runner (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteRunnerWithHttpInfo(String runnerId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRunnerValidateBeforeCall(runnerId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete runner (asynchronously)
     * Delete a runner by id.
     * @param runnerId The identifier for the runner (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRunnerAsync(String runnerId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRunnerValidateBeforeCall(runnerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocator
     * @param allocatorId The allocator identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocatorCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocatorValidateBeforeCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling getAllocator(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllocatorCall(allocatorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get allocator
     * Retrieves the allocator by the ID.
     * @param allocatorId The allocator identifier. (required)
     * @return AllocatorInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocatorInfo getAllocator(String allocatorId) throws ApiException {
        ApiResponse<AllocatorInfo> resp = getAllocatorWithHttpInfo(allocatorId);
        return resp.getData();
    }

    /**
     * Get allocator
     * Retrieves the allocator by the ID.
     * @param allocatorId The allocator identifier. (required)
     * @return ApiResponse&lt;AllocatorInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocatorInfo> getAllocatorWithHttpInfo(String allocatorId) throws ApiException {
        com.squareup.okhttp.Call call = getAllocatorValidateBeforeCall(allocatorId, null, null);
        Type localVarReturnType = new TypeToken<AllocatorInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get allocator (asynchronously)
     * Retrieves the allocator by the ID.
     * @param allocatorId The allocator identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocatorAsync(String allocatorId, final ApiCallback<AllocatorInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocatorValidateBeforeCall(allocatorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocatorInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocatorMetadata
     * @param allocatorId The allocator identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocatorMetadataCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/metadata"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocatorMetadataValidateBeforeCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling getAllocatorMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllocatorMetadataCall(allocatorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get allocator metadata
     * Retrieves the allocator metadata.
     * @param allocatorId The allocator identifier. (required)
     * @return List&lt;MetadataItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MetadataItem> getAllocatorMetadata(String allocatorId) throws ApiException {
        ApiResponse<List<MetadataItem>> resp = getAllocatorMetadataWithHttpInfo(allocatorId);
        return resp.getData();
    }

    /**
     * Get allocator metadata
     * Retrieves the allocator metadata.
     * @param allocatorId The allocator identifier. (required)
     * @return ApiResponse&lt;List&lt;MetadataItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MetadataItem>> getAllocatorMetadataWithHttpInfo(String allocatorId) throws ApiException {
        com.squareup.okhttp.Call call = getAllocatorMetadataValidateBeforeCall(allocatorId, null, null);
        Type localVarReturnType = new TypeToken<List<MetadataItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get allocator metadata (asynchronously)
     * Retrieves the allocator metadata.
     * @param allocatorId The allocator identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocatorMetadataAsync(String allocatorId, final ApiCallback<List<MetadataItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocatorMetadataValidateBeforeCall(allocatorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MetadataItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocatorSettings
     * @param allocatorId The allocator identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocatorSettingsCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/settings"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocatorSettingsValidateBeforeCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling getAllocatorSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllocatorSettingsCall(allocatorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get allocator settings
     * Retrieves the allocator override settings.
     * @param allocatorId The allocator identifier. (required)
     * @return AllocatorSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocatorSettings getAllocatorSettings(String allocatorId) throws ApiException {
        ApiResponse<AllocatorSettings> resp = getAllocatorSettingsWithHttpInfo(allocatorId);
        return resp.getData();
    }

    /**
     * Get allocator settings
     * Retrieves the allocator override settings.
     * @param allocatorId The allocator identifier. (required)
     * @return ApiResponse&lt;AllocatorSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocatorSettings> getAllocatorSettingsWithHttpInfo(String allocatorId) throws ApiException {
        com.squareup.okhttp.Call call = getAllocatorSettingsValidateBeforeCall(allocatorId, null, null);
        Type localVarReturnType = new TypeToken<AllocatorSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get allocator settings (asynchronously)
     * Retrieves the allocator override settings.
     * @param allocatorId The allocator identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocatorSettingsAsync(String allocatorId, final ApiCallback<AllocatorSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocatorSettingsValidateBeforeCall(allocatorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocatorSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocators
     * @param q (Optional) The query that filters the allocators. Maps to an Elasticsearch &#x60;query_string&#x60; query. (optional)
     * @param size (Optional) The maximum number of search results to return. Defaults to 100. (optional)
     * @param from (Optional) The offset from the first result you want to fetch. Defaults to 0. (optional)
     * @param sort (Optional) An comma-separated array of fields to sort the search results by. Defaults to &#x60;allocator_id&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocatorsCall(String q, Integer size, Integer from, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocatorsValidateBeforeCall(String q, Integer size, Integer from, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllocatorsCall(q, size, from, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get allocators
     * Retrieves the information for all of the allocators in the platform.
     * @param q (Optional) The query that filters the allocators. Maps to an Elasticsearch &#x60;query_string&#x60; query. (optional)
     * @param size (Optional) The maximum number of search results to return. Defaults to 100. (optional)
     * @param from (Optional) The offset from the first result you want to fetch. Defaults to 0. (optional)
     * @param sort (Optional) An comma-separated array of fields to sort the search results by. Defaults to &#x60;allocator_id&#x60;. (optional)
     * @return AllocatorOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocatorOverview getAllocators(String q, Integer size, Integer from, String sort) throws ApiException {
        ApiResponse<AllocatorOverview> resp = getAllocatorsWithHttpInfo(q, size, from, sort);
        return resp.getData();
    }

    /**
     * Get allocators
     * Retrieves the information for all of the allocators in the platform.
     * @param q (Optional) The query that filters the allocators. Maps to an Elasticsearch &#x60;query_string&#x60; query. (optional)
     * @param size (Optional) The maximum number of search results to return. Defaults to 100. (optional)
     * @param from (Optional) The offset from the first result you want to fetch. Defaults to 0. (optional)
     * @param sort (Optional) An comma-separated array of fields to sort the search results by. Defaults to &#x60;allocator_id&#x60;. (optional)
     * @return ApiResponse&lt;AllocatorOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocatorOverview> getAllocatorsWithHttpInfo(String q, Integer size, Integer from, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getAllocatorsValidateBeforeCall(q, size, from, sort, null, null);
        Type localVarReturnType = new TypeToken<AllocatorOverview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get allocators (asynchronously)
     * Retrieves the information for all of the allocators in the platform.
     * @param q (Optional) The query that filters the allocators. Maps to an Elasticsearch &#x60;query_string&#x60; query. (optional)
     * @param size (Optional) The maximum number of search results to return. Defaults to 100. (optional)
     * @param from (Optional) The offset from the first result you want to fetch. Defaults to 0. (optional)
     * @param sort (Optional) An comma-separated array of fields to sort the search results by. Defaults to &#x60;allocator_id&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocatorsAsync(String q, Integer size, Integer from, String sort, final ApiCallback<AllocatorOverview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocatorsValidateBeforeCall(q, size, from, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocatorOverview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBlueprinterRole
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlueprinterRoleCall(String blueprinterRoleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}"
            .replaceAll("\\{" + "blueprinter_role_id" + "\\}", apiClient.escapeString(blueprinterRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlueprinterRoleValidateBeforeCall(String blueprinterRoleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blueprinterRoleId' is set
        if (blueprinterRoleId == null) {
            throw new ApiException("Missing the required parameter 'blueprinterRoleId' when calling getBlueprinterRole(Async)");
        }
        
        com.squareup.okhttp.Call call = getBlueprinterRoleCall(blueprinterRoleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get role
     * Retrieve a role.
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @return RoleAggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoleAggregate getBlueprinterRole(String blueprinterRoleId) throws ApiException {
        ApiResponse<RoleAggregate> resp = getBlueprinterRoleWithHttpInfo(blueprinterRoleId);
        return resp.getData();
    }

    /**
     * Get role
     * Retrieve a role.
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @return ApiResponse&lt;RoleAggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoleAggregate> getBlueprinterRoleWithHttpInfo(String blueprinterRoleId) throws ApiException {
        com.squareup.okhttp.Call call = getBlueprinterRoleValidateBeforeCall(blueprinterRoleId, null, null);
        Type localVarReturnType = new TypeToken<RoleAggregate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get role (asynchronously)
     * Retrieve a role.
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlueprinterRoleAsync(String blueprinterRoleId, final ApiCallback<RoleAggregate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlueprinterRoleValidateBeforeCall(blueprinterRoleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoleAggregate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConfigStoreOption
     * @param configOptionId Name of the Config Store Option that you would like to find (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConfigStoreOptionCall(String configOptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/configuration/store/{config_option_id}"
            .replaceAll("\\{" + "config_option_id" + "\\}", apiClient.escapeString(configOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConfigStoreOptionValidateBeforeCall(String configOptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'configOptionId' is set
        if (configOptionId == null) {
            throw new ApiException("Missing the required parameter 'configOptionId' when calling getConfigStoreOption(Async)");
        }
        
        com.squareup.okhttp.Call call = getConfigStoreOptionCall(configOptionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find Config Store Option by name
     * Find Config Store Option by name.
     * @param configOptionId Name of the Config Store Option that you would like to find (required)
     * @return ConfigStoreOption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigStoreOption getConfigStoreOption(String configOptionId) throws ApiException {
        ApiResponse<ConfigStoreOption> resp = getConfigStoreOptionWithHttpInfo(configOptionId);
        return resp.getData();
    }

    /**
     * Find Config Store Option by name
     * Find Config Store Option by name.
     * @param configOptionId Name of the Config Store Option that you would like to find (required)
     * @return ApiResponse&lt;ConfigStoreOption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigStoreOption> getConfigStoreOptionWithHttpInfo(String configOptionId) throws ApiException {
        com.squareup.okhttp.Call call = getConfigStoreOptionValidateBeforeCall(configOptionId, null, null);
        Type localVarReturnType = new TypeToken<ConfigStoreOption>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find Config Store Option by name (asynchronously)
     * Find Config Store Option by name.
     * @param configOptionId Name of the Config Store Option that you would like to find (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConfigStoreOptionAsync(String configOptionId, final ApiCallback<ConfigStoreOption> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConfigStoreOptionValidateBeforeCall(configOptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigStoreOption>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConstructor
     * @param constructorId Identifier for the constructor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConstructorCall(String constructorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/constructors/{constructor_id}"
            .replaceAll("\\{" + "constructor_id" + "\\}", apiClient.escapeString(constructorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConstructorValidateBeforeCall(String constructorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'constructorId' is set
        if (constructorId == null) {
            throw new ApiException("Missing the required parameter 'constructorId' when calling getConstructor(Async)");
        }
        
        com.squareup.okhttp.Call call = getConstructorCall(constructorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get constructor
     * Retrieves a constructor by id.
     * @param constructorId Identifier for the constructor (required)
     * @return ConstructorInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConstructorInfo getConstructor(String constructorId) throws ApiException {
        ApiResponse<ConstructorInfo> resp = getConstructorWithHttpInfo(constructorId);
        return resp.getData();
    }

    /**
     * Get constructor
     * Retrieves a constructor by id.
     * @param constructorId Identifier for the constructor (required)
     * @return ApiResponse&lt;ConstructorInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConstructorInfo> getConstructorWithHttpInfo(String constructorId) throws ApiException {
        com.squareup.okhttp.Call call = getConstructorValidateBeforeCall(constructorId, null, null);
        Type localVarReturnType = new TypeToken<ConstructorInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get constructor (asynchronously)
     * Retrieves a constructor by id.
     * @param constructorId Identifier for the constructor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConstructorAsync(String constructorId, final ApiCallback<ConstructorInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConstructorValidateBeforeCall(constructorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConstructorInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConstructors
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConstructorsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/constructors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConstructorsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getConstructorsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get constructors
     * Retrieves an overview of all constructors in an ECE installation.
     * @return ConstructorOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConstructorOverview getConstructors() throws ApiException {
        ApiResponse<ConstructorOverview> resp = getConstructorsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get constructors
     * Retrieves an overview of all constructors in an ECE installation.
     * @return ApiResponse&lt;ConstructorOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConstructorOverview> getConstructorsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConstructorsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConstructorOverview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get constructors (asynchronously)
     * Retrieves an overview of all constructors in an ECE installation.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConstructorsAsync(final ApiCallback<ConstructorOverview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConstructorsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConstructorOverview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLicense
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLicenseCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLicenseValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getLicenseCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get license
     * Retrieves the license.
     * @return LicenseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LicenseObject getLicense() throws ApiException {
        ApiResponse<LicenseObject> resp = getLicenseWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get license
     * Retrieves the license.
     * @return ApiResponse&lt;LicenseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LicenseObject> getLicenseWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getLicenseValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<LicenseObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get license (asynchronously)
     * Retrieves the license.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLicenseAsync(final ApiCallback<LicenseObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLicenseValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LicenseObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProxies
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProxiesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProxiesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getProxiesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get proxies
     * Retrieves an overview of all proxies.
     * @return ProxyOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProxyOverview getProxies() throws ApiException {
        ApiResponse<ProxyOverview> resp = getProxiesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get proxies
     * Retrieves an overview of all proxies.
     * @return ApiResponse&lt;ProxyOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProxyOverview> getProxiesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getProxiesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ProxyOverview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get proxies (asynchronously)
     * Retrieves an overview of all proxies.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProxiesAsync(final ApiCallback<ProxyOverview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProxiesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProxyOverview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProxiesFilteredGroup
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProxiesFilteredGroupCall(String proxiesFilteredGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}"
            .replaceAll("\\{" + "proxies_filtered_group_id" + "\\}", apiClient.escapeString(proxiesFilteredGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProxiesFilteredGroupValidateBeforeCall(String proxiesFilteredGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'proxiesFilteredGroupId' is set
        if (proxiesFilteredGroupId == null) {
            throw new ApiException("Missing the required parameter 'proxiesFilteredGroupId' when calling getProxiesFilteredGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getProxiesFilteredGroupCall(proxiesFilteredGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get filtered group of proxies
     * Get data for a filtered group of proxies.
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @return ProxiesFilteredGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProxiesFilteredGroup getProxiesFilteredGroup(String proxiesFilteredGroupId) throws ApiException {
        ApiResponse<ProxiesFilteredGroup> resp = getProxiesFilteredGroupWithHttpInfo(proxiesFilteredGroupId);
        return resp.getData();
    }

    /**
     * Get filtered group of proxies
     * Get data for a filtered group of proxies.
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @return ApiResponse&lt;ProxiesFilteredGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProxiesFilteredGroup> getProxiesFilteredGroupWithHttpInfo(String proxiesFilteredGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getProxiesFilteredGroupValidateBeforeCall(proxiesFilteredGroupId, null, null);
        Type localVarReturnType = new TypeToken<ProxiesFilteredGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get filtered group of proxies (asynchronously)
     * Get data for a filtered group of proxies.
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProxiesFilteredGroupAsync(String proxiesFilteredGroupId, final ApiCallback<ProxiesFilteredGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProxiesFilteredGroupValidateBeforeCall(proxiesFilteredGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProxiesFilteredGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProxiesFilteredGroupHealth
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param expectStatus The expected status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProxiesFilteredGroupHealthCall(String proxiesFilteredGroupId, String expectStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}/health"
            .replaceAll("\\{" + "proxies_filtered_group_id" + "\\}", apiClient.escapeString(proxiesFilteredGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expectStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expect_status", expectStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProxiesFilteredGroupHealthValidateBeforeCall(String proxiesFilteredGroupId, String expectStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'proxiesFilteredGroupId' is set
        if (proxiesFilteredGroupId == null) {
            throw new ApiException("Missing the required parameter 'proxiesFilteredGroupId' when calling getProxiesFilteredGroupHealth(Async)");
        }
        
        com.squareup.okhttp.Call call = getProxiesFilteredGroupHealthCall(proxiesFilteredGroupId, expectStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get health for a filtered group of proxies
     * Get the health status of a filtered group of proxies.
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param expectStatus The expected status (optional)
     * @return ProxiesFilteredGroupHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProxiesFilteredGroupHealth getProxiesFilteredGroupHealth(String proxiesFilteredGroupId, String expectStatus) throws ApiException {
        ApiResponse<ProxiesFilteredGroupHealth> resp = getProxiesFilteredGroupHealthWithHttpInfo(proxiesFilteredGroupId, expectStatus);
        return resp.getData();
    }

    /**
     * Get health for a filtered group of proxies
     * Get the health status of a filtered group of proxies.
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param expectStatus The expected status (optional)
     * @return ApiResponse&lt;ProxiesFilteredGroupHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProxiesFilteredGroupHealth> getProxiesFilteredGroupHealthWithHttpInfo(String proxiesFilteredGroupId, String expectStatus) throws ApiException {
        com.squareup.okhttp.Call call = getProxiesFilteredGroupHealthValidateBeforeCall(proxiesFilteredGroupId, expectStatus, null, null);
        Type localVarReturnType = new TypeToken<ProxiesFilteredGroupHealth>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get health for a filtered group of proxies (asynchronously)
     * Get the health status of a filtered group of proxies.
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param expectStatus The expected status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProxiesFilteredGroupHealthAsync(String proxiesFilteredGroupId, String expectStatus, final ApiCallback<ProxiesFilteredGroupHealth> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProxiesFilteredGroupHealthValidateBeforeCall(proxiesFilteredGroupId, expectStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProxiesFilteredGroupHealth>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProxiesHealth
     * @param expectStatus The expected status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProxiesHealthCall(String expectStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expectStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expect_status", expectStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProxiesHealthValidateBeforeCall(String expectStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getProxiesHealthCall(expectStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get proxy health
     * Get the health status of all proxies.
     * @param expectStatus The expected status (optional)
     * @return ProxiesHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProxiesHealth getProxiesHealth(String expectStatus) throws ApiException {
        ApiResponse<ProxiesHealth> resp = getProxiesHealthWithHttpInfo(expectStatus);
        return resp.getData();
    }

    /**
     * Get proxy health
     * Get the health status of all proxies.
     * @param expectStatus The expected status (optional)
     * @return ApiResponse&lt;ProxiesHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProxiesHealth> getProxiesHealthWithHttpInfo(String expectStatus) throws ApiException {
        com.squareup.okhttp.Call call = getProxiesHealthValidateBeforeCall(expectStatus, null, null);
        Type localVarReturnType = new TypeToken<ProxiesHealth>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get proxy health (asynchronously)
     * Get the health status of all proxies.
     * @param expectStatus The expected status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProxiesHealthAsync(String expectStatus, final ApiCallback<ProxiesHealth> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProxiesHealthValidateBeforeCall(expectStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProxiesHealth>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProxiesSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProxiesSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProxiesSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getProxiesSettingsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get proxies settings
     * Retrieves the settings for all proxies.
     * @return ProxiesSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProxiesSettings getProxiesSettings() throws ApiException {
        ApiResponse<ProxiesSettings> resp = getProxiesSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get proxies settings
     * Retrieves the settings for all proxies.
     * @return ApiResponse&lt;ProxiesSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProxiesSettings> getProxiesSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getProxiesSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ProxiesSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get proxies settings (asynchronously)
     * Retrieves the settings for all proxies.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProxiesSettingsAsync(final ApiCallback<ProxiesSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProxiesSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProxiesSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProxy
     * @param proxyId The identifier for the proxy (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProxyCall(String proxyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies/{proxy_id}"
            .replaceAll("\\{" + "proxy_id" + "\\}", apiClient.escapeString(proxyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProxyValidateBeforeCall(String proxyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'proxyId' is set
        if (proxyId == null) {
            throw new ApiException("Missing the required parameter 'proxyId' when calling getProxy(Async)");
        }
        
        com.squareup.okhttp.Call call = getProxyCall(proxyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get proxy
     * Retrieves a single proxy by ID.
     * @param proxyId The identifier for the proxy (required)
     * @return ProxyInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProxyInfo getProxy(String proxyId) throws ApiException {
        ApiResponse<ProxyInfo> resp = getProxyWithHttpInfo(proxyId);
        return resp.getData();
    }

    /**
     * Get proxy
     * Retrieves a single proxy by ID.
     * @param proxyId The identifier for the proxy (required)
     * @return ApiResponse&lt;ProxyInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProxyInfo> getProxyWithHttpInfo(String proxyId) throws ApiException {
        com.squareup.okhttp.Call call = getProxyValidateBeforeCall(proxyId, null, null);
        Type localVarReturnType = new TypeToken<ProxyInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get proxy (asynchronously)
     * Retrieves a single proxy by ID.
     * @param proxyId The identifier for the proxy (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProxyAsync(String proxyId, final ApiCallback<ProxyInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProxyValidateBeforeCall(proxyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProxyInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRunner
     * @param runnerId The identifier for the runner (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRunnerCall(String runnerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/runners/{runner_id}"
            .replaceAll("\\{" + "runner_id" + "\\}", apiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRunnerValidateBeforeCall(String runnerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling getRunner(Async)");
        }
        
        com.squareup.okhttp.Call call = getRunnerCall(runnerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get runner
     * Retrieves a runner by id.
     * @param runnerId The identifier for the runner (required)
     * @return RunnerInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RunnerInfo getRunner(String runnerId) throws ApiException {
        ApiResponse<RunnerInfo> resp = getRunnerWithHttpInfo(runnerId);
        return resp.getData();
    }

    /**
     * Get runner
     * Retrieves a runner by id.
     * @param runnerId The identifier for the runner (required)
     * @return ApiResponse&lt;RunnerInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RunnerInfo> getRunnerWithHttpInfo(String runnerId) throws ApiException {
        com.squareup.okhttp.Call call = getRunnerValidateBeforeCall(runnerId, null, null);
        Type localVarReturnType = new TypeToken<RunnerInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get runner (asynchronously)
     * Retrieves a runner by id.
     * @param runnerId The identifier for the runner (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRunnerAsync(String runnerId, final ApiCallback<RunnerInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRunnerValidateBeforeCall(runnerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RunnerInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRunners
     * @param q An optional query to filter runners by. Maps to an Elasticsearch query_string query. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRunnersCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/runners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRunnersValidateBeforeCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getRunnersCall(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get runners
     * Retrieves an overview of all runners.
     * @param q An optional query to filter runners by. Maps to an Elasticsearch query_string query. (optional)
     * @return RunnerOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RunnerOverview getRunners(String q) throws ApiException {
        ApiResponse<RunnerOverview> resp = getRunnersWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * Get runners
     * Retrieves an overview of all runners.
     * @param q An optional query to filter runners by. Maps to an Elasticsearch query_string query. (optional)
     * @return ApiResponse&lt;RunnerOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RunnerOverview> getRunnersWithHttpInfo(String q) throws ApiException {
        com.squareup.okhttp.Call call = getRunnersValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<RunnerOverview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get runners (asynchronously)
     * Retrieves an overview of all runners.
     * @param q An optional query to filter runners by. Maps to an Elasticsearch query_string query. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRunnersAsync(String q, final ApiCallback<RunnerOverview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRunnersValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RunnerOverview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBlueprinterRoles
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBlueprinterRolesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/blueprinter/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBlueprinterRolesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listBlueprinterRolesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List roles
     * Retrieve all persisted roles.
     * @return RoleAggregates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoleAggregates listBlueprinterRoles() throws ApiException {
        ApiResponse<RoleAggregates> resp = listBlueprinterRolesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List roles
     * Retrieve all persisted roles.
     * @return ApiResponse&lt;RoleAggregates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoleAggregates> listBlueprinterRolesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listBlueprinterRolesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RoleAggregates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List roles (asynchronously)
     * Retrieve all persisted roles.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBlueprinterRolesAsync(final ApiCallback<RoleAggregates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBlueprinterRolesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoleAggregates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listConfigStoreOption
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listConfigStoreOptionCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/configuration/store";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listConfigStoreOptionValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listConfigStoreOptionCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Config Store Option
     * List all existing Config Store Option.
     * @return ConfigStoreOptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigStoreOptionList listConfigStoreOption() throws ApiException {
        ApiResponse<ConfigStoreOptionList> resp = listConfigStoreOptionWithHttpInfo();
        return resp.getData();
    }

    /**
     * List Config Store Option
     * List all existing Config Store Option.
     * @return ApiResponse&lt;ConfigStoreOptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigStoreOptionList> listConfigStoreOptionWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listConfigStoreOptionValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConfigStoreOptionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Config Store Option (asynchronously)
     * List all existing Config Store Option.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listConfigStoreOptionAsync(final ApiCallback<ConfigStoreOptionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listConfigStoreOptionValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigStoreOptionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveClusters
     * @param allocatorId The allocator identifier. (required)
     * @param body Overrides defaults for the move of each cluster (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the specified instances and ignores the changes for the cluster state. (optional)
     * @param allocatorDown When &#x60;true&#x60;, considers all instances on the allocator as permanently shut down when deciding how to migrate data to new nodes.When left blank, the system automatically decides. NOTE: The default treats the allocator as up. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the plan overrides, then returns the plan without performing the move. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveClustersCall(String allocatorId, MoveClustersRequest body, Boolean forceUpdate, Boolean moveOnly, Boolean allocatorDown, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/clusters/_move"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forceUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_update", forceUpdate));
        if (moveOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("move_only", moveOnly));
        if (allocatorDown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allocator_down", allocatorDown));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveClustersValidateBeforeCall(String allocatorId, MoveClustersRequest body, Boolean forceUpdate, Boolean moveOnly, Boolean allocatorDown, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling moveClusters(Async)");
        }
        
        com.squareup.okhttp.Call call = moveClustersCall(allocatorId, body, forceUpdate, moveOnly, allocatorDown, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move clusters
     * Moves the clusters to a different allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param body Overrides defaults for the move of each cluster (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the specified instances and ignores the changes for the cluster state. (optional)
     * @param allocatorDown When &#x60;true&#x60;, considers all instances on the allocator as permanently shut down when deciding how to migrate data to new nodes.When left blank, the system automatically decides. NOTE: The default treats the allocator as up. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the plan overrides, then returns the plan without performing the move. (optional)
     * @return MoveClustersCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MoveClustersCommandResponse moveClusters(String allocatorId, MoveClustersRequest body, Boolean forceUpdate, Boolean moveOnly, Boolean allocatorDown, Boolean validateOnly) throws ApiException {
        ApiResponse<MoveClustersCommandResponse> resp = moveClustersWithHttpInfo(allocatorId, body, forceUpdate, moveOnly, allocatorDown, validateOnly);
        return resp.getData();
    }

    /**
     * Move clusters
     * Moves the clusters to a different allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param body Overrides defaults for the move of each cluster (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the specified instances and ignores the changes for the cluster state. (optional)
     * @param allocatorDown When &#x60;true&#x60;, considers all instances on the allocator as permanently shut down when deciding how to migrate data to new nodes.When left blank, the system automatically decides. NOTE: The default treats the allocator as up. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the plan overrides, then returns the plan without performing the move. (optional)
     * @return ApiResponse&lt;MoveClustersCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MoveClustersCommandResponse> moveClustersWithHttpInfo(String allocatorId, MoveClustersRequest body, Boolean forceUpdate, Boolean moveOnly, Boolean allocatorDown, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = moveClustersValidateBeforeCall(allocatorId, body, forceUpdate, moveOnly, allocatorDown, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<MoveClustersCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move clusters (asynchronously)
     * Moves the clusters to a different allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param body Overrides defaults for the move of each cluster (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the specified instances and ignores the changes for the cluster state. (optional)
     * @param allocatorDown When &#x60;true&#x60;, considers all instances on the allocator as permanently shut down when deciding how to migrate data to new nodes.When left blank, the system automatically decides. NOTE: The default treats the allocator as up. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the plan overrides, then returns the plan without performing the move. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveClustersAsync(String allocatorId, MoveClustersRequest body, Boolean forceUpdate, Boolean moveOnly, Boolean allocatorDown, Boolean validateOnly, final ApiCallback<MoveClustersCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveClustersValidateBeforeCall(allocatorId, body, forceUpdate, moveOnly, allocatorDown, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MoveClustersCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveClustersByType
     * @param allocatorId The allocator identifier. (required)
     * @param clusterType The cluster types to move off of the allocator. NOTE: When unspecified, all clusters are moved. (required)
     * @param body Overrides defaults for the move of each cluster (optional)
     * @param forceUpdate When true, cancels and overwrites pending plans, or treats instance as an error (optional)
     * @param moveOnly When true, bypasses the cluster state changes, but continues to move the specified instances (optional)
     * @param allocatorDown When &#x60;true&#x60;, considers all instances on the allocator as permanently shut down when deciding how to migrate data to new nodes.When left blank, the system automatically decides. NOTE: The default treats the allocator as up. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the plan overrides, then returns the plan without performing the move. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveClustersByTypeCall(String allocatorId, String clusterType, MoveClustersRequest body, Boolean forceUpdate, Boolean moveOnly, Boolean allocatorDown, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/clusters/{cluster_type}/_move"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()))
            .replaceAll("\\{" + "cluster_type" + "\\}", apiClient.escapeString(clusterType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forceUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_update", forceUpdate));
        if (moveOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("move_only", moveOnly));
        if (allocatorDown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allocator_down", allocatorDown));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveClustersByTypeValidateBeforeCall(String allocatorId, String clusterType, MoveClustersRequest body, Boolean forceUpdate, Boolean moveOnly, Boolean allocatorDown, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling moveClustersByType(Async)");
        }
        // verify the required parameter 'clusterType' is set
        if (clusterType == null) {
            throw new ApiException("Missing the required parameter 'clusterType' when calling moveClustersByType(Async)");
        }
        
        com.squareup.okhttp.Call call = moveClustersByTypeCall(allocatorId, clusterType, body, forceUpdate, moveOnly, allocatorDown, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move clusters by type
     * Moves the clusters, by type, to a different allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param clusterType The cluster types to move off of the allocator. NOTE: When unspecified, all clusters are moved. (required)
     * @param body Overrides defaults for the move of each cluster (optional)
     * @param forceUpdate When true, cancels and overwrites pending plans, or treats instance as an error (optional)
     * @param moveOnly When true, bypasses the cluster state changes, but continues to move the specified instances (optional)
     * @param allocatorDown When &#x60;true&#x60;, considers all instances on the allocator as permanently shut down when deciding how to migrate data to new nodes.When left blank, the system automatically decides. NOTE: The default treats the allocator as up. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the plan overrides, then returns the plan without performing the move. (optional)
     * @return MoveClustersCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MoveClustersCommandResponse moveClustersByType(String allocatorId, String clusterType, MoveClustersRequest body, Boolean forceUpdate, Boolean moveOnly, Boolean allocatorDown, Boolean validateOnly) throws ApiException {
        ApiResponse<MoveClustersCommandResponse> resp = moveClustersByTypeWithHttpInfo(allocatorId, clusterType, body, forceUpdate, moveOnly, allocatorDown, validateOnly);
        return resp.getData();
    }

    /**
     * Move clusters by type
     * Moves the clusters, by type, to a different allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param clusterType The cluster types to move off of the allocator. NOTE: When unspecified, all clusters are moved. (required)
     * @param body Overrides defaults for the move of each cluster (optional)
     * @param forceUpdate When true, cancels and overwrites pending plans, or treats instance as an error (optional)
     * @param moveOnly When true, bypasses the cluster state changes, but continues to move the specified instances (optional)
     * @param allocatorDown When &#x60;true&#x60;, considers all instances on the allocator as permanently shut down when deciding how to migrate data to new nodes.When left blank, the system automatically decides. NOTE: The default treats the allocator as up. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the plan overrides, then returns the plan without performing the move. (optional)
     * @return ApiResponse&lt;MoveClustersCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MoveClustersCommandResponse> moveClustersByTypeWithHttpInfo(String allocatorId, String clusterType, MoveClustersRequest body, Boolean forceUpdate, Boolean moveOnly, Boolean allocatorDown, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = moveClustersByTypeValidateBeforeCall(allocatorId, clusterType, body, forceUpdate, moveOnly, allocatorDown, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<MoveClustersCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move clusters by type (asynchronously)
     * Moves the clusters, by type, to a different allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param clusterType The cluster types to move off of the allocator. NOTE: When unspecified, all clusters are moved. (required)
     * @param body Overrides defaults for the move of each cluster (optional)
     * @param forceUpdate When true, cancels and overwrites pending plans, or treats instance as an error (optional)
     * @param moveOnly When true, bypasses the cluster state changes, but continues to move the specified instances (optional)
     * @param allocatorDown When &#x60;true&#x60;, considers all instances on the allocator as permanently shut down when deciding how to migrate data to new nodes.When left blank, the system automatically decides. NOTE: The default treats the allocator as up. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the plan overrides, then returns the plan without performing the move. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveClustersByTypeAsync(String allocatorId, String clusterType, MoveClustersRequest body, Boolean forceUpdate, Boolean moveOnly, Boolean allocatorDown, Boolean validateOnly, final ApiCallback<MoveClustersCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveClustersByTypeValidateBeforeCall(allocatorId, clusterType, body, forceUpdate, moveOnly, allocatorDown, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MoveClustersCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putConfigStoreOption
     * @param body The Config Store Option definition (required)
     * @param configOptionId Name of the Config Store Option that you would like to modify (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putConfigStoreOptionCall(ConfigStoreOptionData body, String configOptionId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/configuration/store/{config_option_id}"
            .replaceAll("\\{" + "config_option_id" + "\\}", apiClient.escapeString(configOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putConfigStoreOptionValidateBeforeCall(ConfigStoreOptionData body, String configOptionId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putConfigStoreOption(Async)");
        }
        // verify the required parameter 'configOptionId' is set
        if (configOptionId == null) {
            throw new ApiException("Missing the required parameter 'configOptionId' when calling putConfigStoreOption(Async)");
        }
        
        com.squareup.okhttp.Call call = putConfigStoreOptionCall(body, configOptionId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Config Store Option
     * Update existing Config Store Option.
     * @param body The Config Store Option definition (required)
     * @param configOptionId Name of the Config Store Option that you would like to modify (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ConfigStoreOption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigStoreOption putConfigStoreOption(ConfigStoreOptionData body, String configOptionId, Integer version) throws ApiException {
        ApiResponse<ConfigStoreOption> resp = putConfigStoreOptionWithHttpInfo(body, configOptionId, version);
        return resp.getData();
    }

    /**
     * Update Config Store Option
     * Update existing Config Store Option.
     * @param body The Config Store Option definition (required)
     * @param configOptionId Name of the Config Store Option that you would like to modify (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;ConfigStoreOption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigStoreOption> putConfigStoreOptionWithHttpInfo(ConfigStoreOptionData body, String configOptionId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = putConfigStoreOptionValidateBeforeCall(body, configOptionId, version, null, null);
        Type localVarReturnType = new TypeToken<ConfigStoreOption>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Config Store Option (asynchronously)
     * Update existing Config Store Option.
     * @param body The Config Store Option definition (required)
     * @param configOptionId Name of the Config Store Option that you would like to modify (required)
     * @param version If specified then checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putConfigStoreOptionAsync(ConfigStoreOptionData body, String configOptionId, Integer version, final ApiCallback<ConfigStoreOption> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putConfigStoreOptionValidateBeforeCall(body, configOptionId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigStoreOption>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncAllocator
     * @param allocatorId The allocator identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncAllocatorCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/_resync"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncAllocatorValidateBeforeCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling resyncAllocator(Async)");
        }
        
        com.squareup.okhttp.Call call = resyncAllocatorCall(allocatorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize allocator
     * Immediately synchronizes the allocator information in the back-end search index and caches.
     * @param allocatorId The allocator identifier. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse resyncAllocator(String allocatorId) throws ApiException {
        ApiResponse<EmptyResponse> resp = resyncAllocatorWithHttpInfo(allocatorId);
        return resp.getData();
    }

    /**
     * Resynchronize allocator
     * Immediately synchronizes the allocator information in the back-end search index and caches.
     * @param allocatorId The allocator identifier. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> resyncAllocatorWithHttpInfo(String allocatorId) throws ApiException {
        com.squareup.okhttp.Call call = resyncAllocatorValidateBeforeCall(allocatorId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize allocator (asynchronously)
     * Immediately synchronizes the allocator information in the back-end search index and caches.
     * @param allocatorId The allocator identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncAllocatorAsync(String allocatorId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncAllocatorValidateBeforeCall(allocatorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncAllocators
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncAllocatorsCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/_resync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skipMatchingVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_matching_version", skipMatchingVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncAllocatorsValidateBeforeCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = resyncAllocatorsCall(skipMatchingVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize allocators
     * Asynchronously synchronizes all allocator information in the back-end search index.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ModelVersionIndexSynchronizationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelVersionIndexSynchronizationResults resyncAllocators(Boolean skipMatchingVersion) throws ApiException {
        ApiResponse<ModelVersionIndexSynchronizationResults> resp = resyncAllocatorsWithHttpInfo(skipMatchingVersion);
        return resp.getData();
    }

    /**
     * Resynchronize allocators
     * Asynchronously synchronizes all allocator information in the back-end search index.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ApiResponse&lt;ModelVersionIndexSynchronizationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelVersionIndexSynchronizationResults> resyncAllocatorsWithHttpInfo(Boolean skipMatchingVersion) throws ApiException {
        com.squareup.okhttp.Call call = resyncAllocatorsValidateBeforeCall(skipMatchingVersion, null, null);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize allocators (asynchronously)
     * Asynchronously synchronizes all allocator information in the back-end search index.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncAllocatorsAsync(Boolean skipMatchingVersion, final ApiCallback<ModelVersionIndexSynchronizationResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncAllocatorsValidateBeforeCall(skipMatchingVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncConstructor
     * @param constructorId Identifier for the constructor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncConstructorCall(String constructorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/constructors/{constructor_id}/_resync"
            .replaceAll("\\{" + "constructor_id" + "\\}", apiClient.escapeString(constructorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncConstructorValidateBeforeCall(String constructorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'constructorId' is set
        if (constructorId == null) {
            throw new ApiException("Missing the required parameter 'constructorId' when calling resyncConstructor(Async)");
        }
        
        com.squareup.okhttp.Call call = resyncConstructorCall(constructorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize constructor
     * Immediately resynchronizes the search index and cache for the selected constructor.
     * @param constructorId Identifier for the constructor (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse resyncConstructor(String constructorId) throws ApiException {
        ApiResponse<EmptyResponse> resp = resyncConstructorWithHttpInfo(constructorId);
        return resp.getData();
    }

    /**
     * Resynchronize constructor
     * Immediately resynchronizes the search index and cache for the selected constructor.
     * @param constructorId Identifier for the constructor (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> resyncConstructorWithHttpInfo(String constructorId) throws ApiException {
        com.squareup.okhttp.Call call = resyncConstructorValidateBeforeCall(constructorId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize constructor (asynchronously)
     * Immediately resynchronizes the search index and cache for the selected constructor.
     * @param constructorId Identifier for the constructor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncConstructorAsync(String constructorId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncConstructorValidateBeforeCall(constructorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncConstructors
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncConstructorsCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/constructors/_resync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skipMatchingVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_matching_version", skipMatchingVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncConstructorsValidateBeforeCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = resyncConstructorsCall(skipMatchingVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize constructors
     * Asynchronously synchronizes all constructor information in the back-end search index.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ModelVersionIndexSynchronizationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelVersionIndexSynchronizationResults resyncConstructors(Boolean skipMatchingVersion) throws ApiException {
        ApiResponse<ModelVersionIndexSynchronizationResults> resp = resyncConstructorsWithHttpInfo(skipMatchingVersion);
        return resp.getData();
    }

    /**
     * Resynchronize constructors
     * Asynchronously synchronizes all constructor information in the back-end search index.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ApiResponse&lt;ModelVersionIndexSynchronizationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelVersionIndexSynchronizationResults> resyncConstructorsWithHttpInfo(Boolean skipMatchingVersion) throws ApiException {
        com.squareup.okhttp.Call call = resyncConstructorsValidateBeforeCall(skipMatchingVersion, null, null);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize constructors (asynchronously)
     * Asynchronously synchronizes all constructor information in the back-end search index.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncConstructorsAsync(Boolean skipMatchingVersion, final ApiCallback<ModelVersionIndexSynchronizationResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncConstructorsValidateBeforeCall(skipMatchingVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncRunner
     * @param runnerId The identifier for the runner (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncRunnerCall(String runnerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/runners/{runner_id}/_resync"
            .replaceAll("\\{" + "runner_id" + "\\}", apiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncRunnerValidateBeforeCall(String runnerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling resyncRunner(Async)");
        }
        
        com.squareup.okhttp.Call call = resyncRunnerCall(runnerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize runner
     * Immediately resynchronizes the search index and cache for the selected runner.
     * @param runnerId The identifier for the runner (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse resyncRunner(String runnerId) throws ApiException {
        ApiResponse<EmptyResponse> resp = resyncRunnerWithHttpInfo(runnerId);
        return resp.getData();
    }

    /**
     * Resynchronize runner
     * Immediately resynchronizes the search index and cache for the selected runner.
     * @param runnerId The identifier for the runner (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> resyncRunnerWithHttpInfo(String runnerId) throws ApiException {
        com.squareup.okhttp.Call call = resyncRunnerValidateBeforeCall(runnerId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize runner (asynchronously)
     * Immediately resynchronizes the search index and cache for the selected runner.
     * @param runnerId The identifier for the runner (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncRunnerAsync(String runnerId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncRunnerValidateBeforeCall(runnerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncRunners
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncRunnersCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/runners/_resync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skipMatchingVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_matching_version", skipMatchingVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncRunnersValidateBeforeCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = resyncRunnersCall(skipMatchingVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize runners
     * Asynchronously synchronizes all runner information in the search index.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ModelVersionIndexSynchronizationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelVersionIndexSynchronizationResults resyncRunners(Boolean skipMatchingVersion) throws ApiException {
        ApiResponse<ModelVersionIndexSynchronizationResults> resp = resyncRunnersWithHttpInfo(skipMatchingVersion);
        return resp.getData();
    }

    /**
     * Resynchronize runners
     * Asynchronously synchronizes all runner information in the search index.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ApiResponse&lt;ModelVersionIndexSynchronizationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelVersionIndexSynchronizationResults> resyncRunnersWithHttpInfo(Boolean skipMatchingVersion) throws ApiException {
        com.squareup.okhttp.Call call = resyncRunnersValidateBeforeCall(skipMatchingVersion, null, null);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize runners (asynchronously)
     * Asynchronously synchronizes all runner information in the search index.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncRunnersAsync(Boolean skipMatchingVersion, final ApiCallback<ModelVersionIndexSynchronizationResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncRunnersValidateBeforeCall(skipMatchingVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchAllocators
     * @param body The optional search request to execute. If not supplied then all allocators are matched (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchAllocatorsCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchAllocatorsValidateBeforeCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchAllocatorsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search allocators
     * Retrieves the information for all of the allocators in the platform that match the specified query.
     * @param body The optional search request to execute. If not supplied then all allocators are matched (optional)
     * @return AllocatorOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocatorOverview searchAllocators(SearchRequest body) throws ApiException {
        ApiResponse<AllocatorOverview> resp = searchAllocatorsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Search allocators
     * Retrieves the information for all of the allocators in the platform that match the specified query.
     * @param body The optional search request to execute. If not supplied then all allocators are matched (optional)
     * @return ApiResponse&lt;AllocatorOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocatorOverview> searchAllocatorsWithHttpInfo(SearchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = searchAllocatorsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AllocatorOverview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search allocators (asynchronously)
     * Retrieves the information for all of the allocators in the platform that match the specified query.
     * @param body The optional search request to execute. If not supplied then all allocators are matched (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAllocatorsAsync(SearchRequest body, final ApiCallback<AllocatorOverview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchAllocatorsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocatorOverview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchRunners
     * @param body The optional search request to execute. If not supplied then all runners are matched. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchRunnersCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/runners/_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchRunnersValidateBeforeCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchRunnersCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search runners
     * Retrieves runners that match a given query.
     * @param body The optional search request to execute. If not supplied then all runners are matched. (optional)
     * @return RunnerOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RunnerOverview searchRunners(SearchRequest body) throws ApiException {
        ApiResponse<RunnerOverview> resp = searchRunnersWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Search runners
     * Retrieves runners that match a given query.
     * @param body The optional search request to execute. If not supplied then all runners are matched. (optional)
     * @return ApiResponse&lt;RunnerOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RunnerOverview> searchRunnersWithHttpInfo(SearchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = searchRunnersValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<RunnerOverview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search runners (asynchronously)
     * Retrieves runners that match a given query.
     * @param body The optional search request to execute. If not supplied then all runners are matched. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchRunnersAsync(SearchRequest body, final ApiCallback<RunnerOverview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchRunnersValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RunnerOverview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAllocatorMetadata
     * @param body The metadata to update the allocator with (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAllocatorMetadataCall(MetadataItems body, String allocatorId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/metadata"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAllocatorMetadataValidateBeforeCall(MetadataItems body, String allocatorId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setAllocatorMetadata(Async)");
        }
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling setAllocatorMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = setAllocatorMetadataCall(body, allocatorId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set allocator metadata
     * Sets the allocator metadata.
     * @param body The metadata to update the allocator with (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return List&lt;MetadataItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MetadataItem> setAllocatorMetadata(MetadataItems body, String allocatorId, Integer version) throws ApiException {
        ApiResponse<List<MetadataItem>> resp = setAllocatorMetadataWithHttpInfo(body, allocatorId, version);
        return resp.getData();
    }

    /**
     * Set allocator metadata
     * Sets the allocator metadata.
     * @param body The metadata to update the allocator with (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;List&lt;MetadataItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MetadataItem>> setAllocatorMetadataWithHttpInfo(MetadataItems body, String allocatorId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = setAllocatorMetadataValidateBeforeCall(body, allocatorId, version, null, null);
        Type localVarReturnType = new TypeToken<List<MetadataItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set allocator metadata (asynchronously)
     * Sets the allocator metadata.
     * @param body The metadata to update the allocator with (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAllocatorMetadataAsync(MetadataItems body, String allocatorId, Integer version, final ApiCallback<List<MetadataItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAllocatorMetadataValidateBeforeCall(body, allocatorId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MetadataItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAllocatorMetadataItem
     * @param body The value of the metadata item to add or update (required)
     * @param allocatorId The allocator identifier. (required)
     * @param key The metadata item key. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAllocatorMetadataItemCall(MetadataItemValue body, String allocatorId, String key, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/metadata/{key}"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAllocatorMetadataItemValidateBeforeCall(MetadataItemValue body, String allocatorId, String key, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setAllocatorMetadataItem(Async)");
        }
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling setAllocatorMetadataItem(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling setAllocatorMetadataItem(Async)");
        }
        
        com.squareup.okhttp.Call call = setAllocatorMetadataItemCall(body, allocatorId, key, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set allocator metadata item
     * Adds or updates a single item in the allocator metadata.
     * @param body The value of the metadata item to add or update (required)
     * @param allocatorId The allocator identifier. (required)
     * @param key The metadata item key. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return List&lt;MetadataItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MetadataItem> setAllocatorMetadataItem(MetadataItemValue body, String allocatorId, String key, Integer version) throws ApiException {
        ApiResponse<List<MetadataItem>> resp = setAllocatorMetadataItemWithHttpInfo(body, allocatorId, key, version);
        return resp.getData();
    }

    /**
     * Set allocator metadata item
     * Adds or updates a single item in the allocator metadata.
     * @param body The value of the metadata item to add or update (required)
     * @param allocatorId The allocator identifier. (required)
     * @param key The metadata item key. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;List&lt;MetadataItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MetadataItem>> setAllocatorMetadataItemWithHttpInfo(MetadataItemValue body, String allocatorId, String key, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = setAllocatorMetadataItemValidateBeforeCall(body, allocatorId, key, version, null, null);
        Type localVarReturnType = new TypeToken<List<MetadataItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set allocator metadata item (asynchronously)
     * Adds or updates a single item in the allocator metadata.
     * @param body The value of the metadata item to add or update (required)
     * @param allocatorId The allocator identifier. (required)
     * @param key The metadata item key. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAllocatorMetadataItemAsync(MetadataItemValue body, String allocatorId, String key, Integer version, final ApiCallback<List<MetadataItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAllocatorMetadataItemValidateBeforeCall(body, allocatorId, key, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MetadataItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAllocatorSettings
     * @param body The allocator settings to apply (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAllocatorSettingsCall(AllocatorSettings body, String allocatorId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/settings"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAllocatorSettingsValidateBeforeCall(AllocatorSettings body, String allocatorId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setAllocatorSettings(Async)");
        }
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling setAllocatorSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = setAllocatorSettingsCall(body, allocatorId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set allocator settings
     * Overwrites the allocator settings with the specified settings. WARNING: Any unspecified fields are deleted.
     * @param body The allocator settings to apply (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return AllocatorSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocatorSettings setAllocatorSettings(AllocatorSettings body, String allocatorId, Integer version) throws ApiException {
        ApiResponse<AllocatorSettings> resp = setAllocatorSettingsWithHttpInfo(body, allocatorId, version);
        return resp.getData();
    }

    /**
     * Set allocator settings
     * Overwrites the allocator settings with the specified settings. WARNING: Any unspecified fields are deleted.
     * @param body The allocator settings to apply (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;AllocatorSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocatorSettings> setAllocatorSettingsWithHttpInfo(AllocatorSettings body, String allocatorId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = setAllocatorSettingsValidateBeforeCall(body, allocatorId, version, null, null);
        Type localVarReturnType = new TypeToken<AllocatorSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set allocator settings (asynchronously)
     * Overwrites the allocator settings with the specified settings. WARNING: Any unspecified fields are deleted.
     * @param body The allocator settings to apply (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAllocatorSettingsAsync(AllocatorSettings body, String allocatorId, Integer version, final ApiCallback<AllocatorSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAllocatorSettingsValidateBeforeCall(body, allocatorId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocatorSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBlueprinterBlessings
     * @param body The blessings to set. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBlueprinterBlessingsCall(Blessings body, String blueprinterRoleId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}/blessings"
            .replaceAll("\\{" + "blueprinter_role_id" + "\\}", apiClient.escapeString(blueprinterRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBlueprinterBlessingsValidateBeforeCall(Blessings body, String blueprinterRoleId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setBlueprinterBlessings(Async)");
        }
        // verify the required parameter 'blueprinterRoleId' is set
        if (blueprinterRoleId == null) {
            throw new ApiException("Missing the required parameter 'blueprinterRoleId' when calling setBlueprinterBlessings(Async)");
        }
        
        com.squareup.okhttp.Call call = setBlueprinterBlessingsCall(body, blueprinterRoleId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set blessings
     * Set blessings for a role.
     * @param body The blessings to set. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return RoleAggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoleAggregate setBlueprinterBlessings(Blessings body, String blueprinterRoleId, Integer version) throws ApiException {
        ApiResponse<RoleAggregate> resp = setBlueprinterBlessingsWithHttpInfo(body, blueprinterRoleId, version);
        return resp.getData();
    }

    /**
     * Set blessings
     * Set blessings for a role.
     * @param body The blessings to set. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;RoleAggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoleAggregate> setBlueprinterBlessingsWithHttpInfo(Blessings body, String blueprinterRoleId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = setBlueprinterBlessingsValidateBeforeCall(body, blueprinterRoleId, version, null, null);
        Type localVarReturnType = new TypeToken<RoleAggregate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set blessings (asynchronously)
     * Set blessings for a role.
     * @param body The blessings to set. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBlueprinterBlessingsAsync(Blessings body, String blueprinterRoleId, Integer version, final ApiCallback<RoleAggregate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBlueprinterBlessingsValidateBeforeCall(body, blueprinterRoleId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoleAggregate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setLicense
     * @param body The license to add or update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setLicenseCall(LicenseObject body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setLicenseValidateBeforeCall(LicenseObject body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setLicense(Async)");
        }
        
        com.squareup.okhttp.Call call = setLicenseCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add or update license
     * Adds a new or updates an existing license.
     * @param body The license to add or update. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse setLicense(LicenseObject body) throws ApiException {
        ApiResponse<EmptyResponse> resp = setLicenseWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add or update license
     * Adds a new or updates an existing license.
     * @param body The license to add or update. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> setLicenseWithHttpInfo(LicenseObject body) throws ApiException {
        com.squareup.okhttp.Call call = setLicenseValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add or update license (asynchronously)
     * Adds a new or updates an existing license.
     * @param body The license to add or update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setLicenseAsync(LicenseObject body, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setLicenseValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setProxiesSettings
     * @param body The proxy settings to apply (required)
     * @param version If specified, checks for conflicts against the version of the settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setProxiesSettingsCall(ProxiesSettings body, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setProxiesSettingsValidateBeforeCall(ProxiesSettings body, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setProxiesSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = setProxiesSettingsCall(body, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set proxy settings
     * Overwrites the proxy settings. All unspecified fields are deleted.
     * @param body The proxy settings to apply (required)
     * @param version If specified, checks for conflicts against the version of the settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ProxiesSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProxiesSettings setProxiesSettings(ProxiesSettings body, Integer version) throws ApiException {
        ApiResponse<ProxiesSettings> resp = setProxiesSettingsWithHttpInfo(body, version);
        return resp.getData();
    }

    /**
     * Set proxy settings
     * Overwrites the proxy settings. All unspecified fields are deleted.
     * @param body The proxy settings to apply (required)
     * @param version If specified, checks for conflicts against the version of the settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;ProxiesSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProxiesSettings> setProxiesSettingsWithHttpInfo(ProxiesSettings body, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = setProxiesSettingsValidateBeforeCall(body, version, null, null);
        Type localVarReturnType = new TypeToken<ProxiesSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set proxy settings (asynchronously)
     * Overwrites the proxy settings. All unspecified fields are deleted.
     * @param body The proxy settings to apply (required)
     * @param version If specified, checks for conflicts against the version of the settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setProxiesSettingsAsync(ProxiesSettings body, Integer version, final ApiCallback<ProxiesSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setProxiesSettingsValidateBeforeCall(body, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProxiesSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setRunnerRoles
     * @param body The roles for the runner that you want to apply. (required)
     * @param runnerId The identifier for the runner (required)
     * @param bless Assigns the runner to the roles. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setRunnerRolesCall(RunnerRolesInfo body, String runnerId, Boolean bless, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/runners/{runner_id}/roles"
            .replaceAll("\\{" + "runner_id" + "\\}", apiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bless != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bless", bless));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setRunnerRolesValidateBeforeCall(RunnerRolesInfo body, String runnerId, Boolean bless, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setRunnerRoles(Async)");
        }
        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling setRunnerRoles(Async)");
        }
        
        com.squareup.okhttp.Call call = setRunnerRolesCall(body, runnerId, bless, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set runner roles
     * Set runner roles.
     * @param body The roles for the runner that you want to apply. (required)
     * @param runnerId The identifier for the runner (required)
     * @param bless Assigns the runner to the roles. (optional)
     * @return RunnerRolesInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RunnerRolesInfo setRunnerRoles(RunnerRolesInfo body, String runnerId, Boolean bless) throws ApiException {
        ApiResponse<RunnerRolesInfo> resp = setRunnerRolesWithHttpInfo(body, runnerId, bless);
        return resp.getData();
    }

    /**
     * Set runner roles
     * Set runner roles.
     * @param body The roles for the runner that you want to apply. (required)
     * @param runnerId The identifier for the runner (required)
     * @param bless Assigns the runner to the roles. (optional)
     * @return ApiResponse&lt;RunnerRolesInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RunnerRolesInfo> setRunnerRolesWithHttpInfo(RunnerRolesInfo body, String runnerId, Boolean bless) throws ApiException {
        com.squareup.okhttp.Call call = setRunnerRolesValidateBeforeCall(body, runnerId, bless, null, null);
        Type localVarReturnType = new TypeToken<RunnerRolesInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set runner roles (asynchronously)
     * Set runner roles.
     * @param body The roles for the runner that you want to apply. (required)
     * @param runnerId The identifier for the runner (required)
     * @param bless Assigns the runner to the roles. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setRunnerRolesAsync(RunnerRolesInfo body, String runnerId, Boolean bless, final ApiCallback<RunnerRolesInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setRunnerRolesValidateBeforeCall(body, runnerId, bless, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RunnerRolesInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startAllocatorMaintenanceMode
     * @param allocatorId The allocator identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startAllocatorMaintenanceModeCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_start"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startAllocatorMaintenanceModeValidateBeforeCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling startAllocatorMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = startAllocatorMaintenanceModeCall(allocatorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start maintenance mode
     * Starts maintenance mode on the allocator.
     * @param allocatorId The allocator identifier. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse startAllocatorMaintenanceMode(String allocatorId) throws ApiException {
        ApiResponse<EmptyResponse> resp = startAllocatorMaintenanceModeWithHttpInfo(allocatorId);
        return resp.getData();
    }

    /**
     * Start maintenance mode
     * Starts maintenance mode on the allocator.
     * @param allocatorId The allocator identifier. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> startAllocatorMaintenanceModeWithHttpInfo(String allocatorId) throws ApiException {
        com.squareup.okhttp.Call call = startAllocatorMaintenanceModeValidateBeforeCall(allocatorId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start maintenance mode (asynchronously)
     * Starts maintenance mode on the allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startAllocatorMaintenanceModeAsync(String allocatorId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startAllocatorMaintenanceModeValidateBeforeCall(allocatorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startConstructorMaintenanceMode
     * @param constructorId Identifier for the constructor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startConstructorMaintenanceModeCall(String constructorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/constructors/{constructor_id}/maintenance-mode/_start"
            .replaceAll("\\{" + "constructor_id" + "\\}", apiClient.escapeString(constructorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startConstructorMaintenanceModeValidateBeforeCall(String constructorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'constructorId' is set
        if (constructorId == null) {
            throw new ApiException("Missing the required parameter 'constructorId' when calling startConstructorMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = startConstructorMaintenanceModeCall(constructorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start maintenance mode
     * Start maintenance mode of a constructor. It will stop constructing new plans while continuing with on-going ones.
     * @param constructorId Identifier for the constructor (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse startConstructorMaintenanceMode(String constructorId) throws ApiException {
        ApiResponse<EmptyResponse> resp = startConstructorMaintenanceModeWithHttpInfo(constructorId);
        return resp.getData();
    }

    /**
     * Start maintenance mode
     * Start maintenance mode of a constructor. It will stop constructing new plans while continuing with on-going ones.
     * @param constructorId Identifier for the constructor (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> startConstructorMaintenanceModeWithHttpInfo(String constructorId) throws ApiException {
        com.squareup.okhttp.Call call = startConstructorMaintenanceModeValidateBeforeCall(constructorId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start maintenance mode (asynchronously)
     * Start maintenance mode of a constructor. It will stop constructing new plans while continuing with on-going ones.
     * @param constructorId Identifier for the constructor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startConstructorMaintenanceModeAsync(String constructorId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startConstructorMaintenanceModeValidateBeforeCall(constructorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopAllocatorMaintenanceMode
     * @param allocatorId The allocator identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopAllocatorMaintenanceModeCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_stop"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopAllocatorMaintenanceModeValidateBeforeCall(String allocatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling stopAllocatorMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = stopAllocatorMaintenanceModeCall(allocatorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop maintenance mode
     * Stops maintenance mode on the allocator.
     * @param allocatorId The allocator identifier. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse stopAllocatorMaintenanceMode(String allocatorId) throws ApiException {
        ApiResponse<EmptyResponse> resp = stopAllocatorMaintenanceModeWithHttpInfo(allocatorId);
        return resp.getData();
    }

    /**
     * Stop maintenance mode
     * Stops maintenance mode on the allocator.
     * @param allocatorId The allocator identifier. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> stopAllocatorMaintenanceModeWithHttpInfo(String allocatorId) throws ApiException {
        com.squareup.okhttp.Call call = stopAllocatorMaintenanceModeValidateBeforeCall(allocatorId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop maintenance mode (asynchronously)
     * Stops maintenance mode on the allocator.
     * @param allocatorId The allocator identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopAllocatorMaintenanceModeAsync(String allocatorId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopAllocatorMaintenanceModeValidateBeforeCall(allocatorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopConstructorMaintenanceMode
     * @param constructorId Identifier for the constructor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopConstructorMaintenanceModeCall(String constructorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/constructors/{constructor_id}/maintenance-mode/_stop"
            .replaceAll("\\{" + "constructor_id" + "\\}", apiClient.escapeString(constructorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopConstructorMaintenanceModeValidateBeforeCall(String constructorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'constructorId' is set
        if (constructorId == null) {
            throw new ApiException("Missing the required parameter 'constructorId' when calling stopConstructorMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = stopConstructorMaintenanceModeCall(constructorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop maintenance mode
     * Stop maintenance mode of a constructor. It will resume the construction of submitted plans.
     * @param constructorId Identifier for the constructor (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse stopConstructorMaintenanceMode(String constructorId) throws ApiException {
        ApiResponse<EmptyResponse> resp = stopConstructorMaintenanceModeWithHttpInfo(constructorId);
        return resp.getData();
    }

    /**
     * Stop maintenance mode
     * Stop maintenance mode of a constructor. It will resume the construction of submitted plans.
     * @param constructorId Identifier for the constructor (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> stopConstructorMaintenanceModeWithHttpInfo(String constructorId) throws ApiException {
        com.squareup.okhttp.Call call = stopConstructorMaintenanceModeValidateBeforeCall(constructorId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop maintenance mode (asynchronously)
     * Stop maintenance mode of a constructor. It will resume the construction of submitted plans.
     * @param constructorId Identifier for the constructor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopConstructorMaintenanceModeAsync(String constructorId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopConstructorMaintenanceModeValidateBeforeCall(constructorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAllocatorSettings
     * @param body The allocator settings to update (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAllocatorSettingsCall(String body, String allocatorId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/allocators/{allocator_id}/settings"
            .replaceAll("\\{" + "allocator_id" + "\\}", apiClient.escapeString(allocatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAllocatorSettingsValidateBeforeCall(String body, String allocatorId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAllocatorSettings(Async)");
        }
        // verify the required parameter 'allocatorId' is set
        if (allocatorId == null) {
            throw new ApiException("Missing the required parameter 'allocatorId' when calling updateAllocatorSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = updateAllocatorSettingsCall(body, allocatorId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update allocator settings
     * Applies the settings as a patch. Only the fields that are referenced in the update are altered.
     * @param body The allocator settings to update (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return AllocatorSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocatorSettings updateAllocatorSettings(String body, String allocatorId, Integer version) throws ApiException {
        ApiResponse<AllocatorSettings> resp = updateAllocatorSettingsWithHttpInfo(body, allocatorId, version);
        return resp.getData();
    }

    /**
     * Update allocator settings
     * Applies the settings as a patch. Only the fields that are referenced in the update are altered.
     * @param body The allocator settings to update (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;AllocatorSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocatorSettings> updateAllocatorSettingsWithHttpInfo(String body, String allocatorId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateAllocatorSettingsValidateBeforeCall(body, allocatorId, version, null, null);
        Type localVarReturnType = new TypeToken<AllocatorSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update allocator settings (asynchronously)
     * Applies the settings as a patch. Only the fields that are referenced in the update are altered.
     * @param body The allocator settings to update (required)
     * @param allocatorId The allocator identifier. (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAllocatorSettingsAsync(String body, String allocatorId, Integer version, final ApiCallback<AllocatorSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAllocatorSettingsValidateBeforeCall(body, allocatorId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocatorSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBlueprinterRole
     * @param body The role update data. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBlueprinterRoleCall(Role body, String blueprinterRoleId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}"
            .replaceAll("\\{" + "blueprinter_role_id" + "\\}", apiClient.escapeString(blueprinterRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBlueprinterRoleValidateBeforeCall(Role body, String blueprinterRoleId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBlueprinterRole(Async)");
        }
        // verify the required parameter 'blueprinterRoleId' is set
        if (blueprinterRoleId == null) {
            throw new ApiException("Missing the required parameter 'blueprinterRoleId' when calling updateBlueprinterRole(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBlueprinterRoleCall(body, blueprinterRoleId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update role
     * Update a role.
     * @param body The role update data. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return RoleAggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoleAggregate updateBlueprinterRole(Role body, String blueprinterRoleId, Integer version) throws ApiException {
        ApiResponse<RoleAggregate> resp = updateBlueprinterRoleWithHttpInfo(body, blueprinterRoleId, version);
        return resp.getData();
    }

    /**
     * Update role
     * Update a role.
     * @param body The role update data. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;RoleAggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoleAggregate> updateBlueprinterRoleWithHttpInfo(Role body, String blueprinterRoleId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateBlueprinterRoleValidateBeforeCall(body, blueprinterRoleId, version, null, null);
        Type localVarReturnType = new TypeToken<RoleAggregate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update role (asynchronously)
     * Update a role.
     * @param body The role update data. (required)
     * @param blueprinterRoleId User-specified Blueprinter role ID. (required)
     * @param version When specified, checks for conflicts against the version stored in the persistent store (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBlueprinterRoleAsync(Role body, String blueprinterRoleId, Integer version, final ApiCallback<RoleAggregate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBlueprinterRoleValidateBeforeCall(body, blueprinterRoleId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoleAggregate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateProxiesFilteredGroup
     * @param body Data for the filtered group of proxies to update (required)
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProxiesFilteredGroupCall(ProxiesFilteredGroup body, String proxiesFilteredGroupId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}"
            .replaceAll("\\{" + "proxies_filtered_group_id" + "\\}", apiClient.escapeString(proxiesFilteredGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProxiesFilteredGroupValidateBeforeCall(ProxiesFilteredGroup body, String proxiesFilteredGroupId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProxiesFilteredGroup(Async)");
        }
        // verify the required parameter 'proxiesFilteredGroupId' is set
        if (proxiesFilteredGroupId == null) {
            throw new ApiException("Missing the required parameter 'proxiesFilteredGroupId' when calling updateProxiesFilteredGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateProxiesFilteredGroupCall(body, proxiesFilteredGroupId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update filtered group of proxies
     * Update the settings for a filtered group of proxies.
     * @param body Data for the filtered group of proxies to update (required)
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ProxiesFilteredGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProxiesFilteredGroup updateProxiesFilteredGroup(ProxiesFilteredGroup body, String proxiesFilteredGroupId, Integer version) throws ApiException {
        ApiResponse<ProxiesFilteredGroup> resp = updateProxiesFilteredGroupWithHttpInfo(body, proxiesFilteredGroupId, version);
        return resp.getData();
    }

    /**
     * Update filtered group of proxies
     * Update the settings for a filtered group of proxies.
     * @param body Data for the filtered group of proxies to update (required)
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;ProxiesFilteredGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProxiesFilteredGroup> updateProxiesFilteredGroupWithHttpInfo(ProxiesFilteredGroup body, String proxiesFilteredGroupId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateProxiesFilteredGroupValidateBeforeCall(body, proxiesFilteredGroupId, version, null, null);
        Type localVarReturnType = new TypeToken<ProxiesFilteredGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update filtered group of proxies (asynchronously)
     * Update the settings for a filtered group of proxies.
     * @param body Data for the filtered group of proxies to update (required)
     * @param proxiesFilteredGroupId \&quot;The identifier for the filtered group of proxies (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProxiesFilteredGroupAsync(ProxiesFilteredGroup body, String proxiesFilteredGroupId, Integer version, final ApiCallback<ProxiesFilteredGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProxiesFilteredGroupValidateBeforeCall(body, proxiesFilteredGroupId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProxiesFilteredGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateProxiesSettings
     * @param body A JSON to merge with the existing settings (required)
     * @param version If specified, checks for conflicts against the version of the repository configuration (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProxiesSettingsCall(String body, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/platform/infrastructure/proxies/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProxiesSettingsValidateBeforeCall(String body, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProxiesSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = updateProxiesSettingsCall(body, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update proxy settings
     * Applies the settings as a patch. Only the fields that are referenced in the update are changed.
     * @param body A JSON to merge with the existing settings (required)
     * @param version If specified, checks for conflicts against the version of the repository configuration (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ProxiesSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProxiesSettings updateProxiesSettings(String body, Integer version) throws ApiException {
        ApiResponse<ProxiesSettings> resp = updateProxiesSettingsWithHttpInfo(body, version);
        return resp.getData();
    }

    /**
     * Update proxy settings
     * Applies the settings as a patch. Only the fields that are referenced in the update are changed.
     * @param body A JSON to merge with the existing settings (required)
     * @param version If specified, checks for conflicts against the version of the repository configuration (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;ProxiesSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProxiesSettings> updateProxiesSettingsWithHttpInfo(String body, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateProxiesSettingsValidateBeforeCall(body, version, null, null);
        Type localVarReturnType = new TypeToken<ProxiesSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update proxy settings (asynchronously)
     * Applies the settings as a patch. Only the fields that are referenced in the update are changed.
     * @param body A JSON to merge with the existing settings (required)
     * @param version If specified, checks for conflicts against the version of the repository configuration (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProxiesSettingsAsync(String body, Integer version, final ApiCallback<ProxiesSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProxiesSettingsValidateBeforeCall(body, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProxiesSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
