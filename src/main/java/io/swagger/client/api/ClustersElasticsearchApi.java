/*
 * Elastic Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BasicFailedReply;
import io.swagger.client.model.ClusterCommandResponse;
import io.swagger.client.model.ClusterCrudResponse;
import io.swagger.client.model.ClusterCurationSettings;
import io.swagger.client.model.ClusterMetadataSettings;
import io.swagger.client.model.ClusterPlanMigrationResponse;
import io.swagger.client.model.ClusterSnapshotRequest;
import io.swagger.client.model.ClusterSnapshotResponse;
import io.swagger.client.model.ClusterSnapshotSettings;
import io.swagger.client.model.CreateElasticsearchClusterRequest;
import io.swagger.client.model.CrossClusterSearchClusters;
import io.swagger.client.model.CrossClusterSearchSettings;
import io.swagger.client.model.ElasticsearchClusterInfo;
import io.swagger.client.model.ElasticsearchClusterInstanceSettingsOverrides;
import io.swagger.client.model.ElasticsearchClusterPlan;
import io.swagger.client.model.ElasticsearchClusterPlansInfo;
import io.swagger.client.model.ElasticsearchClustersInfo;
import io.swagger.client.model.EmptyResponse;
import io.swagger.client.model.KeystoreContents;
import io.swagger.client.model.LegacySecuritySettings;
import io.swagger.client.model.ModelVersionIndexSynchronizationResults;
import io.swagger.client.model.SearchRequest;
import io.swagger.client.model.TransientElasticsearchPlanConfiguration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClustersElasticsearchApi {
    private ApiClient apiClient;

    public ClustersElasticsearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClustersElasticsearchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelEsClusterMonitoring
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelEsClusterMonitoringCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/monitoring"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelEsClusterMonitoringValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling cancelEsClusterMonitoring(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelEsClusterMonitoringCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel monitoring
     * Deletes all monitoring destinations for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse cancelEsClusterMonitoring(String clusterId) throws ApiException {
        ApiResponse<EmptyResponse> resp = cancelEsClusterMonitoringWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Cancel monitoring
     * Deletes all monitoring destinations for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> cancelEsClusterMonitoringWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = cancelEsClusterMonitoringValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel monitoring (asynchronously)
     * Deletes all monitoring destinations for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelEsClusterMonitoringAsync(String clusterId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelEsClusterMonitoringValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelEsClusterPendingPlan
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete \&quot;When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelEsClusterPendingPlanCall(String clusterId, Boolean ignoreMissing, Boolean forceDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/plan/pending"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));
        if (forceDelete != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_delete", forceDelete));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelEsClusterPendingPlanValidateBeforeCall(String clusterId, Boolean ignoreMissing, Boolean forceDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling cancelEsClusterPendingPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelEsClusterPendingPlanCall(clusterId, ignoreMissing, forceDelete, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel pending plan
     * Cancels the pending plan of the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete \&quot;When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse cancelEsClusterPendingPlan(String clusterId, Boolean ignoreMissing, Boolean forceDelete) throws ApiException {
        ApiResponse<EmptyResponse> resp = cancelEsClusterPendingPlanWithHttpInfo(clusterId, ignoreMissing, forceDelete);
        return resp.getData();
    }

    /**
     * Cancel pending plan
     * Cancels the pending plan of the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete \&quot;When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> cancelEsClusterPendingPlanWithHttpInfo(String clusterId, Boolean ignoreMissing, Boolean forceDelete) throws ApiException {
        com.squareup.okhttp.Call call = cancelEsClusterPendingPlanValidateBeforeCall(clusterId, ignoreMissing, forceDelete, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel pending plan (asynchronously)
     * Cancels the pending plan of the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param ignoreMissing When &#x60;true&#x60;, returns successfully, even when plans are pending. The default is &#x60;false&#x60;. (optional)
     * @param forceDelete \&quot;When &#x60;true&#x60;, deletes the pending plan instead of attempting a graceful cancellation. The default is &#x60;false&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelEsClusterPendingPlanAsync(String clusterId, Boolean ignoreMissing, Boolean forceDelete, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelEsClusterPendingPlanValidateBeforeCall(clusterId, ignoreMissing, forceDelete, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEsCluster
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @param requestId (Optional) The idempotency token. When two create requests share the same &#x60;request_id&#x60; (minimum size of 32 characters, maximum size of 128 characters), only one cluster is created. The second request returns the information for that cluster, but the password field is blank. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEsClusterCall(CreateElasticsearchClusterRequest body, Boolean validateOnly, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("request_id", requestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEsClusterValidateBeforeCall(CreateElasticsearchClusterRequest body, Boolean validateOnly, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createEsCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = createEsClusterCall(body, validateOnly, requestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create cluster
     * Creates an Elasticsearch cluster.
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @param requestId (Optional) The idempotency token. When two create requests share the same &#x60;request_id&#x60; (minimum size of 32 characters, maximum size of 128 characters), only one cluster is created. The second request returns the information for that cluster, but the password field is blank. (optional)
     * @return ClusterCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCrudResponse createEsCluster(CreateElasticsearchClusterRequest body, Boolean validateOnly, String requestId) throws ApiException {
        ApiResponse<ClusterCrudResponse> resp = createEsClusterWithHttpInfo(body, validateOnly, requestId);
        return resp.getData();
    }

    /**
     * Create cluster
     * Creates an Elasticsearch cluster.
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @param requestId (Optional) The idempotency token. When two create requests share the same &#x60;request_id&#x60; (minimum size of 32 characters, maximum size of 128 characters), only one cluster is created. The second request returns the information for that cluster, but the password field is blank. (optional)
     * @return ApiResponse&lt;ClusterCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCrudResponse> createEsClusterWithHttpInfo(CreateElasticsearchClusterRequest body, Boolean validateOnly, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = createEsClusterValidateBeforeCall(body, validateOnly, requestId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create cluster (asynchronously)
     * Creates an Elasticsearch cluster.
     * @param body The cluster definition (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without creating the cluster. (optional)
     * @param requestId (Optional) The idempotency token. When two create requests share the same &#x60;request_id&#x60; (minimum size of 32 characters, maximum size of 128 characters), only one cluster is created. The second request returns the information for that cluster, but the password field is blank. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEsClusterAsync(CreateElasticsearchClusterRequest body, Boolean validateOnly, String requestId, final ApiCallback<ClusterCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEsClusterValidateBeforeCall(body, validateOnly, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEsCluster
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEsClusterCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEsClusterValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling deleteEsCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteEsClusterCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete cluster
     * Deletes the Elasticsearch cluster. Before you delete the Elasticsearch cluster, you must first successfully issue a &#x60;_shutdown&#x60; command.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse deleteEsCluster(String clusterId) throws ApiException {
        ApiResponse<EmptyResponse> resp = deleteEsClusterWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Delete cluster
     * Deletes the Elasticsearch cluster. Before you delete the Elasticsearch cluster, you must first successfully issue a &#x60;_shutdown&#x60; command.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> deleteEsClusterWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = deleteEsClusterValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete cluster (asynchronously)
     * Deletes the Elasticsearch cluster. Before you delete the Elasticsearch cluster, you must first successfully issue a &#x60;_shutdown&#x60; command.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEsClusterAsync(String clusterId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEsClusterValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEsProxyRequests
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEsProxyRequestsCall(String clusterId, String xManagementRequest, String elasticsearchPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "elasticsearch_path" + "\\}", apiClient.escapeString(elasticsearchPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xManagementRequest != null)
        localVarHeaderParams.put("X-Management-Request", apiClient.parameterToString(xManagementRequest));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEsProxyRequestsValidateBeforeCall(String clusterId, String xManagementRequest, String elasticsearchPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling deleteEsProxyRequests(Async)");
        }
        // verify the required parameter 'xManagementRequest' is set
        if (xManagementRequest == null) {
            throw new ApiException("Missing the required parameter 'xManagementRequest' when calling deleteEsProxyRequests(Async)");
        }
        // verify the required parameter 'elasticsearchPath' is set
        if (elasticsearchPath == null) {
            throw new ApiException("Missing the required parameter 'elasticsearchPath' when calling deleteEsProxyRequests(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteEsProxyRequestsCall(clusterId, xManagementRequest, elasticsearchPath, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Proxies HTTP DELETE request to the cluster
     * Proxies HTTP DELETE request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEsProxyRequests(String clusterId, String xManagementRequest, String elasticsearchPath) throws ApiException {
        deleteEsProxyRequestsWithHttpInfo(clusterId, xManagementRequest, elasticsearchPath);
    }

    /**
     * Proxies HTTP DELETE request to the cluster
     * Proxies HTTP DELETE request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEsProxyRequestsWithHttpInfo(String clusterId, String xManagementRequest, String elasticsearchPath) throws ApiException {
        com.squareup.okhttp.Call call = deleteEsProxyRequestsValidateBeforeCall(clusterId, xManagementRequest, elasticsearchPath, null, null);
        return apiClient.execute(call);
    }

    /**
     * Proxies HTTP DELETE request to the cluster (asynchronously)
     * Proxies HTTP DELETE request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEsProxyRequestsAsync(String clusterId, String xManagementRequest, String elasticsearchPath, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEsProxyRequestsValidateBeforeCall(clusterId, xManagementRequest, elasticsearchPath, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for generateEsClusterDiagnostics
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateEsClusterDiagnosticsCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/support/_generate-diagnostics"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateEsClusterDiagnosticsValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling generateEsClusterDiagnostics(Async)");
        }
        
        com.squareup.okhttp.Call call = generateEsClusterDiagnosticsCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generate diagnostics
     * Retrieves a support diagnostic bundle from an active Elasticsearch cluster. To successfully retrieve a support diagnostic bundle, the cluster must be responsive.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String generateEsClusterDiagnostics(String clusterId) throws ApiException {
        ApiResponse<String> resp = generateEsClusterDiagnosticsWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Generate diagnostics
     * Retrieves a support diagnostic bundle from an active Elasticsearch cluster. To successfully retrieve a support diagnostic bundle, the cluster must be responsive.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> generateEsClusterDiagnosticsWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = generateEsClusterDiagnosticsValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate diagnostics (asynchronously)
     * Retrieves a support diagnostic bundle from an active Elasticsearch cluster. To successfully retrieve a support diagnostic bundle, the cluster must be responsive.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateEsClusterDiagnosticsAsync(String clusterId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateEsClusterDiagnosticsValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generateEsClusterLogs
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param date The log retrieval start date in standard format. For example, &#x60;YYYY-MM-DD [THH [:mm] ]&#x60;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateEsClusterLogsCall(String clusterId, String date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/support/_generate-logs"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateEsClusterLogsValidateBeforeCall(String clusterId, String date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling generateEsClusterLogs(Async)");
        }
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling generateEsClusterLogs(Async)");
        }
        
        com.squareup.okhttp.Call call = generateEsClusterLogsCall(clusterId, date, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generate logs
     * Retrieves the log file for the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param date The log retrieval start date in standard format. For example, &#x60;YYYY-MM-DD [THH [:mm] ]&#x60;. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String generateEsClusterLogs(String clusterId, String date) throws ApiException {
        ApiResponse<String> resp = generateEsClusterLogsWithHttpInfo(clusterId, date);
        return resp.getData();
    }

    /**
     * Generate logs
     * Retrieves the log file for the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param date The log retrieval start date in standard format. For example, &#x60;YYYY-MM-DD [THH [:mm] ]&#x60;. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> generateEsClusterLogsWithHttpInfo(String clusterId, String date) throws ApiException {
        com.squareup.okhttp.Call call = generateEsClusterLogsValidateBeforeCall(clusterId, date, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate logs (asynchronously)
     * Retrieves the log file for the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param date The log retrieval start date in standard format. For example, &#x60;YYYY-MM-DD [THH [:mm] ]&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateEsClusterLogsAsync(String clusterId, String date, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateEsClusterLogsValidateBeforeCall(clusterId, date, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsCcsEligibleRemotes
     * @param version The version of the cross-cluster search cluster that will link with the remote candidates. (required)
     * @param q (Optional) Cluster name or id prefix to filters the candidates. (optional)
     * @param ownerId (Optional) Returns only clusters filtered by the provided owner id. (optional)
     * @param size (Optional) Maximum number of clusters to include in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsCcsEligibleRemotesCall(String version, String q, String ownerId, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/ccs/eligible_remotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (ownerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("owner_id", ownerId));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsCcsEligibleRemotesValidateBeforeCall(String version, String q, String ownerId, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getEsCcsEligibleRemotes(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsCcsEligibleRemotesCall(version, q, ownerId, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search clusters that can be used as cross-cluster search remotes
     * Retrieves the information for all of the Elasticsearch clusters that can selected as remotes in a given version.
     * @param version The version of the cross-cluster search cluster that will link with the remote candidates. (required)
     * @param q (Optional) Cluster name or id prefix to filters the candidates. (optional)
     * @param ownerId (Optional) Returns only clusters filtered by the provided owner id. (optional)
     * @param size (Optional) Maximum number of clusters to include in the response. (optional)
     * @return ElasticsearchClustersInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElasticsearchClustersInfo getEsCcsEligibleRemotes(String version, String q, String ownerId, Integer size) throws ApiException {
        ApiResponse<ElasticsearchClustersInfo> resp = getEsCcsEligibleRemotesWithHttpInfo(version, q, ownerId, size);
        return resp.getData();
    }

    /**
     * Search clusters that can be used as cross-cluster search remotes
     * Retrieves the information for all of the Elasticsearch clusters that can selected as remotes in a given version.
     * @param version The version of the cross-cluster search cluster that will link with the remote candidates. (required)
     * @param q (Optional) Cluster name or id prefix to filters the candidates. (optional)
     * @param ownerId (Optional) Returns only clusters filtered by the provided owner id. (optional)
     * @param size (Optional) Maximum number of clusters to include in the response. (optional)
     * @return ApiResponse&lt;ElasticsearchClustersInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElasticsearchClustersInfo> getEsCcsEligibleRemotesWithHttpInfo(String version, String q, String ownerId, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getEsCcsEligibleRemotesValidateBeforeCall(version, q, ownerId, size, null, null);
        Type localVarReturnType = new TypeToken<ElasticsearchClustersInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search clusters that can be used as cross-cluster search remotes (asynchronously)
     * Retrieves the information for all of the Elasticsearch clusters that can selected as remotes in a given version.
     * @param version The version of the cross-cluster search cluster that will link with the remote candidates. (required)
     * @param q (Optional) Cluster name or id prefix to filters the candidates. (optional)
     * @param ownerId (Optional) Returns only clusters filtered by the provided owner id. (optional)
     * @param size (Optional) Maximum number of clusters to include in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsCcsEligibleRemotesAsync(String version, String q, String ownerId, Integer size, final ApiCallback<ElasticsearchClustersInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsCcsEligibleRemotesValidateBeforeCall(version, q, ownerId, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElasticsearchClustersInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsCluster
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showSecurity Includes the Elasticsearch 2.x security information in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param showSystemAlerts The number of system alerts to include in the response. For example, the number of forced restarts caused from a limited amount of memory. Only numbers greater than zero return a field. NOTE: Responses can include a large number of system alerts. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterCall(String clusterId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showSecurity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_security", showSecurity));
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));
        if (showSystemAlerts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_system_alerts", showSystemAlerts));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));
        if (enrichWithTemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enrich_with_template", enrichWithTemplate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterValidateBeforeCall(String clusterId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterCall(clusterId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster
     * Retrieves the Elasticsearch cluster information.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showSecurity Includes the Elasticsearch 2.x security information in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param showSystemAlerts The number of system alerts to include in the response. For example, the number of forced restarts caused from a limited amount of memory. Only numbers greater than zero return a field. NOTE: Responses can include a large number of system alerts. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @return ElasticsearchClusterInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElasticsearchClusterInfo getEsCluster(String clusterId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate) throws ApiException {
        ApiResponse<ElasticsearchClusterInfo> resp = getEsClusterWithHttpInfo(clusterId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate);
        return resp.getData();
    }

    /**
     * Get cluster
     * Retrieves the Elasticsearch cluster information.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showSecurity Includes the Elasticsearch 2.x security information in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param showSystemAlerts The number of system alerts to include in the response. For example, the number of forced restarts caused from a limited amount of memory. Only numbers greater than zero return a field. NOTE: Responses can include a large number of system alerts. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @return ApiResponse&lt;ElasticsearchClusterInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElasticsearchClusterInfo> getEsClusterWithHttpInfo(String clusterId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterValidateBeforeCall(clusterId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate, null, null);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster (asynchronously)
     * Retrieves the Elasticsearch cluster information.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showSecurity Includes the Elasticsearch 2.x security information in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param showSystemAlerts The number of system alerts to include in the response. For example, the number of forced restarts caused from a limited amount of memory. Only numbers greater than zero return a field. NOTE: Responses can include a large number of system alerts. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterAsync(String clusterId, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, Integer showSystemAlerts, Boolean showSettings, Boolean enrichWithTemplate, final ApiCallback<ElasticsearchClusterInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterValidateBeforeCall(clusterId, showSecurity, showMetadata, showPlans, showPlanLogs, showPlanDefaults, convertLegacyPlans, showSystemAlerts, showSettings, enrichWithTemplate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusterCcs
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterCcsCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/ccs"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterCcsValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsClusterCcs(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterCcsCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cross-cluster search clusters
     * Returns the list of cross-cluster search clusters&#x27; IDs for the remote cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return CrossClusterSearchClusters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrossClusterSearchClusters getEsClusterCcs(String clusterId) throws ApiException {
        ApiResponse<CrossClusterSearchClusters> resp = getEsClusterCcsWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get cross-cluster search clusters
     * Returns the list of cross-cluster search clusters&#x27; IDs for the remote cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return ApiResponse&lt;CrossClusterSearchClusters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrossClusterSearchClusters> getEsClusterCcsWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterCcsValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<CrossClusterSearchClusters>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cross-cluster search clusters (asynchronously)
     * Returns the list of cross-cluster search clusters&#x27; IDs for the remote cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterCcsAsync(String clusterId, final ApiCallback<CrossClusterSearchClusters> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterCcsValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrossClusterSearchClusters>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusterCcsSettings
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterCcsSettingsCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/ccs/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterCcsSettingsValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsClusterCcsSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterCcsSettingsCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get remote clusters for cross-cluster search
     * Returns cross-cluster search configuration for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return CrossClusterSearchSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrossClusterSearchSettings getEsClusterCcsSettings(String clusterId) throws ApiException {
        ApiResponse<CrossClusterSearchSettings> resp = getEsClusterCcsSettingsWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get remote clusters for cross-cluster search
     * Returns cross-cluster search configuration for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return ApiResponse&lt;CrossClusterSearchSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrossClusterSearchSettings> getEsClusterCcsSettingsWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterCcsSettingsValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<CrossClusterSearchSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get remote clusters for cross-cluster search (asynchronously)
     * Returns cross-cluster search configuration for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterCcsSettingsAsync(String clusterId, final ApiCallback<CrossClusterSearchSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterCcsSettingsValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrossClusterSearchSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusterCurationSettings
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterCurationSettingsCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/curation/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterCurationSettingsValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsClusterCurationSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterCurationSettingsCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster curation settings
     * Retrieves cluster curation settings for an Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return ClusterCurationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCurationSettings getEsClusterCurationSettings(String clusterId) throws ApiException {
        ApiResponse<ClusterCurationSettings> resp = getEsClusterCurationSettingsWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get cluster curation settings
     * Retrieves cluster curation settings for an Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return ApiResponse&lt;ClusterCurationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCurationSettings> getEsClusterCurationSettingsWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterCurationSettingsValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCurationSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster curation settings (asynchronously)
     * Retrieves cluster curation settings for an Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterCurationSettingsAsync(String clusterId, final ApiCallback<ClusterCurationSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterCurationSettingsValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCurationSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusterKeystore
     * @param clusterId The Elasticsearch cluster identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterKeystoreCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/keystore"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterKeystoreValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsClusterKeystore(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterKeystoreCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get settings from this cluster&#x27;s keystore
     * Returns the available keys in the keystore.
     * @param clusterId The Elasticsearch cluster identifier (required)
     * @return KeystoreContents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeystoreContents getEsClusterKeystore(String clusterId) throws ApiException {
        ApiResponse<KeystoreContents> resp = getEsClusterKeystoreWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get settings from this cluster&#x27;s keystore
     * Returns the available keys in the keystore.
     * @param clusterId The Elasticsearch cluster identifier (required)
     * @return ApiResponse&lt;KeystoreContents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeystoreContents> getEsClusterKeystoreWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterKeystoreValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<KeystoreContents>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get settings from this cluster&#x27;s keystore (asynchronously)
     * Returns the available keys in the keystore.
     * @param clusterId The Elasticsearch cluster identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterKeystoreAsync(String clusterId, final ApiCallback<KeystoreContents> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterKeystoreValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeystoreContents>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusterMetadataRaw
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterMetadataRawCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/metadata/raw"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterMetadataRawValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsClusterMetadataRaw(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterMetadataRawCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster metadata
     * Advanced use only. Retrieves the internal cluster metadata, in free-form JSON, for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getEsClusterMetadataRaw(String clusterId) throws ApiException {
        ApiResponse<Object> resp = getEsClusterMetadataRawWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get cluster metadata
     * Advanced use only. Retrieves the internal cluster metadata, in free-form JSON, for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getEsClusterMetadataRawWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterMetadataRawValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster metadata (asynchronously)
     * Advanced use only. Retrieves the internal cluster metadata, in free-form JSON, for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterMetadataRawAsync(String clusterId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterMetadataRawValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusterMetadataSettings
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterMetadataSettingsCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/metadata/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterMetadataSettingsValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsClusterMetadataSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterMetadataSettingsCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster metadata settings
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return ClusterMetadataSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterMetadataSettings getEsClusterMetadataSettings(String clusterId) throws ApiException {
        ApiResponse<ClusterMetadataSettings> resp = getEsClusterMetadataSettingsWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get cluster metadata settings
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return ApiResponse&lt;ClusterMetadataSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterMetadataSettings> getEsClusterMetadataSettingsWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterMetadataSettingsValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster metadata settings (asynchronously)
     * Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn&#x27;t returned, then the free-form JSON endpoint (&#x60;/metadata/raw&#x60;) must be used.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterMetadataSettingsAsync(String clusterId, final ApiCallback<ClusterMetadataSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterMetadataSettingsValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusterPendingPlan
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterPendingPlanCall(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/plan/pending"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));
        if (enrichWithTemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enrich_with_template", enrichWithTemplate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterPendingPlanValidateBeforeCall(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsClusterPendingPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterPendingPlanCall(clusterId, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get pending plan
     * Retrieves the pending plan of the cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @return ElasticsearchClusterPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElasticsearchClusterPlan getEsClusterPendingPlan(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate) throws ApiException {
        ApiResponse<ElasticsearchClusterPlan> resp = getEsClusterPendingPlanWithHttpInfo(clusterId, showPlanDefaults, convertLegacyPlans, enrichWithTemplate);
        return resp.getData();
    }

    /**
     * Get pending plan
     * Retrieves the pending plan of the cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @return ApiResponse&lt;ElasticsearchClusterPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElasticsearchClusterPlan> getEsClusterPendingPlanWithHttpInfo(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterPendingPlanValidateBeforeCall(clusterId, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, null, null);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pending plan (asynchronously)
     * Retrieves the pending plan of the cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterPendingPlanAsync(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, final ApiCallback<ElasticsearchClusterPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterPendingPlanValidateBeforeCall(clusterId, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusterPlan
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterPlanCall(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/plan"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));
        if (enrichWithTemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enrich_with_template", enrichWithTemplate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterPlanValidateBeforeCall(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsClusterPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterPlanCall(clusterId, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get plan
     * Retrieves the active plan of the Elasticsearch cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @return ElasticsearchClusterPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElasticsearchClusterPlan getEsClusterPlan(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate) throws ApiException {
        ApiResponse<ElasticsearchClusterPlan> resp = getEsClusterPlanWithHttpInfo(clusterId, showPlanDefaults, convertLegacyPlans, enrichWithTemplate);
        return resp.getData();
    }

    /**
     * Get plan
     * Retrieves the active plan of the Elasticsearch cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @return ApiResponse&lt;ElasticsearchClusterPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElasticsearchClusterPlan> getEsClusterPlanWithHttpInfo(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterPlanValidateBeforeCall(clusterId, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, null, null);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get plan (asynchronously)
     * Retrieves the active plan of the Elasticsearch cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterPlanAsync(String clusterId, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, final ApiCallback<ElasticsearchClusterPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterPlanValidateBeforeCall(clusterId, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusterPlanActivity
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterPlanActivityCall(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/plan/activity"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showPlanLogs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_logs", showPlanLogs));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));
        if (enrichWithTemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enrich_with_template", enrichWithTemplate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterPlanActivityValidateBeforeCall(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsClusterPlanActivity(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterPlanActivityCall(clusterId, showPlanLogs, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get plan activity
     * Retrieves the active and historical plan information for the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @return ElasticsearchClusterPlansInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElasticsearchClusterPlansInfo getEsClusterPlanActivity(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate) throws ApiException {
        ApiResponse<ElasticsearchClusterPlansInfo> resp = getEsClusterPlanActivityWithHttpInfo(clusterId, showPlanLogs, showPlanDefaults, convertLegacyPlans, enrichWithTemplate);
        return resp.getData();
    }

    /**
     * Get plan activity
     * Retrieves the active and historical plan information for the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @return ApiResponse&lt;ElasticsearchClusterPlansInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElasticsearchClusterPlansInfo> getEsClusterPlanActivityWithHttpInfo(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterPlanActivityValidateBeforeCall(clusterId, showPlanLogs, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, null, null);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterPlansInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get plan activity (asynchronously)
     * Retrieves the active and historical plan information for the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterPlanActivityAsync(String clusterId, Boolean showPlanLogs, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, final ApiCallback<ElasticsearchClusterPlansInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterPlanActivityValidateBeforeCall(clusterId, showPlanLogs, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterPlansInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusterSnapshotSettings
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClusterSnapshotSettingsCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/snapshot/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClusterSnapshotSettingsValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsClusterSnapshotSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsClusterSnapshotSettingsCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cluster snapshot settings
     * Gets cluster snapshot settings.
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @return ClusterSnapshotSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterSnapshotSettings getEsClusterSnapshotSettings(String clusterId) throws ApiException {
        ApiResponse<ClusterSnapshotSettings> resp = getEsClusterSnapshotSettingsWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Get cluster snapshot settings
     * Gets cluster snapshot settings.
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @return ApiResponse&lt;ClusterSnapshotSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterSnapshotSettings> getEsClusterSnapshotSettingsWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getEsClusterSnapshotSettingsValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterSnapshotSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cluster snapshot settings (asynchronously)
     * Gets cluster snapshot settings.
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClusterSnapshotSettingsAsync(String clusterId, final ApiCallback<ClusterSnapshotSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClusterSnapshotSettingsValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterSnapshotSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsClusters
     * @param from The number of clusters to skip. (optional)
     * @param size Maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses and is not supported if a query is also specified. (optional)
     * @param q An optional query to filter Elasticsearch clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showSecurity Includes the Elasticsearch 2.x security information in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param showSystemAlerts The number of system alerts to include in the response. For example, the number of forced restarts caused from a limited amount of memory. Only numbers greater than zero return a field. NOTE: Responses can include a large number of system alerts. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsClustersCall(Integer from, Integer size, String q, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, Integer showSystemAlerts, Boolean showHidden, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (showSecurity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_security", showSecurity));
        if (showMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_metadata", showMetadata));
        if (showPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plans", showPlans));
        if (showPlanDefaults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_plan_defaults", showPlanDefaults));
        if (convertLegacyPlans != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convert_legacy_plans", convertLegacyPlans));
        if (enrichWithTemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enrich_with_template", enrichWithTemplate));
        if (showSystemAlerts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_system_alerts", showSystemAlerts));
        if (showHidden != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_hidden", showHidden));
        if (showSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_settings", showSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsClustersValidateBeforeCall(Integer from, Integer size, String q, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, Integer showSystemAlerts, Boolean showHidden, Boolean showSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getEsClustersCall(from, size, q, showSecurity, showMetadata, showPlans, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, showSystemAlerts, showHidden, showSettings, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get clusters
     * Retrieves the information for all Elasticsearch clusters.
     * @param from The number of clusters to skip. (optional)
     * @param size Maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses and is not supported if a query is also specified. (optional)
     * @param q An optional query to filter Elasticsearch clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showSecurity Includes the Elasticsearch 2.x security information in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param showSystemAlerts The number of system alerts to include in the response. For example, the number of forced restarts caused from a limited amount of memory. Only numbers greater than zero return a field. NOTE: Responses can include a large number of system alerts. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @return ElasticsearchClustersInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElasticsearchClustersInfo getEsClusters(Integer from, Integer size, String q, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, Integer showSystemAlerts, Boolean showHidden, Boolean showSettings) throws ApiException {
        ApiResponse<ElasticsearchClustersInfo> resp = getEsClustersWithHttpInfo(from, size, q, showSecurity, showMetadata, showPlans, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, showSystemAlerts, showHidden, showSettings);
        return resp.getData();
    }

    /**
     * Get clusters
     * Retrieves the information for all Elasticsearch clusters.
     * @param from The number of clusters to skip. (optional)
     * @param size Maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses and is not supported if a query is also specified. (optional)
     * @param q An optional query to filter Elasticsearch clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showSecurity Includes the Elasticsearch 2.x security information in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param showSystemAlerts The number of system alerts to include in the response. For example, the number of forced restarts caused from a limited amount of memory. Only numbers greater than zero return a field. NOTE: Responses can include a large number of system alerts. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @return ApiResponse&lt;ElasticsearchClustersInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElasticsearchClustersInfo> getEsClustersWithHttpInfo(Integer from, Integer size, String q, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, Integer showSystemAlerts, Boolean showHidden, Boolean showSettings) throws ApiException {
        com.squareup.okhttp.Call call = getEsClustersValidateBeforeCall(from, size, q, showSecurity, showMetadata, showPlans, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, showSystemAlerts, showHidden, showSettings, null, null);
        Type localVarReturnType = new TypeToken<ElasticsearchClustersInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get clusters (asynchronously)
     * Retrieves the information for all Elasticsearch clusters.
     * @param from The number of clusters to skip. (optional)
     * @param size Maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses and is not supported if a query is also specified. (optional)
     * @param q An optional query to filter Elasticsearch clusters by. Maps to an Elasticsearch query_string query. (optional)
     * @param showSecurity Includes the Elasticsearch 2.x security information in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials. (optional)
     * @param showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. (optional)
     * @param showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses. (optional)
     * @param convertLegacyPlans When &#x60;true&#x60;, converts the plans to the 2.0.x format. When &#x60;false&#x60;, uses the 1.x format. The default is &#x60;false&#x60;. (optional)
     * @param enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template. (optional)
     * @param showSystemAlerts The number of system alerts to include in the response. For example, the number of forced restarts caused from a limited amount of memory. Only numbers greater than zero return a field. NOTE: Responses can include a large number of system alerts. (optional)
     * @param showHidden Includes the hidden clusters in the response. (optional)
     * @param showSettings Includes the cluster settings in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsClustersAsync(Integer from, Integer size, String q, Boolean showSecurity, Boolean showMetadata, Boolean showPlans, Boolean showPlanDefaults, Boolean convertLegacyPlans, Boolean enrichWithTemplate, Integer showSystemAlerts, Boolean showHidden, Boolean showSettings, final ApiCallback<ElasticsearchClustersInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsClustersValidateBeforeCall(from, size, q, showSecurity, showMetadata, showPlans, showPlanDefaults, convertLegacyPlans, enrichWithTemplate, showSystemAlerts, showHidden, showSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElasticsearchClustersInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEsProxyRequests
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEsProxyRequestsCall(String clusterId, String elasticsearchPath, String xManagementRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "elasticsearch_path" + "\\}", apiClient.escapeString(elasticsearchPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xManagementRequest != null)
        localVarHeaderParams.put("X-Management-Request", apiClient.parameterToString(xManagementRequest));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEsProxyRequestsValidateBeforeCall(String clusterId, String elasticsearchPath, String xManagementRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getEsProxyRequests(Async)");
        }
        // verify the required parameter 'elasticsearchPath' is set
        if (elasticsearchPath == null) {
            throw new ApiException("Missing the required parameter 'elasticsearchPath' when calling getEsProxyRequests(Async)");
        }
        // verify the required parameter 'xManagementRequest' is set
        if (xManagementRequest == null) {
            throw new ApiException("Missing the required parameter 'xManagementRequest' when calling getEsProxyRequests(Async)");
        }
        
        com.squareup.okhttp.Call call = getEsProxyRequestsCall(clusterId, elasticsearchPath, xManagementRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Proxies HTTP GET request to the cluster
     * Proxies HTTP GET request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getEsProxyRequests(String clusterId, String elasticsearchPath, String xManagementRequest) throws ApiException {
        getEsProxyRequestsWithHttpInfo(clusterId, elasticsearchPath, xManagementRequest);
    }

    /**
     * Proxies HTTP GET request to the cluster
     * Proxies HTTP GET request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getEsProxyRequestsWithHttpInfo(String clusterId, String elasticsearchPath, String xManagementRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEsProxyRequestsValidateBeforeCall(clusterId, elasticsearchPath, xManagementRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Proxies HTTP GET request to the cluster (asynchronously)
     * Proxies HTTP GET request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEsProxyRequestsAsync(String clusterId, String elasticsearchPath, String xManagementRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEsProxyRequestsValidateBeforeCall(clusterId, elasticsearchPath, xManagementRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for migrateEsClusterPlan
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param template The ID of the deployment template to migrate to (required)
     * @param validateOnly When true, validates the cluster definition, but does not perform the update (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call migrateEsClusterPlanCall(String clusterId, String template, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/plan/_migrate"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (template != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("template", template));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call migrateEsClusterPlanValidateBeforeCall(String clusterId, String template, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling migrateEsClusterPlan(Async)");
        }
        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling migrateEsClusterPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = migrateEsClusterPlanCall(clusterId, template, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Migrate plan
     * Migrates the configuration of the Elasticsearch cluster to a different template.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param template The ID of the deployment template to migrate to (required)
     * @param validateOnly When true, validates the cluster definition, but does not perform the update (optional)
     * @return ClusterPlanMigrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterPlanMigrationResponse migrateEsClusterPlan(String clusterId, String template, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterPlanMigrationResponse> resp = migrateEsClusterPlanWithHttpInfo(clusterId, template, validateOnly);
        return resp.getData();
    }

    /**
     * Migrate plan
     * Migrates the configuration of the Elasticsearch cluster to a different template.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param template The ID of the deployment template to migrate to (required)
     * @param validateOnly When true, validates the cluster definition, but does not perform the update (optional)
     * @return ApiResponse&lt;ClusterPlanMigrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterPlanMigrationResponse> migrateEsClusterPlanWithHttpInfo(String clusterId, String template, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = migrateEsClusterPlanValidateBeforeCall(clusterId, template, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterPlanMigrationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Migrate plan (asynchronously)
     * Migrates the configuration of the Elasticsearch cluster to a different template.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param template The ID of the deployment template to migrate to (required)
     * @param validateOnly When true, validates the cluster definition, but does not perform the update (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call migrateEsClusterPlanAsync(String clusterId, String template, Boolean validateOnly, final ApiCallback<ClusterPlanMigrationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = migrateEsClusterPlanValidateBeforeCall(clusterId, template, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterPlanMigrationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveEsClusterInstances
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param instancesDown When &#x60;true&#x60;, the instances specified by &#x60;instance_ids&#x60; permanently shut down for data migration logic. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the specified instances and ignores the changes for the cluster state. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveEsClusterInstancesCall(String clusterId, List<String> instanceIds, TransientElasticsearchPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean instancesDown, Boolean moveOnly, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/_move"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));
        if (forceUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_update", forceUpdate));
        if (instancesDown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instances_down", instancesDown));
        if (moveOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("move_only", moveOnly));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveEsClusterInstancesValidateBeforeCall(String clusterId, List<String> instanceIds, TransientElasticsearchPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean instancesDown, Boolean moveOnly, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling moveEsClusterInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling moveEsClusterInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = moveEsClusterInstancesCall(clusterId, instanceIds, body, ignoreMissing, forceUpdate, instancesDown, moveOnly, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move instances
     * Moves one or more instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param instancesDown When &#x60;true&#x60;, the instances specified by &#x60;instance_ids&#x60; permanently shut down for data migration logic. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the specified instances and ignores the changes for the cluster state. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse moveEsClusterInstances(String clusterId, List<String> instanceIds, TransientElasticsearchPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean instancesDown, Boolean moveOnly, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = moveEsClusterInstancesWithHttpInfo(clusterId, instanceIds, body, ignoreMissing, forceUpdate, instancesDown, moveOnly, validateOnly);
        return resp.getData();
    }

    /**
     * Move instances
     * Moves one or more instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param instancesDown When &#x60;true&#x60;, the instances specified by &#x60;instance_ids&#x60; permanently shut down for data migration logic. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the specified instances and ignores the changes for the cluster state. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> moveEsClusterInstancesWithHttpInfo(String clusterId, List<String> instanceIds, TransientElasticsearchPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean instancesDown, Boolean moveOnly, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = moveEsClusterInstancesValidateBeforeCall(clusterId, instanceIds, body, ignoreMissing, forceUpdate, instancesDown, moveOnly, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move instances (asynchronously)
     * Moves one or more instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (optional)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param instancesDown When &#x60;true&#x60;, the instances specified by &#x60;instance_ids&#x60; permanently shut down for data migration logic. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the specified instances and ignores the changes for the cluster state. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveEsClusterInstancesAsync(String clusterId, List<String> instanceIds, TransientElasticsearchPlanConfiguration body, Boolean ignoreMissing, Boolean forceUpdate, Boolean instancesDown, Boolean moveOnly, Boolean validateOnly, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveEsClusterInstancesValidateBeforeCall(clusterId, instanceIds, body, ignoreMissing, forceUpdate, instancesDown, moveOnly, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveEsClusterInstancesAdvanced
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param instancesDown When &#x60;true&#x60;, the instances specified by &#x60;instance_ids&#x60; permanently shut down for data migration logic. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the instances and ignores the changes for the cluster state. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveEsClusterInstancesAdvancedCall(TransientElasticsearchPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean instancesDown, Boolean moveOnly, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/_move"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forceUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_update", forceUpdate));
        if (instancesDown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instances_down", instancesDown));
        if (moveOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("move_only", moveOnly));
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveEsClusterInstancesAdvancedValidateBeforeCall(TransientElasticsearchPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean instancesDown, Boolean moveOnly, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling moveEsClusterInstancesAdvanced(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling moveEsClusterInstancesAdvanced(Async)");
        }
        
        com.squareup.okhttp.Call call = moveEsClusterInstancesAdvancedCall(body, clusterId, forceUpdate, instancesDown, moveOnly, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move instances (advanced)
     * Moves one or more instances in the Elasticsearch cluster. The custom configuration settings are posted in the body.
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param instancesDown When &#x60;true&#x60;, the instances specified by &#x60;instance_ids&#x60; permanently shut down for data migration logic. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the instances and ignores the changes for the cluster state. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse moveEsClusterInstancesAdvanced(TransientElasticsearchPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean instancesDown, Boolean moveOnly, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = moveEsClusterInstancesAdvancedWithHttpInfo(body, clusterId, forceUpdate, instancesDown, moveOnly, validateOnly);
        return resp.getData();
    }

    /**
     * Move instances (advanced)
     * Moves one or more instances in the Elasticsearch cluster. The custom configuration settings are posted in the body.
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param instancesDown When &#x60;true&#x60;, the instances specified by &#x60;instance_ids&#x60; permanently shut down for data migration logic. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the instances and ignores the changes for the cluster state. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> moveEsClusterInstancesAdvancedWithHttpInfo(TransientElasticsearchPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean instancesDown, Boolean moveOnly, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = moveEsClusterInstancesAdvancedValidateBeforeCall(body, clusterId, forceUpdate, instancesDown, moveOnly, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move instances (advanced) (asynchronously)
     * Moves one or more instances in the Elasticsearch cluster. The custom configuration settings are posted in the body.
     * @param body Overrides defaults for the move, including setting the configuration of instances specified in the path (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param forceUpdate When &#x60;true&#x60;, cancels and overwrites the pending plans, or treats the instance as an error. (optional)
     * @param instancesDown When &#x60;true&#x60;, the instances specified by &#x60;instance_ids&#x60; permanently shut down for data migration logic. (optional)
     * @param moveOnly When &#x60;true&#x60;, moves the instances and ignores the changes for the cluster state. (optional)
     * @param validateOnly When &#x60;true&#x60;, validates the move request, then returns the calculated plan without applying the plan. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveEsClusterInstancesAdvancedAsync(TransientElasticsearchPlanConfiguration body, String clusterId, Boolean forceUpdate, Boolean instancesDown, Boolean moveOnly, Boolean validateOnly, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveEsClusterInstancesAdvancedValidateBeforeCall(body, clusterId, forceUpdate, instancesDown, moveOnly, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postEsProxyRequests
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param body The JSON payload to proxy to the Elasticsearch cluster (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postEsProxyRequestsCall(String xManagementRequest, String clusterId, String elasticsearchPath, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "elasticsearch_path" + "\\}", apiClient.escapeString(elasticsearchPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xManagementRequest != null)
        localVarHeaderParams.put("X-Management-Request", apiClient.parameterToString(xManagementRequest));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postEsProxyRequestsValidateBeforeCall(String xManagementRequest, String clusterId, String elasticsearchPath, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xManagementRequest' is set
        if (xManagementRequest == null) {
            throw new ApiException("Missing the required parameter 'xManagementRequest' when calling postEsProxyRequests(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling postEsProxyRequests(Async)");
        }
        // verify the required parameter 'elasticsearchPath' is set
        if (elasticsearchPath == null) {
            throw new ApiException("Missing the required parameter 'elasticsearchPath' when calling postEsProxyRequests(Async)");
        }
        
        com.squareup.okhttp.Call call = postEsProxyRequestsCall(xManagementRequest, clusterId, elasticsearchPath, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Proxies HTTP POST request to the cluster
     * Proxies HTTP POST request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param body The JSON payload to proxy to the Elasticsearch cluster (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postEsProxyRequests(String xManagementRequest, String clusterId, String elasticsearchPath, String body) throws ApiException {
        postEsProxyRequestsWithHttpInfo(xManagementRequest, clusterId, elasticsearchPath, body);
    }

    /**
     * Proxies HTTP POST request to the cluster
     * Proxies HTTP POST request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param body The JSON payload to proxy to the Elasticsearch cluster (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postEsProxyRequestsWithHttpInfo(String xManagementRequest, String clusterId, String elasticsearchPath, String body) throws ApiException {
        com.squareup.okhttp.Call call = postEsProxyRequestsValidateBeforeCall(xManagementRequest, clusterId, elasticsearchPath, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Proxies HTTP POST request to the cluster (asynchronously)
     * Proxies HTTP POST request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param body The JSON payload to proxy to the Elasticsearch cluster (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postEsProxyRequestsAsync(String xManagementRequest, String clusterId, String elasticsearchPath, String body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postEsProxyRequestsValidateBeforeCall(xManagementRequest, clusterId, elasticsearchPath, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for putEsProxyRequests
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param body The JSON payload to proxy to the Elasticsearch cluster (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putEsProxyRequestsCall(String xManagementRequest, String clusterId, String elasticsearchPath, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "elasticsearch_path" + "\\}", apiClient.escapeString(elasticsearchPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xManagementRequest != null)
        localVarHeaderParams.put("X-Management-Request", apiClient.parameterToString(xManagementRequest));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putEsProxyRequestsValidateBeforeCall(String xManagementRequest, String clusterId, String elasticsearchPath, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xManagementRequest' is set
        if (xManagementRequest == null) {
            throw new ApiException("Missing the required parameter 'xManagementRequest' when calling putEsProxyRequests(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling putEsProxyRequests(Async)");
        }
        // verify the required parameter 'elasticsearchPath' is set
        if (elasticsearchPath == null) {
            throw new ApiException("Missing the required parameter 'elasticsearchPath' when calling putEsProxyRequests(Async)");
        }
        
        com.squareup.okhttp.Call call = putEsProxyRequestsCall(xManagementRequest, clusterId, elasticsearchPath, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Proxies HTTP PUT request to the cluster
     * Proxies HTTP PUT request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param body The JSON payload to proxy to the Elasticsearch cluster (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putEsProxyRequests(String xManagementRequest, String clusterId, String elasticsearchPath, String body) throws ApiException {
        putEsProxyRequestsWithHttpInfo(xManagementRequest, clusterId, elasticsearchPath, body);
    }

    /**
     * Proxies HTTP PUT request to the cluster
     * Proxies HTTP PUT request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param body The JSON payload to proxy to the Elasticsearch cluster (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putEsProxyRequestsWithHttpInfo(String xManagementRequest, String clusterId, String elasticsearchPath, String body) throws ApiException {
        com.squareup.okhttp.Call call = putEsProxyRequestsValidateBeforeCall(xManagementRequest, clusterId, elasticsearchPath, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Proxies HTTP PUT request to the cluster (asynchronously)
     * Proxies HTTP PUT request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
     * @param xManagementRequest X-Management-Request header value. Needs to be set to true (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc (required)
     * @param body The JSON payload to proxy to the Elasticsearch cluster (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putEsProxyRequestsAsync(String xManagementRequest, String clusterId, String elasticsearchPath, String body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putEsProxyRequestsValidateBeforeCall(xManagementRequest, clusterId, elasticsearchPath, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for restartEsCluster
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param restoreSnapshot When &#x60;true&#x60; and restoring from a shutdown, restores the cluster from the last available snapshot. (optional)
     * @param skipSnapshot When &#x60;true&#x60;, does not capture a snapshot before restarting the cluster. (optional)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @param groupAttribute Specifies the properties that divide the instances into groups. To restart all of the instances, use &#x27;\\_\\_all\\_\\_&#x27;. To restart the instances by logical zone, use &#x27;\\_\\_zone\\_\\_&#x27;. To restart one instance at a time, use &#x27;\\_\\_name\\_\\_&#x27;, or use a comma-separated list of instance attributes. (optional)
     * @param shardInitWaitTime The time, in seconds, to wait for shards that show no progress of initializing, before rolling the next group (default: 10 minutes) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restartEsClusterCall(String clusterId, Boolean restoreSnapshot, Boolean skipSnapshot, Boolean cancelPending, String groupAttribute, Integer shardInitWaitTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/_restart"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (restoreSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("restore_snapshot", restoreSnapshot));
        if (skipSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_snapshot", skipSnapshot));
        if (cancelPending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cancel_pending", cancelPending));
        if (groupAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group_attribute", groupAttribute));
        if (shardInitWaitTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shard_init_wait_time", shardInitWaitTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restartEsClusterValidateBeforeCall(String clusterId, Boolean restoreSnapshot, Boolean skipSnapshot, Boolean cancelPending, String groupAttribute, Integer shardInitWaitTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling restartEsCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = restartEsClusterCall(clusterId, restoreSnapshot, skipSnapshot, cancelPending, groupAttribute, shardInitWaitTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Restart cluster
     * Restarts the Elasticsearch cluster. When you restart an active cluster, the existing plan is used and a &#x60;cluster_reboot&#x60; is applied. A &#x60;cluster_reboot&#x60; issues an Elasticsearch restart command, then waits for the command to complete. When you restart an inactive cluster, the most recent successful plan is applied.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param restoreSnapshot When &#x60;true&#x60; and restoring from a shutdown, restores the cluster from the last available snapshot. (optional)
     * @param skipSnapshot When &#x60;true&#x60;, does not capture a snapshot before restarting the cluster. (optional)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @param groupAttribute Specifies the properties that divide the instances into groups. To restart all of the instances, use &#x27;\\_\\_all\\_\\_&#x27;. To restart the instances by logical zone, use &#x27;\\_\\_zone\\_\\_&#x27;. To restart one instance at a time, use &#x27;\\_\\_name\\_\\_&#x27;, or use a comma-separated list of instance attributes. (optional)
     * @param shardInitWaitTime The time, in seconds, to wait for shards that show no progress of initializing, before rolling the next group (default: 10 minutes) (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse restartEsCluster(String clusterId, Boolean restoreSnapshot, Boolean skipSnapshot, Boolean cancelPending, String groupAttribute, Integer shardInitWaitTime) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = restartEsClusterWithHttpInfo(clusterId, restoreSnapshot, skipSnapshot, cancelPending, groupAttribute, shardInitWaitTime);
        return resp.getData();
    }

    /**
     * Restart cluster
     * Restarts the Elasticsearch cluster. When you restart an active cluster, the existing plan is used and a &#x60;cluster_reboot&#x60; is applied. A &#x60;cluster_reboot&#x60; issues an Elasticsearch restart command, then waits for the command to complete. When you restart an inactive cluster, the most recent successful plan is applied.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param restoreSnapshot When &#x60;true&#x60; and restoring from a shutdown, restores the cluster from the last available snapshot. (optional)
     * @param skipSnapshot When &#x60;true&#x60;, does not capture a snapshot before restarting the cluster. (optional)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @param groupAttribute Specifies the properties that divide the instances into groups. To restart all of the instances, use &#x27;\\_\\_all\\_\\_&#x27;. To restart the instances by logical zone, use &#x27;\\_\\_zone\\_\\_&#x27;. To restart one instance at a time, use &#x27;\\_\\_name\\_\\_&#x27;, or use a comma-separated list of instance attributes. (optional)
     * @param shardInitWaitTime The time, in seconds, to wait for shards that show no progress of initializing, before rolling the next group (default: 10 minutes) (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> restartEsClusterWithHttpInfo(String clusterId, Boolean restoreSnapshot, Boolean skipSnapshot, Boolean cancelPending, String groupAttribute, Integer shardInitWaitTime) throws ApiException {
        com.squareup.okhttp.Call call = restartEsClusterValidateBeforeCall(clusterId, restoreSnapshot, skipSnapshot, cancelPending, groupAttribute, shardInitWaitTime, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restart cluster (asynchronously)
     * Restarts the Elasticsearch cluster. When you restart an active cluster, the existing plan is used and a &#x60;cluster_reboot&#x60; is applied. A &#x60;cluster_reboot&#x60; issues an Elasticsearch restart command, then waits for the command to complete. When you restart an inactive cluster, the most recent successful plan is applied.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param restoreSnapshot When &#x60;true&#x60; and restoring from a shutdown, restores the cluster from the last available snapshot. (optional)
     * @param skipSnapshot When &#x60;true&#x60;, does not capture a snapshot before restarting the cluster. (optional)
     * @param cancelPending When &#x60;true&#x60;, cancels the pending plans, then restarts the cluster. (optional)
     * @param groupAttribute Specifies the properties that divide the instances into groups. To restart all of the instances, use &#x27;\\_\\_all\\_\\_&#x27;. To restart the instances by logical zone, use &#x27;\\_\\_zone\\_\\_&#x27;. To restart one instance at a time, use &#x27;\\_\\_name\\_\\_&#x27;, or use a comma-separated list of instance attributes. (optional)
     * @param shardInitWaitTime The time, in seconds, to wait for shards that show no progress of initializing, before rolling the next group (default: 10 minutes) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restartEsClusterAsync(String clusterId, Boolean restoreSnapshot, Boolean skipSnapshot, Boolean cancelPending, String groupAttribute, Integer shardInitWaitTime, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restartEsClusterValidateBeforeCall(clusterId, restoreSnapshot, skipSnapshot, cancelPending, groupAttribute, shardInitWaitTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncEsCluster
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncEsClusterCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/_resync"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncEsClusterValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling resyncEsCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = resyncEsClusterCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize cluster
     * Immediately resynchronizes the search index and cache for the selected Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse resyncEsCluster(String clusterId) throws ApiException {
        ApiResponse<EmptyResponse> resp = resyncEsClusterWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Resynchronize cluster
     * Immediately resynchronizes the search index and cache for the selected Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> resyncEsClusterWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = resyncEsClusterValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize cluster (asynchronously)
     * Immediately resynchronizes the search index and cache for the selected Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncEsClusterAsync(String clusterId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncEsClusterValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resyncEsClusters
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resyncEsClustersCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/_resync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skipMatchingVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_matching_version", skipMatchingVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resyncEsClustersValidateBeforeCall(Boolean skipMatchingVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = resyncEsClustersCall(skipMatchingVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resynchronize clusters
     * Asynchronously resynchronizes the search index for all Elasticsearch clusters.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ModelVersionIndexSynchronizationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelVersionIndexSynchronizationResults resyncEsClusters(Boolean skipMatchingVersion) throws ApiException {
        ApiResponse<ModelVersionIndexSynchronizationResults> resp = resyncEsClustersWithHttpInfo(skipMatchingVersion);
        return resp.getData();
    }

    /**
     * Resynchronize clusters
     * Asynchronously resynchronizes the search index for all Elasticsearch clusters.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @return ApiResponse&lt;ModelVersionIndexSynchronizationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelVersionIndexSynchronizationResults> resyncEsClustersWithHttpInfo(Boolean skipMatchingVersion) throws ApiException {
        com.squareup.okhttp.Call call = resyncEsClustersValidateBeforeCall(skipMatchingVersion, null, null);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resynchronize clusters (asynchronously)
     * Asynchronously resynchronizes the search index for all Elasticsearch clusters.
     * @param skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resyncEsClustersAsync(Boolean skipMatchingVersion, final ApiCallback<ModelVersionIndexSynchronizationResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resyncEsClustersValidateBeforeCall(skipMatchingVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelVersionIndexSynchronizationResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchEsClusters
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchEsClustersCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchEsClustersValidateBeforeCall(SearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchEsClustersCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search clusters
     * Retrieves the information for all of the Elasticsearch clusters that match the specified query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @return ElasticsearchClustersInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElasticsearchClustersInfo searchEsClusters(SearchRequest body) throws ApiException {
        ApiResponse<ElasticsearchClustersInfo> resp = searchEsClustersWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Search clusters
     * Retrieves the information for all of the Elasticsearch clusters that match the specified query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @return ApiResponse&lt;ElasticsearchClustersInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElasticsearchClustersInfo> searchEsClustersWithHttpInfo(SearchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = searchEsClustersValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ElasticsearchClustersInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search clusters (asynchronously)
     * Retrieves the information for all of the Elasticsearch clusters that match the specified query.
     * @param body (Optional) The search request to execute. NOTE: When not specified, all of the clusters are matched. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchEsClustersAsync(SearchRequest body, final ApiCallback<ElasticsearchClustersInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchEsClustersValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElasticsearchClustersInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEsClusterCcsSettings
     * @param body Remote clusters for cross-cluster search (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEsClusterCcsSettingsCall(CrossClusterSearchSettings body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/ccs/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEsClusterCcsSettingsValidateBeforeCall(CrossClusterSearchSettings body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setEsClusterCcsSettings(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setEsClusterCcsSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = setEsClusterCcsSettingsCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set remote clusters for cross-cluster search
     * Overwrites or creates the cross-cluster search configuration for the Elasticsearch cluster.
     * @param body Remote clusters for cross-cluster search (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse setEsClusterCcsSettings(CrossClusterSearchSettings body, String clusterId) throws ApiException {
        ApiResponse<EmptyResponse> resp = setEsClusterCcsSettingsWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * Set remote clusters for cross-cluster search
     * Overwrites or creates the cross-cluster search configuration for the Elasticsearch cluster.
     * @param body Remote clusters for cross-cluster search (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> setEsClusterCcsSettingsWithHttpInfo(CrossClusterSearchSettings body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = setEsClusterCcsSettingsValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set remote clusters for cross-cluster search (asynchronously)
     * Overwrites or creates the cross-cluster search configuration for the Elasticsearch cluster.
     * @param body Remote clusters for cross-cluster search (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEsClusterCcsSettingsAsync(CrossClusterSearchSettings body, String clusterId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEsClusterCcsSettingsValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEsClusterInstancesAllSettingsOverrides
     * @param body The settings to override for the instances (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param restartAfterUpdate After overrides are applied, restarts the instances. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEsClusterInstancesAllSettingsOverridesCall(ElasticsearchClusterInstanceSettingsOverrides body, String clusterId, Boolean restartAfterUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (restartAfterUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("restart_after_update", restartAfterUpdate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEsClusterInstancesAllSettingsOverridesValidateBeforeCall(ElasticsearchClusterInstanceSettingsOverrides body, String clusterId, Boolean restartAfterUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setEsClusterInstancesAllSettingsOverrides(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setEsClusterInstancesAllSettingsOverrides(Async)");
        }
        
        com.squareup.okhttp.Call call = setEsClusterInstancesAllSettingsOverridesCall(body, clusterId, restartAfterUpdate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set settings overrides (all instances)
     * Overrides the settings for all of the instances in the Elasticsearch cluster.
     * @param body The settings to override for the instances (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param restartAfterUpdate After overrides are applied, restarts the instances. (optional)
     * @return ElasticsearchClusterInstanceSettingsOverrides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElasticsearchClusterInstanceSettingsOverrides setEsClusterInstancesAllSettingsOverrides(ElasticsearchClusterInstanceSettingsOverrides body, String clusterId, Boolean restartAfterUpdate) throws ApiException {
        ApiResponse<ElasticsearchClusterInstanceSettingsOverrides> resp = setEsClusterInstancesAllSettingsOverridesWithHttpInfo(body, clusterId, restartAfterUpdate);
        return resp.getData();
    }

    /**
     * Set settings overrides (all instances)
     * Overrides the settings for all of the instances in the Elasticsearch cluster.
     * @param body The settings to override for the instances (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param restartAfterUpdate After overrides are applied, restarts the instances. (optional)
     * @return ApiResponse&lt;ElasticsearchClusterInstanceSettingsOverrides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElasticsearchClusterInstanceSettingsOverrides> setEsClusterInstancesAllSettingsOverridesWithHttpInfo(ElasticsearchClusterInstanceSettingsOverrides body, String clusterId, Boolean restartAfterUpdate) throws ApiException {
        com.squareup.okhttp.Call call = setEsClusterInstancesAllSettingsOverridesValidateBeforeCall(body, clusterId, restartAfterUpdate, null, null);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterInstanceSettingsOverrides>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set settings overrides (all instances) (asynchronously)
     * Overrides the settings for all of the instances in the Elasticsearch cluster.
     * @param body The settings to override for the instances (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param restartAfterUpdate After overrides are applied, restarts the instances. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEsClusterInstancesAllSettingsOverridesAsync(ElasticsearchClusterInstanceSettingsOverrides body, String clusterId, Boolean restartAfterUpdate, final ApiCallback<ElasticsearchClusterInstanceSettingsOverrides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEsClusterInstancesAllSettingsOverridesValidateBeforeCall(body, clusterId, restartAfterUpdate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterInstanceSettingsOverrides>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEsClusterInstancesSettingsOverrides
     * @param body The settings to override for the specified instances. (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param restartAfterUpdate After overrides are applied, restarts the instances. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEsClusterInstancesSettingsOverridesCall(ElasticsearchClusterInstanceSettingsOverrides body, String clusterId, List<String> instanceIds, Boolean ignoreMissing, Boolean restartAfterUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));
        if (restartAfterUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("restart_after_update", restartAfterUpdate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEsClusterInstancesSettingsOverridesValidateBeforeCall(ElasticsearchClusterInstanceSettingsOverrides body, String clusterId, List<String> instanceIds, Boolean ignoreMissing, Boolean restartAfterUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setEsClusterInstancesSettingsOverrides(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setEsClusterInstancesSettingsOverrides(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling setEsClusterInstancesSettingsOverrides(Async)");
        }
        
        com.squareup.okhttp.Call call = setEsClusterInstancesSettingsOverridesCall(body, clusterId, instanceIds, ignoreMissing, restartAfterUpdate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set settings overrides
     * Overrides the settings for the specified instances in the Elasticsearch cluster.
     * @param body The settings to override for the specified instances. (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param restartAfterUpdate After overrides are applied, restarts the instances. (optional)
     * @return ElasticsearchClusterInstanceSettingsOverrides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElasticsearchClusterInstanceSettingsOverrides setEsClusterInstancesSettingsOverrides(ElasticsearchClusterInstanceSettingsOverrides body, String clusterId, List<String> instanceIds, Boolean ignoreMissing, Boolean restartAfterUpdate) throws ApiException {
        ApiResponse<ElasticsearchClusterInstanceSettingsOverrides> resp = setEsClusterInstancesSettingsOverridesWithHttpInfo(body, clusterId, instanceIds, ignoreMissing, restartAfterUpdate);
        return resp.getData();
    }

    /**
     * Set settings overrides
     * Overrides the settings for the specified instances in the Elasticsearch cluster.
     * @param body The settings to override for the specified instances. (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param restartAfterUpdate After overrides are applied, restarts the instances. (optional)
     * @return ApiResponse&lt;ElasticsearchClusterInstanceSettingsOverrides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElasticsearchClusterInstanceSettingsOverrides> setEsClusterInstancesSettingsOverridesWithHttpInfo(ElasticsearchClusterInstanceSettingsOverrides body, String clusterId, List<String> instanceIds, Boolean ignoreMissing, Boolean restartAfterUpdate) throws ApiException {
        com.squareup.okhttp.Call call = setEsClusterInstancesSettingsOverridesValidateBeforeCall(body, clusterId, instanceIds, ignoreMissing, restartAfterUpdate, null, null);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterInstanceSettingsOverrides>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set settings overrides (asynchronously)
     * Overrides the settings for the specified instances in the Elasticsearch cluster.
     * @param body The settings to override for the specified instances. (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param restartAfterUpdate After overrides are applied, restarts the instances. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEsClusterInstancesSettingsOverridesAsync(ElasticsearchClusterInstanceSettingsOverrides body, String clusterId, List<String> instanceIds, Boolean ignoreMissing, Boolean restartAfterUpdate, final ApiCallback<ElasticsearchClusterInstanceSettingsOverrides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEsClusterInstancesSettingsOverridesValidateBeforeCall(body, clusterId, instanceIds, ignoreMissing, restartAfterUpdate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElasticsearchClusterInstanceSettingsOverrides>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEsClusterKeystore
     * @param body Keystore settings to update (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEsClusterKeystoreCall(KeystoreContents body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/keystore"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEsClusterKeystoreValidateBeforeCall(KeystoreContents body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setEsClusterKeystore(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setEsClusterKeystore(Async)");
        }
        
        com.squareup.okhttp.Call call = setEsClusterKeystoreCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add or remove settings from the cluster keystore
     * Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values.
     * @param body Keystore settings to update (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @return KeystoreContents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeystoreContents setEsClusterKeystore(KeystoreContents body, String clusterId) throws ApiException {
        ApiResponse<KeystoreContents> resp = setEsClusterKeystoreWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * Add or remove settings from the cluster keystore
     * Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values.
     * @param body Keystore settings to update (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @return ApiResponse&lt;KeystoreContents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeystoreContents> setEsClusterKeystoreWithHttpInfo(KeystoreContents body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = setEsClusterKeystoreValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<KeystoreContents>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add or remove settings from the cluster keystore (asynchronously)
     * Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values.
     * @param body Keystore settings to update (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEsClusterKeystoreAsync(KeystoreContents body, String clusterId, final ApiCallback<KeystoreContents> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEsClusterKeystoreValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeystoreContents>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEsClusterLegacySecuritySettings
     * @param body The legacy security settings (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEsClusterLegacySecuritySettingsCall(LegacySecuritySettings body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/settings/security/legacy"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEsClusterLegacySecuritySettingsValidateBeforeCall(LegacySecuritySettings body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setEsClusterLegacySecuritySettings(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setEsClusterLegacySecuritySettings(Async)");
        }
        
        com.squareup.okhttp.Call call = setEsClusterLegacySecuritySettingsCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set legacy security settings
     * Sets the legacy Shield security settings for a 2.x Elasticsearch cluster.
     * @param body The legacy security settings (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return LegacySecuritySettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegacySecuritySettings setEsClusterLegacySecuritySettings(LegacySecuritySettings body, String clusterId) throws ApiException {
        ApiResponse<LegacySecuritySettings> resp = setEsClusterLegacySecuritySettingsWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * Set legacy security settings
     * Sets the legacy Shield security settings for a 2.x Elasticsearch cluster.
     * @param body The legacy security settings (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ApiResponse&lt;LegacySecuritySettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegacySecuritySettings> setEsClusterLegacySecuritySettingsWithHttpInfo(LegacySecuritySettings body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = setEsClusterLegacySecuritySettingsValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<LegacySecuritySettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set legacy security settings (asynchronously)
     * Sets the legacy Shield security settings for a 2.x Elasticsearch cluster.
     * @param body The legacy security settings (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEsClusterLegacySecuritySettingsAsync(LegacySecuritySettings body, String clusterId, final ApiCallback<LegacySecuritySettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEsClusterLegacySecuritySettingsValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegacySecuritySettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEsClusterMetadataRaw
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEsClusterMetadataRawCall(String body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/metadata/raw"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEsClusterMetadataRawValidateBeforeCall(String body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setEsClusterMetadataRaw(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setEsClusterMetadataRaw(Async)");
        }
        
        com.squareup.okhttp.Call call = setEsClusterMetadataRawCall(body, clusterId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cluster metadata
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the Elasticsearch cluster. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object setEsClusterMetadataRaw(String body, String clusterId, Integer version) throws ApiException {
        ApiResponse<Object> resp = setEsClusterMetadataRawWithHttpInfo(body, clusterId, version);
        return resp.getData();
    }

    /**
     * Set cluster metadata
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the Elasticsearch cluster. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> setEsClusterMetadataRawWithHttpInfo(String body, String clusterId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = setEsClusterMetadataRawValidateBeforeCall(body, clusterId, version, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cluster metadata (asynchronously)
     * Advanced use only. Sets the internal metadata, in free-form JSON, for the Elasticsearch cluster. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
     * @param body The freeform JSON for the cluster (should always be based on the current version retrieved from the GET) (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEsClusterMetadataRawAsync(String body, String clusterId, Integer version, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEsClusterMetadataRawValidateBeforeCall(body, clusterId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEsClusterMonitoring
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param destClusterId The Elasticsearch cluster identifier for the monitoring destination. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEsClusterMonitoringCall(String clusterId, String destClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/monitoring/{dest_cluster_id}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "dest_cluster_id" + "\\}", apiClient.escapeString(destClusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEsClusterMonitoringValidateBeforeCall(String clusterId, String destClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setEsClusterMonitoring(Async)");
        }
        // verify the required parameter 'destClusterId' is set
        if (destClusterId == null) {
            throw new ApiException("Missing the required parameter 'destClusterId' when calling setEsClusterMonitoring(Async)");
        }
        
        com.squareup.okhttp.Call call = setEsClusterMonitoringCall(clusterId, destClusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set monitoring
     * Overwrites or creates the monitoring destination for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param destClusterId The Elasticsearch cluster identifier for the monitoring destination. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse setEsClusterMonitoring(String clusterId, String destClusterId) throws ApiException {
        ApiResponse<EmptyResponse> resp = setEsClusterMonitoringWithHttpInfo(clusterId, destClusterId);
        return resp.getData();
    }

    /**
     * Set monitoring
     * Overwrites or creates the monitoring destination for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param destClusterId The Elasticsearch cluster identifier for the monitoring destination. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> setEsClusterMonitoringWithHttpInfo(String clusterId, String destClusterId) throws ApiException {
        com.squareup.okhttp.Call call = setEsClusterMonitoringValidateBeforeCall(clusterId, destClusterId, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set monitoring (asynchronously)
     * Overwrites or creates the monitoring destination for the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param destClusterId The Elasticsearch cluster identifier for the monitoring destination. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEsClusterMonitoringAsync(String clusterId, String destClusterId, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEsClusterMonitoringValidateBeforeCall(clusterId, destClusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEsClusterName
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param newName The new name for the cluster. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEsClusterNameCall(String clusterId, String newName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/metadata/name/{new_name}"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "new_name" + "\\}", apiClient.escapeString(newName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEsClusterNameValidateBeforeCall(String clusterId, String newName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling setEsClusterName(Async)");
        }
        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling setEsClusterName(Async)");
        }
        
        com.squareup.okhttp.Call call = setEsClusterNameCall(clusterId, newName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cluster name
     * Assigns a name to the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param newName The new name for the cluster. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmptyResponse setEsClusterName(String clusterId, String newName) throws ApiException {
        ApiResponse<EmptyResponse> resp = setEsClusterNameWithHttpInfo(clusterId, newName);
        return resp.getData();
    }

    /**
     * Set cluster name
     * Assigns a name to the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param newName The new name for the cluster. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmptyResponse> setEsClusterNameWithHttpInfo(String clusterId, String newName) throws ApiException {
        com.squareup.okhttp.Call call = setEsClusterNameValidateBeforeCall(clusterId, newName, null, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cluster name (asynchronously)
     * Assigns a name to the Elasticsearch cluster.
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param newName The new name for the cluster. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEsClusterNameAsync(String clusterId, String newName, final ApiCallback<EmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEsClusterNameValidateBeforeCall(clusterId, newName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shutdownEsCluster
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param skipSnapshot When &#x60;true&#x60;, skips the snapshot when the cluster is shut down. (optional)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shutdownEsClusterCall(String clusterId, Boolean skipSnapshot, Boolean hide, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/_shutdown"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skipSnapshot != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_snapshot", skipSnapshot));
        if (hide != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hide", hide));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shutdownEsClusterValidateBeforeCall(String clusterId, Boolean skipSnapshot, Boolean hide, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling shutdownEsCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = shutdownEsClusterCall(clusterId, skipSnapshot, hide, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Shut down cluster
     * Shuts down the active Elasticsearch cluster and removes all of the cluster nodes. The cluster plan is retained. WARNING: To avoid data loss, save the data outside of the cluster before you shut the cluster down.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param skipSnapshot When &#x60;true&#x60;, skips the snapshot when the cluster is shut down. (optional)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse shutdownEsCluster(String clusterId, Boolean skipSnapshot, Boolean hide) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = shutdownEsClusterWithHttpInfo(clusterId, skipSnapshot, hide);
        return resp.getData();
    }

    /**
     * Shut down cluster
     * Shuts down the active Elasticsearch cluster and removes all of the cluster nodes. The cluster plan is retained. WARNING: To avoid data loss, save the data outside of the cluster before you shut the cluster down.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param skipSnapshot When &#x60;true&#x60;, skips the snapshot when the cluster is shut down. (optional)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> shutdownEsClusterWithHttpInfo(String clusterId, Boolean skipSnapshot, Boolean hide) throws ApiException {
        com.squareup.okhttp.Call call = shutdownEsClusterValidateBeforeCall(clusterId, skipSnapshot, hide, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Shut down cluster (asynchronously)
     * Shuts down the active Elasticsearch cluster and removes all of the cluster nodes. The cluster plan is retained. WARNING: To avoid data loss, save the data outside of the cluster before you shut the cluster down.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param skipSnapshot When &#x60;true&#x60;, skips the snapshot when the cluster is shut down. (optional)
     * @param hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shutdownEsClusterAsync(String clusterId, Boolean skipSnapshot, Boolean hide, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shutdownEsClusterValidateBeforeCall(clusterId, skipSnapshot, hide, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for snapshotEsCluster
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param body Overrides default settings for the snapshot (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call snapshotEsClusterCall(String clusterId, ClusterSnapshotRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/_snapshot"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call snapshotEsClusterValidateBeforeCall(String clusterId, ClusterSnapshotRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling snapshotEsCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = snapshotEsClusterCall(clusterId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Take snapshot
     * To create a snapshot of the specified Elasticsearch cluster, uses the configured snapshot repository.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param body Overrides default settings for the snapshot (optional)
     * @return ClusterSnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterSnapshotResponse snapshotEsCluster(String clusterId, ClusterSnapshotRequest body) throws ApiException {
        ApiResponse<ClusterSnapshotResponse> resp = snapshotEsClusterWithHttpInfo(clusterId, body);
        return resp.getData();
    }

    /**
     * Take snapshot
     * To create a snapshot of the specified Elasticsearch cluster, uses the configured snapshot repository.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param body Overrides default settings for the snapshot (optional)
     * @return ApiResponse&lt;ClusterSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterSnapshotResponse> snapshotEsClusterWithHttpInfo(String clusterId, ClusterSnapshotRequest body) throws ApiException {
        com.squareup.okhttp.Call call = snapshotEsClusterValidateBeforeCall(clusterId, body, null, null);
        Type localVarReturnType = new TypeToken<ClusterSnapshotResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Take snapshot (asynchronously)
     * To create a snapshot of the specified Elasticsearch cluster, uses the configured snapshot repository.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param body Overrides default settings for the snapshot (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call snapshotEsClusterAsync(String clusterId, ClusterSnapshotRequest body, final ApiCallback<ClusterSnapshotResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = snapshotEsClusterValidateBeforeCall(clusterId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterSnapshotResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startEsClusterInstances
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startEsClusterInstancesCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startEsClusterInstancesValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startEsClusterInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling startEsClusterInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = startEsClusterInstancesCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start instances
     * Starts the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startEsClusterInstances(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startEsClusterInstancesWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Start instances
     * Starts the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startEsClusterInstancesWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = startEsClusterInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start instances (asynchronously)
     * Starts the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startEsClusterInstancesAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startEsClusterInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startEsClusterInstancesAll
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startEsClusterInstancesAllCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startEsClusterInstancesAllValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startEsClusterInstancesAll(Async)");
        }
        
        com.squareup.okhttp.Call call = startEsClusterInstancesAllCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start all instances
     * Starts all of the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startEsClusterInstancesAll(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startEsClusterInstancesAllWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Start all instances
     * Starts all of the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startEsClusterInstancesAllWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = startEsClusterInstancesAllValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start all instances (asynchronously)
     * Starts all of the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startEsClusterInstancesAllAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startEsClusterInstancesAllValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startEsClusterInstancesAllMaintenanceMode
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startEsClusterInstancesAllMaintenanceModeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/maintenance-mode/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startEsClusterInstancesAllMaintenanceModeValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startEsClusterInstancesAllMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = startEsClusterInstancesAllMaintenanceModeCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start maintenance mode all instances
     * Starts maintenance mode on all of the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startEsClusterInstancesAllMaintenanceMode(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startEsClusterInstancesAllMaintenanceModeWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Start maintenance mode all instances
     * Starts maintenance mode on all of the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startEsClusterInstancesAllMaintenanceModeWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = startEsClusterInstancesAllMaintenanceModeValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start maintenance mode all instances (asynchronously)
     * Starts maintenance mode on all of the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startEsClusterInstancesAllMaintenanceModeAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startEsClusterInstancesAllMaintenanceModeValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startEsClusterMaintenanceMode
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startEsClusterMaintenanceModeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/maintenance-mode/_start"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startEsClusterMaintenanceModeValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling startEsClusterMaintenanceMode(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling startEsClusterMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = startEsClusterMaintenanceModeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start maintenance mode
     * Starts maintenance mode on the specified instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse startEsClusterMaintenanceMode(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = startEsClusterMaintenanceModeWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Start maintenance mode
     * Starts maintenance mode on the specified instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> startEsClusterMaintenanceModeWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = startEsClusterMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start maintenance mode (asynchronously)
     * Starts maintenance mode on the specified instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startEsClusterMaintenanceModeAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startEsClusterMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopEsClusterInstances
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopEsClusterInstancesCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopEsClusterInstancesValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopEsClusterInstances(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling stopEsClusterInstances(Async)");
        }
        
        com.squareup.okhttp.Call call = stopEsClusterInstancesCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop instances
     * Stops the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopEsClusterInstances(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopEsClusterInstancesWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Stop instances
     * Stops the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopEsClusterInstancesWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = stopEsClusterInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop instances (asynchronously)
     * Stops the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopEsClusterInstancesAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopEsClusterInstancesValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopEsClusterInstancesAll
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopEsClusterInstancesAllCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopEsClusterInstancesAllValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopEsClusterInstancesAll(Async)");
        }
        
        com.squareup.okhttp.Call call = stopEsClusterInstancesAllCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop all instances
     * Stops all of the instances in the Elasticsearch cluster..
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopEsClusterInstancesAll(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopEsClusterInstancesAllWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Stop all instances
     * Stops all of the instances in the Elasticsearch cluster..
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopEsClusterInstancesAllWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = stopEsClusterInstancesAllValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop all instances (asynchronously)
     * Stops all of the instances in the Elasticsearch cluster..
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopEsClusterInstancesAllAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopEsClusterInstancesAllValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopEsClusterInstancesAllMaintenanceMode
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopEsClusterInstancesAllMaintenanceModeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/maintenance-mode/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopEsClusterInstancesAllMaintenanceModeValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopEsClusterInstancesAllMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = stopEsClusterInstancesAllMaintenanceModeCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop maintenance mode all instances
     * Stops maintenance mode on all of the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopEsClusterInstancesAllMaintenanceMode(String clusterId) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopEsClusterInstancesAllMaintenanceModeWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * Stop maintenance mode all instances
     * Stops maintenance mode on all of the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopEsClusterInstancesAllMaintenanceModeWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = stopEsClusterInstancesAllMaintenanceModeValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop maintenance mode all instances (asynchronously)
     * Stops maintenance mode on all of the instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopEsClusterInstancesAllMaintenanceModeAsync(String clusterId, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopEsClusterInstancesAllMaintenanceModeValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopEsClusterMaintenanceMode
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopEsClusterMaintenanceModeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/maintenance-mode/_stop"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "instance_ids" + "\\}", apiClient.escapeString(instanceIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreMissing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_missing", ignoreMissing));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopEsClusterMaintenanceModeValidateBeforeCall(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling stopEsClusterMaintenanceMode(Async)");
        }
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling stopEsClusterMaintenanceMode(Async)");
        }
        
        com.squareup.okhttp.Call call = stopEsClusterMaintenanceModeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop maintenance mode
     * Stops maintenance mode on the specified instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ClusterCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCommandResponse stopEsClusterMaintenanceMode(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        ApiResponse<ClusterCommandResponse> resp = stopEsClusterMaintenanceModeWithHttpInfo(clusterId, instanceIds, ignoreMissing);
        return resp.getData();
    }

    /**
     * Stop maintenance mode
     * Stops maintenance mode on the specified instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @return ApiResponse&lt;ClusterCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCommandResponse> stopEsClusterMaintenanceModeWithHttpInfo(String clusterId, List<String> instanceIds, Boolean ignoreMissing) throws ApiException {
        com.squareup.okhttp.Call call = stopEsClusterMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, null, null);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop maintenance mode (asynchronously)
     * Stops maintenance mode on the specified instances in the Elasticsearch cluster.
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param instanceIds A comma-separated list of instance identifiers. (required)
     * @param ignoreMissing When &#x60;true&#x60; and the instance does not exist, proceeds to the next instance, or treats the instance as an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopEsClusterMaintenanceModeAsync(String clusterId, List<String> instanceIds, Boolean ignoreMissing, final ApiCallback<ClusterCommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopEsClusterMaintenanceModeValidateBeforeCall(clusterId, instanceIds, ignoreMissing, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEsClusterCurationSettings
     * @param body The cluster curation settings including updated values (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param version If specified then checks for conflicts against the version of the cluster curation settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEsClusterCurationSettingsCall(ClusterCurationSettings body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/curation/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEsClusterCurationSettingsValidateBeforeCall(ClusterCurationSettings body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEsClusterCurationSettings(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling updateEsClusterCurationSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = updateEsClusterCurationSettingsCall(body, clusterId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cluster curation settings
     * Overrides cluster curation settings for an Elasticsearch cluster.
     * @param body The cluster curation settings including updated values (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param version If specified then checks for conflicts against the version of the cluster curation settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ClusterCurationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCurationSettings updateEsClusterCurationSettings(ClusterCurationSettings body, String clusterId, Integer version) throws ApiException {
        ApiResponse<ClusterCurationSettings> resp = updateEsClusterCurationSettingsWithHttpInfo(body, clusterId, version);
        return resp.getData();
    }

    /**
     * Update cluster curation settings
     * Overrides cluster curation settings for an Elasticsearch cluster.
     * @param body The cluster curation settings including updated values (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param version If specified then checks for conflicts against the version of the cluster curation settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;ClusterCurationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCurationSettings> updateEsClusterCurationSettingsWithHttpInfo(ClusterCurationSettings body, String clusterId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateEsClusterCurationSettingsValidateBeforeCall(body, clusterId, version, null, null);
        Type localVarReturnType = new TypeToken<ClusterCurationSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cluster curation settings (asynchronously)
     * Overrides cluster curation settings for an Elasticsearch cluster.
     * @param body The cluster curation settings including updated values (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param version If specified then checks for conflicts against the version of the cluster curation settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEsClusterCurationSettingsAsync(ClusterCurationSettings body, String clusterId, Integer version, final ApiCallback<ClusterCurationSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEsClusterCurationSettingsValidateBeforeCall(body, clusterId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCurationSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEsClusterMetadataSettings
     * @param body The cluster settings including updated values (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEsClusterMetadataSettingsCall(ClusterMetadataSettings body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/metadata/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEsClusterMetadataSettingsValidateBeforeCall(ClusterMetadataSettings body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEsClusterMetadataSettings(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling updateEsClusterMetadataSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = updateEsClusterMetadataSettingsCall(body, clusterId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cluster metadata settings
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied. Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     * @param body The cluster settings including updated values (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ClusterMetadataSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterMetadataSettings updateEsClusterMetadataSettings(ClusterMetadataSettings body, String clusterId, Integer version) throws ApiException {
        ApiResponse<ClusterMetadataSettings> resp = updateEsClusterMetadataSettingsWithHttpInfo(body, clusterId, version);
        return resp.getData();
    }

    /**
     * Update cluster metadata settings
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied. Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     * @param body The cluster settings including updated values (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @return ApiResponse&lt;ClusterMetadataSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterMetadataSettings> updateEsClusterMetadataSettingsWithHttpInfo(ClusterMetadataSettings body, String clusterId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateEsClusterMetadataSettingsValidateBeforeCall(body, clusterId, version, null, null);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cluster metadata settings (asynchronously)
     * All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied. Specifying a &#x60;null&#x60; value reverts the field to the default value, or removes the field when no default value exists.
     * @param body The cluster settings including updated values (required)
     * @param clusterId Elasticsearch cluster identifier (required)
     * @param version Checks for conflicts against the metadata version, then returns the value in the &#x60;x-cloud-resource-version&#x60; header. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEsClusterMetadataSettingsAsync(ClusterMetadataSettings body, String clusterId, Integer version, final ApiCallback<ClusterMetadataSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEsClusterMetadataSettingsValidateBeforeCall(body, clusterId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterMetadataSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEsClusterPlan
     * @param body The update plan definition (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEsClusterPlanCall(ElasticsearchClusterPlan body, String clusterId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/plan"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (validateOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_only", validateOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEsClusterPlanValidateBeforeCall(ElasticsearchClusterPlan body, String clusterId, Boolean validateOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEsClusterPlan(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling updateEsClusterPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = updateEsClusterPlanCall(body, clusterId, validateOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update plan
     * Updates the configuration of the Elasticsearch cluster.
     * @param body The update plan definition (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @return ClusterCrudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterCrudResponse updateEsClusterPlan(ElasticsearchClusterPlan body, String clusterId, Boolean validateOnly) throws ApiException {
        ApiResponse<ClusterCrudResponse> resp = updateEsClusterPlanWithHttpInfo(body, clusterId, validateOnly);
        return resp.getData();
    }

    /**
     * Update plan
     * Updates the configuration of the Elasticsearch cluster.
     * @param body The update plan definition (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @return ApiResponse&lt;ClusterCrudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterCrudResponse> updateEsClusterPlanWithHttpInfo(ElasticsearchClusterPlan body, String clusterId, Boolean validateOnly) throws ApiException {
        com.squareup.okhttp.Call call = updateEsClusterPlanValidateBeforeCall(body, clusterId, validateOnly, null, null);
        Type localVarReturnType = new TypeToken<ClusterCrudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update plan (asynchronously)
     * Updates the configuration of the Elasticsearch cluster.
     * @param body The update plan definition (required)
     * @param clusterId The Elasticsearch cluster identifier. (required)
     * @param validateOnly When &#x60;true&#x60;, validates the cluster definition without performing the update. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEsClusterPlanAsync(ElasticsearchClusterPlan body, String clusterId, Boolean validateOnly, final ApiCallback<ClusterCrudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEsClusterPlanValidateBeforeCall(body, clusterId, validateOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterCrudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEsClusterSnapshotSettings
     * @param body The cluster snapshot settings including updated values (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param version If specified then checks for conflicts against the version of the cluster snapshot settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEsClusterSnapshotSettingsCall(ClusterSnapshotSettings body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clusters/elasticsearch/{cluster_id}/snapshot/settings"
            .replaceAll("\\{" + "cluster_id" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEsClusterSnapshotSettingsValidateBeforeCall(ClusterSnapshotSettings body, String clusterId, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEsClusterSnapshotSettings(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling updateEsClusterSnapshotSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = updateEsClusterSnapshotSettingsCall(body, clusterId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cluster snapshot settings
     * Any changes in the PATCHed object will be applied to the snapshot settings object.  PATCHing existing fields will cause same values to be re-applied. PATCHing a value of &#x27;null&#x27; will cause the field to be reverted to its default value or removed if no default value exists.
     * @param body The cluster snapshot settings including updated values (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param version If specified then checks for conflicts against the version of the cluster snapshot settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ClusterSnapshotSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterSnapshotSettings updateEsClusterSnapshotSettings(ClusterSnapshotSettings body, String clusterId, Integer version) throws ApiException {
        ApiResponse<ClusterSnapshotSettings> resp = updateEsClusterSnapshotSettingsWithHttpInfo(body, clusterId, version);
        return resp.getData();
    }

    /**
     * Update cluster snapshot settings
     * Any changes in the PATCHed object will be applied to the snapshot settings object.  PATCHing existing fields will cause same values to be re-applied. PATCHing a value of &#x27;null&#x27; will cause the field to be reverted to its default value or removed if no default value exists.
     * @param body The cluster snapshot settings including updated values (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param version If specified then checks for conflicts against the version of the cluster snapshot settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @return ApiResponse&lt;ClusterSnapshotSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterSnapshotSettings> updateEsClusterSnapshotSettingsWithHttpInfo(ClusterSnapshotSettings body, String clusterId, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = updateEsClusterSnapshotSettingsValidateBeforeCall(body, clusterId, version, null, null);
        Type localVarReturnType = new TypeToken<ClusterSnapshotSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cluster snapshot settings (asynchronously)
     * Any changes in the PATCHed object will be applied to the snapshot settings object.  PATCHing existing fields will cause same values to be re-applied. PATCHing a value of &#x27;null&#x27; will cause the field to be reverted to its default value or removed if no default value exists.
     * @param body The cluster snapshot settings including updated values (required)
     * @param clusterId Identifier for the Elasticsearch cluster (required)
     * @param version If specified then checks for conflicts against the version of the cluster snapshot settings (returned in &#x27;x-cloud-resource-version&#x27; of the GET request) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEsClusterSnapshotSettingsAsync(ClusterSnapshotSettings body, String clusterId, Integer version, final ApiCallback<ClusterSnapshotSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEsClusterSnapshotSettingsValidateBeforeCall(body, clusterId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterSnapshotSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
